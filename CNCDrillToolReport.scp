uses
  RouteFunctions,
  Eng_DrillFunctions;
const
  ExcelTemplate = 'EngenixCNCDrillDetails.xlsx';
  ExcelReport   = StringReplace(ExcelTemplate,'.xlsx', Fnc.GetJobData.Values['JobName'] + '.xlsx', SetOf([rfReplaceAll, rfIgnoreCase]));
  FileTemplateDir = 'C:\Engenix\Report\Template\';
  WorkingDir = 'C:\Engenix\Report\';

var
  ErrFound : boolean;
  ErrMsg : string;
  ExcelQuery : TADOQuery;

procedure CheckTemplatesExists;
begin
  if (DirectoryExists(FileTemplateDir)) then
  begin
    if not (FileExists(FileTemplateDir + ExcelTemplate)) then
    begin
      ErrFound := True;
      ErrMsg := 'Template file ' + FileTemplateDir + ExcelTemplate + ' not found';
    end;
  end
  else
  begin
    ErrFound := True;
    ErrMsg := 'Template directory ' + FileTemplateDir + ' not found.';
  end;
end;

function CheckReportExists: boolean;
begin
  result := false;
  if FileExists(WorkingDir + ExcelReport) then
    result := true;
end;

function FileCopy(Source,Dest : String): Boolean;
var
  SourceStream,DestStream : TFileStream;
begin
  try
    SourceStream:=TFileStream.Create(Source,fmOpenRead);
    DestStream:=TFileStream.Create(Dest,fmCreate);
    DestStream.CopyFrom(SourceStream,SourceStream.Size);
    SourceStream.Free;
    DestStream.Free;
    Result := True;
  except
    Result := False;
  end;
end;

procedure CopyTemplateToWorkingDir;
begin
  try
    begin
      if not(FileCopy(FileTemplateDir+ExcelTemplate,WorkingDir+ExcelReport)) then
      begin
        ErrFound := True;
        ErrMsg := 'Unable to copy Excel file from the template directory';
      end;
    end
  except
    ErrFound := True;
    ErrMsg := 'Exception error copying Excel file from the template directory';
  end;
end;

 function GenMaterialType: string;

 begin
  result := '';
  if Fnc.SysGetAttrValue('CoreMat') <> '' then
    result := Fnc.SysGetAttrValue('CoreMat')

  if (Fnc.SysGetAttrValue('PPGMat') <> '') and ((Fnc.SysGetAttrValue('PPGMat') <> 'No PPG')) then
  begin
    if Fnc.SysGetAttrValue('PPGMat') <> Fnc.SysGetAttrValue('CoreMat') then
    result := result + '/' + Fnc.SysGetAttrValue('PPGMat');
  end;
end;

procedure GenCNCDrillReport;
begin
  ErrMsg := '';
  ErrFound := false;

  CheckTemplatesExists;
  if ErrFound then
  begin
    MessageDlg(ErrMsg, mtError, Setof([mbOK]), 0);
    exit;
  end
  else
  begin
    if not CheckReportExists then
    CopyTemplateToWorkingDir;
  end
  if ErrFound then
    MessageDlg(ErrMsg, mtError, Setof([mbOK]), 0);

  if not ErrFound then
  begin
    Fnc.MouseBusy;
    Excelquery := TadoQuery.Create(nil);
    Excelquery.ConnectionString := Fnc.ExcelConnect(WorkingDir + ExcelReport, true, 0);
    Excelquery.Close;
    Excelquery.Sql.Clear;
    Excelquery.Sql.Add('SELECT * FROM [CNC Drill Report$]');

    try
      Excelquery.Open;
    except
      MessageDlg('Error on Excel query', mtError, Setof([mbOK]), 0);
      Excelquery.Close;
      Excelquery.Free;
      exit;
    end;

    try
      ExcelQuery.First;
      if ExcelQuery.EOF  and ExcelQuery.BOF then // Add new row if empty
        ExcelQuery.Append;
      else
        Excelquery.Edit  // Else Edit Existing Row. Will Need to eventually Filter/Find each drill file

      //Fnc.OpenDataGrid(ExcelQuery)

      Excelquery.FieldByName('JobID').AsString := Fnc.GetJobData.Values['JobId'];
      Excelquery.FieldByName('Customer').AsString := Fnc.GetJobData.Values['CustomerName'];
      Excelquery.FieldByName('Job Name').AsString := Fnc.GetJobData.Values['JobName'];
      Excelquery.FieldByName('Part Description').AsString := Fnc.GetJobData.Values['PartDescription'];
      Excelquery.FieldByName('Part Number').AsString := Fnc.GetJobData.Values['PartNumberName'];
      Excelquery.FieldByName('Job Type').AsString := Eng_JobType;
      Excelquery.FieldByName('Export to ERP Date').AsString := 'NEED TO UPDATE THIS AT EXXXXPORT';
      Excelquery.FieldByName('Material type').AsString := GenMaterialType;
      Excelquery.FieldByName('Layer Count').AsString := Fnc.SysGetAttrValue('LayerCount');
      Excelquery.FieldByName('Board Thickness').AsString := Fnc.SysGetAttrValue('LayupThickness');
      Excelquery.FieldByName('NC Drill Entry Material').AsString := Fnc.SysGetAttrValue('NC_Drill_1_EntryMat'); // Will need to figure out 1st Drill v 2nd Drill
      Excelquery.FieldByName('NC Stack Height').AsString := Fnc.SysGetAttrValue('Stack_Hgt'); // Will need to figure out 1st Drill v 2nd Drill
      Excelquery.FieldByName('Build Stage').AsString := Fnc.SysGetAttrValue('ItemMatrlDesc');
      Excelquery.FieldByName('Panel Length').AsString := Fnc.SysGetAttrValue('Panel_Length');
      Excelquery.FieldByName('Panel Width').AsString := Fnc.SysGetAttrValue('Panel_Width');
      ExcelQuery.Post
    finally
      Excelquery.Close;
      Excelquery.Free;
      Fnc.MouseNormal;
    end;
  end;
end;

begin
  GenCNCDrillReport;
end;
