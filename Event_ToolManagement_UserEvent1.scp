//HeaderImportExport-->
//SiteId=0
//Enterprise=True
//ScriptType=1
//ScriptGroup=Tool Management
//HeaderImportExport<--
const
  OwnerCAMArtwork = 'CAM / Artwork';
  OwnerCAM = 'CAM';
  OwnerDoc = 'DOC Staff';

procedure AddToolForThisLayer(ToolTable: TSysTable; ToolName, LayerName, MfgPartName, Owner: string);
var
  doInsert: boolean;

begin
 { if (LayerName <> '') and (ToolTable.Locate('Layer;Deleted', [LayerName, false], SetOf([loCaseInsensitive]))) then
    ToolTable.Edit
  else if ToolTable.Locate('ToolName;Deleted', [ToolName, false], SetOf([loCaseInsensitive])) then
    ToolTable.Edit
  else }
  if LayerName <> '' then
  begin
    doInsert := not ToolTable.Locate('Layer;Deleted;Inactive', [LayerName, False, False], SetOf([loCaseInsensitive]));
    if doInsert then doInsert := not ToolTable.Locate('Layer;Deleted;Inactive', [LayerName, False, True], SetOf([loCaseInsensitive]));
    if doInsert then doInsert := not ToolTable.Locate('Layer;Deleted;Inactive', [LayerName, True, False], SetOf([loCaseInsensitive]));
    if doInsert then doInsert := not ToolTable.Locate('Layer;Deleted;Inactive', [LayerName, True, True], SetOf([loCaseInsensitive]));
  end
  else
  begin
    doInsert := not ToolTable.Locate('ToolName;Deleted;Inactive', [ToolName, False, False], SetOf([loCaseInsensitive]));
    if doInsert then doInsert := not ToolTable.Locate('ToolName;Deleted;Inactive', [ToolName, False, True], SetOf([loCaseInsensitive]));
    if doInsert then doInsert := not ToolTable.Locate('ToolName;Deleted;Inactive', [ToolName, True, False], SetOf([loCaseInsensitive]));
    if doInsert then doInsert := not ToolTable.Locate('ToolName;Deleted;Inactive', [ToolName, True, True], SetOf([loCaseInsensitive]));
  end;

  if not doInsert then
    ToolTable.Edit
  else
  begin
    ToolTable.Append;
    ToolTable.FieldByName('Layer').AsString := LayerName;
    ToolTable.FieldByName('ToolTypeId').AsInteger := 1;
    ToolTable.FieldByName('Deleted').AsBoolean := False;
    ToolTable.FieldByName('Inactive').AsBoolean := False;
    ToolTable.FieldByName('Seq').AsInteger := 1;
    ToolTable.FieldByName('ToolRev').AsString := '1';
    ToolTable.FieldByName('ToolDate').AsDateTime := Date;
    ToolTable.FieldByName('ToolTime').AsDateTime := Time;
    ToolTable.FieldByName('ToolHeaderId').AsInteger := -1;
  end;

  ToolTable.FieldByName('ToolName').AsString := ToolName;
  ToolTable.FieldByName('MfgPart').AsString := MfgPartName;
  ToolTable.FieldByName('ToolModOwner').AsString := Owner;
  ToolTable.FieldByName('Deleted').AsBoolean := False;
  ToolTable.FieldByName('Inactive').AsBoolean := False;
  if ToolTable.FieldByName('ToolRev').AsString = '' then ToolTable.FieldByName('ToolRev').AsString := '1';
  ToolTable.FieldByName('ToolModEditable').AsBoolean := true;

  ToolTable.Post;
end;

function SearchParentMfgPart(ItemLayerPntr: integer): string;
begin
  Result := '';

  //Fnc.OpenDataGrid(Fnc.SysStackupTable)
  Fnc.SysStackupTable.Filtered := False;
  if Fnc.SysStackupTable.Locate('ItemLayerPntr', ItemLayerPntr, SetOf([])) then
  begin
    while Fnc.SysStackupTable.Locate('RecId', Fnc.SysStackupTable.FieldByName('RecIdParent').AsInteger, SetOf([])) do
    begin
      if (Fnc.SysStackupTable.FieldByName('ItemType').AsString = cStackupMfgTopLevel) or
         (Fnc.SysStackupTable.FieldByName('ItemType').AsString = cStackupMfgSubLevel) or // double check cStackupMfgSubLevel is correct in LCS test database
         (Fnc.SysStackupTable.FieldByName('ItemType').AsString = cStackupMfgSubAssy) then
      begin
        Result := Fnc.SysStackupTable.FieldByName('ItemMatrlDesc').AsString;
        break;
      end;
    end;
  end;
end;

function GetTopAndBotLayer(MfgPartName: string; var TopLayer: string; var BotLayer: string) : string;
var
 StrList: TStringList;
begin
  StrList := TStringlist.Create;
  try
    StrList.Delimiter := '/';
    StrList.DelimitedText := MfgPartName;

    if StrList.Count = 3 then
    begin
      TopLayer := trim(StrList[1]);
      BotLayer := trim(StrList[2]);
    end;

  finally
    StrList.Free;
  end;
end;

function GetDrillSide(StartName, TopLayerStr, BotLayerStr: string) : string;
begin
  result := '';
  if ( StartName = TopLayerStr)  or ( StartName <> BotLayerStr ) then result := 'B'
  else
  if ( StartName <> TopLayerStr  ) or ( StartName = BotLayerStr ) then result := 'A'
end;

function GetDrillRoutToolName(LayerName: string; MfgPartName: string) : string;
var
  TopLayerStr,
  BotLayerStr,
  MfgPartStr,
  StartName,
  EndName,
  side: string;
  i,
  DrillType: integer;
begin
  Result := '';
  LayerName := UpperCase(LayerName);
  StartName := Fnc.SysGetLayerAttrValue(LayerName, 'Start_Name');
  EndName := Fnc.SysGetLayerAttrValue(LayerName, 'End_Name')
  DrillType :=  Fnc.SysGetLayerAttrValue(LayerName, 'DrillDefId');

  // PTH Primary Drill  = 1
  // 2X NC Drilling = 9
  // BackDrill = 6
  // Mech Blind Via = 8
  // Laser Via = 2
  // Rout = 3
  if DrillType = 1 then result := 'NC';

  if pos('Top', MfgPartName) = 1 then
  begin
    if DrillType = 9 then result := 'NC 2nd';
  end
  else // Subs & drilled Inners
  begin
    result := result + ' (' + StartName + '-' + EndName  + ')';
  end;

  if DrillType = 2 then  // Laser
  begin
    GetTopAndBotLayer(MfgPartName, TopLayerStr, BotLayerStr)
    side := GetDrillSide(StartName, TopLayerStr, BotLayerStr)
    result := 'Laser Drill ' + side;
  end;

  if DrillType = 6 then // Back Drill
  begin
    GetTopAndBotLayer(MfgPartName, TopLayerStr, BotLayerStr)
    side := GetDrillSide(StartName, TopLayerStr, BotLayerStr)
    result := 'BackDrill ' + side;
  end;

  if DrillType = 8 then // Mech Blind Via
  begin
    GetTopAndBotLayer(MfgPartName, TopLayerStr, BotLayerStr)
    side := GetDrillSide(StartName, TopLayerStr, BotLayerStr)
    result := 'Mech Drill ' + side;
  end;

  if DrillType = 3 then // Rout
    result := 'Routing';

  // if nothing fits, then make the toolname same as the layername
  if result = '' then  Result := 'NO TOOL NAME';
end;

function ScreenPrintResistTM : boolean;
Var
  ResistList : TStringList;
  i : integer;
begin
  result := false;

  if Fnc.SysGetAttrValueTopLevel('SM_Process') = 'Screen Print' then    // 1110 Override Soldermask process
    result := true
  else if Fnc.SysGetAttrValueTopLevel('SM_Process') = 'Spray Coat' then
    result := false
  else
  begin
    ResistList := TStringList.Create;
    ResistList := Fnc.SysGetItemAttrValueList('ItemFamily', cStackupSolderMask, 0, true);

    for i := 0 to ResistList.Count - 1 do
    begin
      case ResistList.strings[i] of
        'DSR330S-50-99R',
        'PSR2000-KX700HF',
        'PSR2000-ME8-160PS',
        'PSR2000-YT03A',
        'PSR4000-AM10',
        'PSR4000-BL500',
        'PSR2000-BL500', //Correct name for Mask Type above.
        'PSR4000-BNDG',
        'PSR4000-EG23',
        'ES 2467 XM-DGGREEN',
        'PSR4000 AUS308 GREEN',
        'Greentec 600AA S70V(PUR)':  // AUS308 should be screen printed
        result := true;
      end;
    end;
    ResistList.Free;
  end;
end;

function ToolNameFromLayerType(LayerType: string; TopLayerDSeq: integer; BotLayerDSeq: integer; LayerDSeq: integer ) : string;
begin
  result := '';

  case LayerType of
    cStackupLegend : result := 'Marking';
    cStackupSolderMask: if ScreenPrintResistTM then result := 'Resist Print' else result := 'Resist Image';
  end;

  if result <> '' then
  begin
    if LayerDSeq < TopLayerDSeq then result := result + ' B' else
    if LayerDSeq > BotLayerDSeq then result := result + ' A';
  end;
end;

function getPlugOrFillType(DrillFillID: integer): string;
var
  Qry: TAdoQuery;
begin
  result := '';
  Qry := TAdoQuery.Create(nil);
  try
    Qry.Connection := Fnc.DBConnection;
    Qry.Sql.Add('SELECT DrillParamDesc FROM DrillFileParam WHERE DrillParamId = ' + QuotedStr(DrillFillID));
    Qry.Active := True;

    Qry.First;
    result := Qry.FieldByName('DrillParamDesc').AsString;
  finally
    Qry.Active := False;
    Qry.Free;
  end;
end;

function genPlugFillToolName(LayerName: string; MfgPartName: string; DrillFillID: integer) : string;
var
  plugFillType,
  plugSide: string;
begin
  result := '';
  plugFillType := getPlugOrFillType(DrillFillID);

  if pos('Epoxy', plugFillType) > 0 then result := 'Epoxy Plug';
  if pos('Primary ', plugFillType) > 0 then result := 'Primary Plug';
  if pos('Secondary ', plugFillType) > 0 then result := 'Secondary Plug';
  if pos('Expoxy', plugFillType) > 0 then result := 'Epoxy Plug';  // "bug" in Filler Name

  if pos('Top', MfgPartName) = 1 then
  begin
    if pos(' A', plugFillType) > 0 then plugSide := 'A';
    if pos(' B', plugFillType) > 0 then plugSide := 'B';
    if pos(' AB', plugFillType) > 0 then plugSide := 'AB';
    if pos(' BA', plugFillType) > 0 then plugSide := 'BA';
  end
  else // Subs & drilled Inners
    plugSide := Fnc.SysGetLayerAttrValue(LayerName, 'Start_Name');

  result := result + ' ' + plugSide;
end

function getTopBotLayerDisplaySeq(var TopLayerDSeq: integer; var BotLayerDSeq: integer) : string;
begin
  Fnc.SysLayerTable.Filtered := false;
  Fnc.SysLayerTable.Filter := 'LayerDesc = ' + QuotedStr('Layer');   // 'Type = ' + QuotedStr('PP/Filler');
  Fnc.SysLayerTable.Filtered := true;
  Fnc.SysLayerTable.First;
  TopLayerDSeq := Fnc.SysLayerTable.FieldByName('DisplaySeq').AsInteger;
  Fnc.SysLayerTable.Last;
  BotLayerDSeq := Fnc.SysLayerTable.FieldByName('DisplaySeq').AsInteger;
  Fnc.SysLayerTable.Filter := '';
  Fnc.SysLayerTable.Filtered := false;
end;

procedure ToolManagementEvent1(ToolTable: TSysTable; ParamList: TStringList);
var
  LayerName,
  ToolName,
  MfgPartName,
  LayerType,
  Owner: string;
  TopLayerDSeq,
  BotLayerDSeq,
  LayerDSeq,
  DrillFillID: integer;
  FilterStatus: boolean;
begin
 // FilterStatus := Fnc.SysStackupTable.Filtered;
//  Fnc.SysStackupTable.Filtered := False;
  try
    FilterStatus := Fnc.SysStackupTable.Filtered;
    Fnc.SysStackupTable.Filtered := False;
    getTopBotLayerDisplaySeq(TopLayerDSeq, BotLayerDSeq)

    //Fnc.OpenDataGrid(Fnc.SysLayerTable);
    //Fnc.OpenDataGrid(ToolTable);
    //Fnc.OpenDataGrid(Fnc.SysStackupTable);

    Fnc.SysLayerTable.First;
    while not Fnc.SysLayerTable.Eof do
    begin
      ToolName := '';
      LayerName := Fnc.SysLayerTable.FieldByName('LayerName').AsString;
      LayerDSeq := Fnc.SysLayerTable.FieldByName('DisplaySeq').AsInteger;
      LayerType := Fnc.SysLayerTable.FieldByName('ItemType').AsString;
      MfgPartName := SearchParentMfgPart(Fnc.SysLayerTable.FieldByName('RecId').AsInteger);
      DrillFillID := Fnc.SysGetLayerAttrValue(LayerName, 'DrillFilledId');

      // Toolname will be determined by layer type primarily
      // Copper Layers get the Layer Name as the Tool Name
      case LayerType of
        cStackupLayer : begin ToolName := LayerName; Owner := OwnerCAMArtwork; end;
        cStackupLegend,
        cStackupSolderMask : begin
                               ToolName := ToolNameFromLayerType(LayerType, TopLayerDSeq, BotLayerDSeq, LayerDSeq);
                               Owner := OwnerCAMArtwork;
                             end;
        cStackUpDrill,
        cStackUpRout : begin
                         ToolName := GetDrillRoutToolName(LayerName, MfgPartName);
                         Owner := OwnerCAM;
                       end;
      else
        ToolName := 'NO TOOL NAME'
      end;

      if ToolName <> '' then
      begin
        if MfgPartName <> '' then
          AddToolForThisLayer(ToolTable, ToolName, LayerName, MfgPartName, Owner);
      end;

      if (DrillFillID <> 22) and (DrillFillID <> -1) then  // For Hole Fill we need to create to tool manually
        AddToolForThisLayer(ToolTable, genPlugFillToolName(LayerName, MfgPartName, DrillFillID), '', MfgPartName, OwnerCAMArtwork);

      Fnc.SysLayerTable.Next;
    end;

    // Add Manual Tools (Not based on layers)
    if Fnc.SysGetAttrValueTopLevel('Conf_Mask') then
      AddToolForThisLayer(ToolTable, 'CONFMASK', '', MfgPartName, OwnerCAMArtwork);
    AddToolForThisLayer(ToolTable, 'PDD', '', MfgPartName, OwnerDoc);
    AddToolForThisLayer(ToolTable, 'IL CID', '', MfgPartName, OwnerDoc);
    AddToolForThisLayer(ToolTable, 'OL CID', '', MfgPartName, OwnerDoc);
    AddToolForThisLayer(ToolTable, 'TMD', '', MfgPartName, OwnerDoc);
    AddToolForThisLayer(ToolTable, 'PID', '', MfgPartName, OwnerDoc);
    AddToolForThisLayer(ToolTable, 'Product Spec', '', MfgPartName, OwnerDoc);
    AddToolForThisLayer(ToolTable, 'EC Jig', '', MfgPartName, OwnerCAMArtwork);

  finally
    Fnc.SysStackupTable.Filtered := FilterStatus;
  end;
end;

