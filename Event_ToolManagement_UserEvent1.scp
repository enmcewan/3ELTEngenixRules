//HeaderImportExport-->
//SiteId=0
//Enterprise=True
//ScriptType=1
//ScriptGroup=Tool Management
//HeaderImportExport<--
uses
  RouteFunctions;

const

  OwnerCAMArtwork = 'CAM / Artwork';
  OwnerCAM = 'CAM';
  OwnerDoc = 'DOC Staff';

  PTHPrimaryDrill  = 1;
  LaserVia         = 2;
  Rout             = 3;
  CounterSink      = 4;
  CounterBore      = 5;
  Backdrill        = 6;
  Mill             = 7;
  MechBlindVia     = 8;
  NCDrilling2X     = 9;

  NotADrill        = -1;

procedure AddToolForThisLayer(ToolTable: TSysTable; ToolName, LayerName, MfgPartName, Owner: string);
var

  doInsert: boolean;

begin

  if LayerName <> '' then
  begin

    doInsert := not ToolTable.Locate('ToolName;Layer;Deleted;Inactive', [ToolName, LayerName, False, False], SetOf([loCaseInsensitive]));
    if doInsert then doInsert := not ToolTable.Locate('ToolName;Layer;Deleted;Inactive', [ToolName, LayerName, False, True], SetOf([loCaseInsensitive]));
    if doInsert then doInsert := not ToolTable.Locate('ToolName;Layer;Deleted;Inactive', [ToolName, LayerName, True, False], SetOf([loCaseInsensitive]));
    if doInsert then doInsert := not ToolTable.Locate('ToolName;Layer;Deleted;Inactive', [ToolName, LayerName, True, True], SetOf([loCaseInsensitive]));

  end
  else                          
  begin

    doInsert := not ToolTable.Locate('ToolName;Deleted;Inactive', [ToolName, False, False], SetOf([loCaseInsensitive]));
    if doInsert then doInsert := not ToolTable.Locate('ToolName;Deleted;Inactive', [ToolName, False, True], SetOf([loCaseInsensitive]));
    if doInsert then doInsert := not ToolTable.Locate('ToolName;Deleted;Inactive', [ToolName, True, False], SetOf([loCaseInsensitive]));
    if doInsert then doInsert := not ToolTable.Locate('ToolName;Deleted;Inactive', [ToolName, True, True], SetOf([loCaseInsensitive]));

  end;

  if not ToolTable.Locate('Toolname;Deleted', [Toolname, false], SetOf([loCaseInsensitive]))then
  begin

    if not doInsert then
      ToolTable.Edit
    else
    begin
  
      ToolTable.Append;
      ToolTable.FieldByName('Layer').AsString := LayerName;
      ToolTable.FieldByName('ToolTypeId').AsInteger := 1;
      ToolTable.FieldByName('Deleted').AsBoolean := False;
      ToolTable.FieldByName('Inactive').AsBoolean := False;
      ToolTable.FieldByName('Seq').AsInteger := 1;
      ToolTable.FieldByName('ToolRev').AsString := '1';
      ToolTable.FieldByName('ToolDate').AsDateTime := Date;
      ToolTable.FieldByName('ToolTime').AsDateTime := Time;
      ToolTable.FieldByName('ToolHeaderId').AsInteger := -1;
  
    end;
  
    ToolTable.FieldByName('ToolName').AsString := ToolName;
    ToolTable.FieldByName('MfgPart').AsString := MfgPartName;
    ToolTable.FieldByName('ToolModOwner').AsString := Owner;
    ToolTable.FieldByName('Deleted').AsBoolean := False;
    ToolTable.FieldByName('Inactive').AsBoolean := False;
  
    if ToolTable.FieldByName('ToolRev').AsString = '' then ToolTable.FieldByName('ToolRev').AsString := '1';
    ToolTable.FieldByName('ToolModEditable').AsBoolean := true;
  
    ToolTable.Post;

  end;

end;

function SearchParentMfgPart(ItemLayerPntr: integer): string;
begin

  Result := '';

  Fnc.SysStackupTable.Filtered := False;

  if Fnc.SysStackupTable.Locate('ItemLayerPntr', ItemLayerPntr, SetOf([])) then
  begin

    while Fnc.SysStackupTable.Locate('RecId', Fnc.SysStackupTable.FieldByName('RecIdParent').AsInteger, SetOf([])) do
    begin

      if (Fnc.SysStackupTable.FieldByName('ItemType').AsString = cStackupMfgTopLevel) or
         (Fnc.SysStackupTable.FieldByName('ItemType').AsString = cStackupMfgSubLevel) or // double check cStackupMfgSubLevel is correct in LCS test database
         (Fnc.SysStackupTable.FieldByName('ItemType').AsString = cStackupMfgSubAssy) then
      begin

        Result := Fnc.SysStackupTable.FieldByName('ItemMatrlDesc').AsString;
        break;

      end;

    end;

  end;

end;

function GetDrillRoutToolName(LayerName: string; MfgPartName: string) : string;
var

  TopLayerStr,
  BotLayerStr,
  MfgPartStr,
  StartName,
  EndName,
  side: string;
  i,
  DrillType: integer;

begin

  Result := '';
  LayerName := UpperCase(LayerName);
  StartName := Fnc.SysGetLayerAttrValue(LayerName, 'Start_Name');
  EndName := Fnc.SysGetLayerAttrValue(LayerName, 'End_Name')
  DrillType :=  Fnc.SysGetLayerAttrValue(LayerName, 'DrillDefId');

  if DrillType = PTHPrimaryDrill then result := 'NC'

  else if pos('Top', MfgPartName) = 1 then
  begin                             

    if DrillType = NCDrilling2X then result := 'NC 2nd';

  end
  else // Subs & drilled Inners
    result := result + ' (' + StartName + '-' + EndName  + ')'

  if DrillType = LaserVia then
  begin

    if Fnc.SysGetMfgPartAttrValue(MfgPartName, 'Direct_Laser') then
      result := 'Direct Laser ' + ' (' + StartName + '-' + EndName  + ')'
    else
      result := 'Laser ' + ' (' + StartName + '-' + EndName  + ')';

  end
  else if DrillType = Rout then result := 'Routing';
  else
  begin

    // For Backdrill, Mech Drill, CounterSink, CounterBore, and Milling drilling tools, please use 'LYR-X' identification instead of 'A or B'.
    // Note that for these tools, we only need to add the start layer; the end layer is irrelevant
    Case DrillType of
  
      CounterSink:  result := 'CounterSink';
      CounterBore:  result := 'CounterBore';
      Backdrill:    result := 'Backdrill';
      Mill:         result := 'Mill';
      MechBlindVia: result := 'Mech Drill';
  
    end;

    result := result + ' (' + StartName + ')';

  end;

  if result = '' then  Result := 'NO TOOL NAME';

end;

function ToolNameFromLayerType(LayerType: string; TopLayerDSeq: integer; BotLayerDSeq: integer; LayerDSeq: integer ) : string;
begin

  result := '';

  case LayerType of

    cStackupLegend : result := 'Marking';
    cStackupSolderMask: if ScreenPrintResist then result := 'Resist Print' else result := 'Resist Image';

  end;

  if result <> '' then
  begin

    if LayerDSeq < TopLayerDSeq then result := result + ' B' else
    if LayerDSeq > BotLayerDSeq then result := result + ' A';

  end;

end;

function getPlugOrFillType(DrillFillID: integer): string;
var

  Qry: TAdoQuery;

begin

  result := '';
  Qry := TAdoQuery.Create(nil);
  try

    Qry.Connection := Fnc.DBConnection;
    Qry.Sql.Add('SELECT DrillParamDesc FROM DrillFileParam WHERE DrillParamId = ' + QuotedStr(DrillFillID));
    Qry.Active := True;

    Qry.First;
    result := Qry.FieldByName('DrillParamDesc').AsString;

  finally

    Qry.Active := False;
    Qry.Free;

  end;

end;

function genPlugFillToolName(LayerName: string; MfgPartName: string; DrillFillID: integer) : string;
var

  plugFillType,
  plugSide: string;

begin

  result := '';
  plugFillType := getPlugOrFillType(DrillFillID);

  if pos('Epoxy', plugFillType) > 0 then result := 'Epoxy Plug';
  if pos('Primary ', plugFillType) > 0 then result := 'Primary Plug';
  if pos('Secondary ', plugFillType) > 0 then result := 'Secondary Plug';
  if pos('Expoxy', plugFillType) > 0 then result := 'Epoxy Plug';  // "bug" in Filler Name

  if pos('Top', MfgPartName) = 1 then
  begin

    if pos(' A', plugFillType) > 0 then plugSide := 'A';
    if pos(' B', plugFillType) > 0 then plugSide := 'B';
    if pos(' AB', plugFillType) > 0 then plugSide := 'AB';
    if pos(' BA', plugFillType) > 0 then plugSide := 'BA';

  end
  else // Subs & drilled Inners
    plugSide := Fnc.SysGetLayerAttrValue(LayerName, 'Start_Name');

  result := result + ' ' + plugSide;

end;

function getTopBotLayerDisplaySeq(var TopLayerDSeq: integer; var BotLayerDSeq: integer) : string;
begin

  Fnc.SysLayerTable.Filtered := false;
  Fnc.SysLayerTable.Filter := 'LayerDesc = ' + QuotedStr('Layer');   // 'Type = ' + QuotedStr('PP/Filler');
  Fnc.SysLayerTable.Filtered := true;
  Fnc.SysLayerTable.First;
  TopLayerDSeq := Fnc.SysLayerTable.FieldByName('DisplaySeq').AsInteger;
  Fnc.SysLayerTable.Last;
  BotLayerDSeq := Fnc.SysLayerTable.FieldByName('DisplaySeq').AsInteger;
  Fnc.SysLayerTable.Filter := '';
  Fnc.SysLayerTable.Filtered := false;

end;

procedure ToolManagementEvent1(ToolTable: TSysTable; ParamList: TStringList);
var

  LayerName,
  ToolName,
  MfgPartName,
  LayerType,
  Owner,
  TopLayer,
  BotLayer,
  PlugSide: string;

  TopLayerDSeq,
  BotLayerDSeq,
  LayerDSeq,
  DrillFillID,
  DrillType,
  MfgPartsWithCMKIdx,
  i: integer;

  FilterStatus: boolean;

  MfgPartsWithCMK,
  DrillsWithCMK: TStringlist;

begin

  //Fnc.SysStackupTable.Filtered := False;
  //Fnc.OpenDataGrid(ToolTable);
  //ToolTable.FieldByName('RecID').Visible := true;
  //Fnc.OpenDataGrid(ToolTable);
  //ToolTable.FieldByName('RecID').Visible := false;

  try

    FilterStatus := Fnc.SysStackupTable.Filtered;
    Fnc.SysStackupTable.Filtered := False;

    getTopBotLayerDisplaySeq(TopLayerDSeq, BotLayerDSeq);

    //Fnc.OpenDataGrid(Fnc.SysLayerTable);
    //Fnc.OpenDataGrid(ToolTable);
    //Fnc.OpenDataGrid(Fnc.SysStackupTable);

    MfgPartsWithCMK := TStringList.Create;
    MfgPartsWithCMK.Duplicates := dupIgnore;
    DrillsWithCMK := TStringList.Create;
    DrillsWithCMK.Duplicates := dupIgnore;

    Fnc.SysLayerTable.First;
    while not Fnc.SysLayerTable.Eof do
    begin

      ToolName := '';
      LayerName := Fnc.SysLayerTable.FieldByName('LayerName').AsString;
      LayerDSeq := Fnc.SysLayerTable.FieldByName('DisplaySeq').AsInteger;
      LayerType := Fnc.SysLayerTable.FieldByName('ItemType').AsString;
      MfgPartName := SearchParentMfgPart(Fnc.SysLayerTable.FieldByName('RecId').AsInteger);
      DrillFillID := Fnc.SysGetLayerAttrValue(LayerName, 'DrillFilledId');

      // Toolname will be determined by layer type primarily
      // Copper Layers get the Layer Name as the Tool Name
      case LayerType of

        cStackupLayer:       begin ToolName := LayerName; Owner := OwnerCAMArtwork; end;
        cStackupLegend,
        cStackupSolderMask:  begin

                               ToolName := ToolNameFromLayerType(LayerType, TopLayerDSeq, BotLayerDSeq, LayerDSeq);
                               Owner := OwnerCAMArtwork;

                             end;
        cStackUpDrill,
        cStackUpRout:        begin

                               ToolName := GetDrillRoutToolName(LayerName, MfgPartName);
                               Owner := OwnerCAM;

                             end;
      else
        ToolName := 'NO TOOL NAME';

      end;

      if ToolName <> '' then
      begin

        DrillType :=  Fnc.SysGetLayerAttrValue(LayerName, 'DrillDefId');

        // All Drill Types Get Tools - Except Mech Via, Only One tool for all Layers
        if pos('Mech Drill', ToolName) > 0 then LayerName := ''; // Layer names not applicable for Mech Vias

        AddToolForThisLayer(ToolTable, ToolName, LayerName, MfgPartName, Owner);

        // Lasers with Conformal Mask Get Additional CMK Tool
        if (DrillType = LaserVia) and Fnc.SysGetMfgPartAttrValue(MfgPartName, 'Conf_Mask') then
          MfgPartsWithCMK.Append(MfgPartName);
                                          
      end;

      if (DrillFillID <> 22) and (DrillFillID <> -1) then  // For Hole Fill we need to create the tools manually
      begin

        PlugSide := genPlugFillToolName(LayerName, MfgPartName, DrillFillID);

        if (AnsiPos('AB', PlugSide) > 0) or (AnsiPos('BA', PlugSide) > 0) then // We need to add a Tool for each plug side.
        begin

          // Example Tool : 'Epoxy AB'
          if AnsiPos('AB', PlugSide) > 0 then  // replace AB with A and create tool, replace AB with B
          begin

            AddToolForThisLayer(ToolTable, AnsiReplaceStr(PlugSide, 'AB', 'A'), '', MfgPartName, OwnerCAMArtwork);
            AddToolForThisLayer(ToolTable, AnsiReplaceStr(PlugSide, 'AB', 'B'), '', MfgPartName, OwnerCAMArtwork);

          end;

          if AnsiPos('BA', PlugSide) > 0 then  // replace AB with A and create tool, replace AB with B
          begin

            AddToolForThisLayer(ToolTable, AnsiReplaceStr(PlugSide, 'BA', 'A'), '', MfgPartName, OwnerCAMArtwork);
            AddToolForThisLayer(ToolTable, AnsiReplaceStr(PlugSide, 'BA', 'B'), '', MfgPartName, OwnerCAMArtwork);

          end;

        end
        else
          AddToolForThisLayer(ToolTable, PlugSide, '', MfgPartName, OwnerCAMArtwork);

      end

      Fnc.SysLayerTable.Next;

    end;

    // Add CMK Tools - Always Top & Bottom, regardless of how many and where the lasers are
    if MfgPartsWithCMK.Count > 0 then
    begin

      for i := 0 to MfgPartsWithCMK.Count -1 do
      begin

        Fnc.SysGetMfgPartLayerNames(MfgPartsWithCMK.Strings[i] , TopLayer, BotLayer);

        AddToolForThisLayer(ToolTable, 'CMK (' + TopLayer + ')', '', MfgPartsWithCMK.Strings[i], OwnerCAM);
        AddToolForThisLayer(ToolTable, 'CMK (' + BotLayer + ')', '', MfgPartsWithCMK.Strings[i], OwnerCAM);

      end;

    end;

    // Rename Default Mfg Part Tools - used for scaling info
    With ToolTable do
    begin

      ToolTable.First;
      While not ToolTable.EOF do
      begin

        if pos('ToolName_',ToolTable.FieldByName('ToolName').AsString) > 0 then
        begin            

          ToolTable.Edit;
          ToolTable.FieldByName('ToolName').AsString := 'Scale Factor';
          ToolTable.Post;

        end;

        ToolTable.Next;

      end;

    end;

    // Add Manual Tools (Not based on layers)
    AddToolForThisLayer(ToolTable, 'PDD', '', '', OwnerDoc);
    AddToolForThisLayer(ToolTable, 'IL CID', '', '', OwnerDoc);
    AddToolForThisLayer(ToolTable, 'OL CID', '', '', OwnerDoc);
    AddToolForThisLayer(ToolTable, 'TMD', '', '', OwnerDoc);
    AddToolForThisLayer(ToolTable, 'PID', '', '', OwnerDoc);
    AddToolForThisLayer(ToolTable, 'Product Spec', '', '', OwnerDoc);
    AddToolForThisLayer(ToolTable, 'EC Jig', '', '', OwnerCAMArtwork);

  finally

    Fnc.SysStackupTable.Filtered := FilterStatus;
    //ToolTable.FieldByName('RecID').Visible := true;
    //Fnc.OpenDataGrid(ToolTable);
    //ToolTable.FieldByName('RecID').Visible := false;
  end;

  MfgPartsWithCMK.Free;

end;
