//HeaderImportExport-->
//SiteId=0
//Enterprise=True
//ScriptType=0
//ScriptGroup=HCS
//HeaderImportExport<--
procedure StepParam(Source: string; ParamCode: string; ParamValue: string) // Added with 2269
begin
  Fnc.SysRouteGenInsAddlParam(Fnc.SysRouteInsGetStepNum, Source, ParamCode, ParamValue, '', '', false, '', '', '' );
end;                                    

procedure StepParamERP(ParamCode: string; ParamValue: string)
begin
  Fnc.SysRouteGenInsAddlParam(Fnc.SysRouteInsGetStepNum, 'Erp', ParamCode, ParamValue, '', '', false, '', '', '' );
end;

procedure StepMemoERP(ParamCode: string; MemoValue: string)
begin
  Fnc.SysRouteGenInsAddlParam(Fnc.SysRouteInsGetStepNum, 'Erp', ParamCode, '', '', '', false, MemoValue, '', '' );
end;

procedure StepDeptERP(DeptCode: string);
begin         
  Fnc.SysRouteGenInsDepartment(Fnc.SysRouteInsGetStepNum, 'Erp', DeptCode, '');
end;
                                                             
procedure StepWC(Source: string; WCCode: string);
begin
  Fnc.SysRouteGenInsWorkCenter(Fnc.SysRouteInsGetStepNum, Source, WCCode, '');
end;

procedure StepWCERP(WCCode: string);
begin
  Fnc.SysRouteGenInsWorkCenter(Fnc.SysRouteInsGetStepNum, 'Erp', WCCode, '');
end;

procedure StepMaterials(Source: string; MaterialTypeList: TStringList; MaterialQty: double);
begin           
  Fnc.SysRouteGenInsMaterials(Fnc.SysRouteInsGetStepNum, Source, MaterialTypeList, MaterialQty, '');
end;

procedure StepMaterialsERP(MaterialTypeList: TStringList; MaterialQty: double);
begin
  Fnc.SysRouteGenInsMaterials(Fnc.SysRouteInsGetStepNum, 'Engx', MaterialTypeList, MaterialQty, '');
end;

procedure StepInstructionERP(InstrCode: string);
begin
  Fnc.SysRouteGenInsInstruction(Fnc.SysRouteInsGetStepNum, 'Erp', InstrCode, '');
end;

function MfgAttr(AttributeName: string) : variant;
begin
  result := Fnc.SysGetAttrValue(AttributeName);
end;

procedure SetMfgAttr(AttributeName: string; AttributeValue: variant);
begin
  Fnc.SysSetAttrValue(AttributeName, AttributeValue);
end;

function MfgAttrTL(AttributeName: string) : variant;
begin
  result := Fnc.SysGetAttrValueTopLevel(AttributeName);
end;

procedure SetMfgAttrTL(AttributeName: string; AttributeValue: variant);
begin
  Fnc.SysSetAttrValueTopLevel(AttributeName, AttributeValue);
end;

function MfgAttrParent(AttributeName: string) : variant;
begin
  result := Fnc.SysGetAttrValueParent(AttributeName);
end;

function GetLayerAttrSide(TopOrBot: string) : boolean;
begin

  if Lowercase(TopOrBot) = 'top' then result := true
  else if Lowercase(TopOrBot) = 'bot' then result := false
  else
  begin

    MessageDlg('Route Master RG Shortcuts MfgLayerAttr Function: Use only "Top" or "Bot" as TopOrBot parameter values', mtWarning, Setof([mbOK]), 0)
    result := true;

  end;

end;

function MfgLayerAttr(AttrName: string; TopOrBot: string): variant;
begin

  result := Fnc.SysGetItemAttrValue(AttrName, GetLayerAttrSide(TopOrBot), cStackupLayer, 1);

end;

procedure SetMfgLayerAttr(AttrName: string; AttrValue: variant; TopOrBot: string);
begin

  Fnc.SysSetItemAttrValue(AttrName, AttrValue, GetLayerAttrSide(TopOrBot), cStackupLayer, 1);

end;

function DrillAttr(AttrName: string; Index: integer): variant;
begin

  result := Fnc.SysGetItemAttrValue(AttrName, True, cStackupDrill, Index);

end;

function SetDrillAttr(AttrName: string; AttrValue: variant; Index: integer): variant;
begin                   

  result := Fnc.SysSetItemAttrValue(AttrName, AttrValue, True, cStackupDrill, Index);

end;
