//HeaderImportExport-->
//SiteId=0
//Enterprise=True
//ScriptType=0
//ScriptGroup=HCS
//HeaderImportExport<--
uses
  Event_RouteGenLibrary, //Route System Scripts
  Eng_RouteFunctions, Eng_DrillFunctions,    //Route System Functions
  RouteFunctions, //Route User Scripts
  RouteFunctions_Drilling;


var
  InputAttributesOK: boolean;
  InputAttributesErrorList: TStringlist;

procedure InputAttributeErrorHandler(ErrorMessage: string);
begin

  InputAttributesOK := false;
  InputAttributesErrorList.Add(ErrorMessage);

end;

procedure VerifyKeyAttributesOK;
begin

  InputAttributesOK := true;

  if (Fnc.SysGetAttrValue('Panel_Length') = 0) or (Fnc.SysGetAttrValue('Panel_Width') = 0) then
    InputAttributeErrorHandler('Panel Length or Panel Width');

  if LayupCoreCount > 0 then
    if (Fnc.SysGetAttrValue('Panel_Length_Press') = 0) or (Fnc.SysGetAttrValue('Panel_Width_Press') = 0) then
      InputAttributeErrorHandler('Panel Length Press or Panel Width Press');

  if Fnc.SysGetAttrValue('BlindVias') then
  begin

    if ((LaserABotHits = 0) and  (LaserBTopHits = 0)) then InputAttributeErrorHandler('Laser A or Laser B Hits');

    if  ((LaserBTopHits = 0) and (LaserABotHits = 0)) and Fnc.SysGetAttrValue('ForceUVLaser') then
      InputAttributeErrorHandler('Force UV Laser and no Laser Hits value');

  end;

  if fnc.SysFindAttrValue('Registration',false) = 25 then InputAttributeErrorHandler('Registration');

  if (( CoreBuild or SubAssemblyCoreBuild ) and ( Fnc.SysGetAttrValue('LayerCount') > 2 )) then
  begin
    // Copy value from old attribute to new
    if (( Fnc.SysGetAttrValue('CoreBuildCuThin') > 0 ) and ( Fnc.SysGetAttrValue('CoreBuild_CuThin_1stBuff') = '' )) then
      Fnc.SysSetAttrValue('CoreBuild_CuThin_1stBuff', Fnc.SysGetAttrValue('CoreBuildCuThin'));

    // 1473 - Fix Attribute Typo
    if Fnc.SysGetAttrValue('CoreBuild_CuThin_Process') = 'Buffing + Mirco-Etch + Buffing' then
      Fnc.SysSetAttrValue('CoreBuild_CuThin_Process', 'Buffing + Micro-Etch + Buffing');

    if Fnc.SysGetAttrValue('CoreBuild_CuThin_Process') = 'None' then  // Core Build Cu Thinning
      InputAttributeErrorHandler('Cu Thinning Process for Core Build')
    else
    begin

      if ( Fnc.SysGetAttrValue('CoreBuild_CuThin_Process') = 'Buffing' ) or
         ( Fnc.SysGetAttrValue('CoreBuild_CuThin_Process') = 'Vertical Buffing' ) then
      begin

         if Fnc.SysGetAttrValue('CoreBuild_CuThin_1stBuff') = '' then
          InputAttributeErrorHandler('Core Build Cu Thinning 1st Buff');

      end
      else if Fnc.SysGetAttrValue('CoreBuild_CuThin_Process') = 'Buffing + Micro-Etch + Buffing' then // 1473 Fix Attribute
      begin

         if  ( Fnc.SysGetAttrValue('CoreBuild_CuThin_1stBuff') = '' ) or
             ( Fnc.SysGetAttrValue('CoreBuild_CuThin_2ndBuff') = '' ) or
             ( Fnc.SysGetAttrValue('CoreBuild_CuThin_MEtch') = '' )
         then
           InputAttributeErrorHandler('Core Build Cu Thinning 1st Buff or Micro-Etch or 2nd Buff');

      end
      else if Fnc.SysGetAttrValue('CoreBuild_CuThin_Process') = 'Micro-Etch + Buffing' then  // 1473
      begin

         if ( Fnc.SysGetAttrValue('CoreBuild_CuThin_1stBuff') = '' ) or
            ( Fnc.SysGetAttrValue('CoreBuild_CuThin_MEtch') = '' )
         then
           InputAttributeErrorHandler('Core Build Cu Thinning 1st Buff or Micro-Etch');

      end;

    end;

  end;

  if Fnc.SysGetAttrValue('Pre_Photo_CuThin') then  // 1196 Pre-Photo Cu Thinning
    if Fnc.SysGetAttrValue('Pre_Photo_CuThin_Spec') = '' then
      InputAttributeErrorHandler('Pre-Photo Cu Thinning Spec Required');

  if Fnc.SysGetAttrValue('MfgPartType') = 'Top' then
  begin

    if (Fnc.SysGetAttrValue('Panel_LengthEA') = 0) or (Fnc.SysGetAttrValue('Panel_WidthEA') = 0) then
      InputAttributeErrorHandler('Panel Length or Panel Width Edge Allowance');

    if Fnc.SysGetAttrValue('PunchB4EC') and (Fnc.SysGetAttrValue('Punch_Type') = 'None') then
     InputAttributeErrorHandler('Punch Type');

    if (pos('Primary',Fnc.SysGetAttrValue('SMPlugType')) > 0) and (Fnc.SysGetAttrValue('PrimaryPlugProcess') = 'None') then
      InputAttributeErrorHandler('Primary Plug Process');

    if (pos('Primary',Fnc.SysGetAttrValue('SMPlugType')) > 0) and (Fnc.SysGetAttrValue('PrimaryPlugInk') = 'None') then
      InputAttributeErrorHandler('Primary Plug Ink');

    if (pos('Secondary',Fnc.SysGetAttrValue('SMPlugType')) > 0) and (Fnc.SysGetAttrValue('SecondaryPlugInk') = 'None') then
      InputAttributeErrorHandler('Secondary Plug Ink');

    if  (Fnc.SysGetAttrValue('NCRunX2') = true) and
        (Fnc.SysGetAttrValue('CappedVia') = true) and
        (Fnc.SysGetAttrValue('EpoxySide') = 'None')
    then
      InputAttributeErrorHandler('Cappped Via with No Epoxy Plug');

    if ( Fnc.SysGetAttrValue('EpoxySide') <> 'None') and (Fnc.SysGetAttrValue('EpoxyPlugInk') = 'None') then
      InputAttributeErrorHandler('Epoxy Plug but no Ink selected');

    // 756 Update Aspect ratio calculation for OL layer photo process
    if PluggedFilledB4Photo then
      if Fnc.SysGetAttrValue('Min_Drill_Size_NP') = 0.0 then
        InputAttributeErrorHandler('Min Drill Size for Non-Plugged/Filled Holes Required');

    if Fnc.SysGetAttrValue('BackDrill') and (Fnc.SysGetAttrValue('BackDrill_Mch') = 'None') then
      InputAttributeErrorHandler('Back Drill Machine Type');

    if (Fnc.SysGetAttrValue('TwoXResist_Ink') = 'None') and Fnc.SysGetAttrValue('TwoXResist') then
      InputAttributeErrorHandler('Two Times Resist Ink');

    if Fnc.SysGetAttrValue('PunchB4EC') and (Fnc.SysGetAttrValue('Punch_Type') = 'None') then
      InputAttributeErrorHandler('PunchB4EC but PunchType = None');

    if (Fnc.SysGetAttrValue('Punch_Type') <> 'None') and (Fnc.SysGetAttrValue('Punch_Die11') = '0') then
      InputAttributeErrorHandler('Punching but Punch Die 1-1 = 0');

    if (Fnc.SysGetAttrValue('Punch_Type') = '2 Stage Punch') and (Fnc.SysGetAttrValue('Punch_Die21') = '0') then
      InputAttributeErrorHandler('Punchingx2 but Punch Die 2-1 = 0');

    if SubProdCodeSameAsTopLevel then
      InputAttributeErrorHandler('Sub-Assemblies and Inners cannot have the same Product Code as the Top-Level');

    if BoardFinish = 'ENEPIG' then   // ENIG Changes from Mani Feb 2016
    begin

      if not
         (
          ( HasSolderMaskType('DSR330S-50-99R') ) or
          ( HasSolderMaskType('PSR2000-SP300HFM') ) or
          ( HasSolderMaskType('PSR4000-AUS308') ) or
          ( HasSolderMaskType('PSR4000 AUS308 GREEN') ) or  // 1125
          ( HasSolderMaskType('FZ-2700GA') )
         )
      then
        InputAttributeErrorHandler('Solder Mask type not compatible with ENEPIG');

    end;

    if ( BoardFinish = 'ENIG' ) or
       (( BoardFinish = 'OSP' ) and ( SelectiveGoldType= 'ENIG' )) then  // ENIG Changes from Mani  // 1173 Additional Surface Finishing. Selective ENIG + OSP  // 1256
    begin
      if (( HasSolderMaskType('PSR4000-BNDG') ) or ( HasSolderMaskType('PSR4000-AM10') )) and
         ( ThicknessOverMask > 3.0 )
      then
      begin
        //result := false;  Change request from Herole 3/1/16
        ShowMessage('Warning! Solder Mask type not compatible with ENIG & Thk > 3.0');
      end;
    end;

    if ( not ScreenPrintResist ) and (Fnc.SysGetAttrValue('SM_Process') <> 'Spray Coat' ) then    // (760) condition for spray coat PSR-2000, If Board thickness>/= 3.6mm, Error will prompt that the board cannot run Spray coat.
    begin

      if LayupThickness >= 3.6 then
        InputAttributeErrorHandler('Board Thickness: ' +
                                   FloatToStr(LayupThickness) +
                                   ' mm is too thick for Spray Coat Soldermask.');
    end;

    if Fnc.SysGetAttrValue('Part_Type') = 'Internal' then
      if Fnc.SysGetAttrValue('KT_Number') = '' then
        InputAttributeErrorHandler('Internal Part Number, KT Number is required');

    if Fnc.SysGetAttrValue('BackDrill') then  // 1213 Additional Hole Check after Backdrill step condition
    begin

      if ( Fnc.SysGetAttrValue('SMPlugType') <> 'None' ) or ( Fnc.SysGetAttrValue('EpoxySide') <> 'None' ) then
        if Fnc.SysGetAttrValue('BackDrill_Hole_Type') = '<Not Selected>' then
          InputAttributeErrorHandler('Back Drill Hole Type not set');

    end;

  end; // End Top Level Checking

  if ( Fnc.SysGetAttrValue('BackDrill') or Fnc.SysGetAttrValue('BackDrill_Epoxy') ) and
     ( Fnc.SysGetAttrValue('BackDrillStubSpec') = 0.0 )
  then
    InputAttributeErrorHandler('Back Drill Stub Spec');

  if Fnc.SysGetAttrValueTopLevel('Panel_Cavity') = 0 then
    InputAttributeErrorHandler('Panel Cavity for Top Level Part cannot be 0');

  if Fnc.SysGetAttrValueTopLevel('SO_Unit') <> 'Part'  then
    if Fnc.SysGetAttrValueTopLevel('Part_Cavity') = 0 then
      InputAttributeErrorHandler('Part Cavity for Top Level Part cannot be 0');

  if Fnc.SysGetAttrValueTopLevel('PCB_Length') = 0 then
    InputAttributeErrorHandler('PCB_Length for Top Level Part cannot be 0');

  if Fnc.SysGetAttrValueTopLevel('PCB_Width') = 0 then
    InputAttributeErrorHandler('PCB_Width for Top Level Part cannot be 0');

  if Fnc.SysGetAttrValueTopLevel('Parts_Per_PCB') = 0 then
    InputAttributeErrorHandler('Parts_Per_PCB for Top Level Part cannot be 0');


  if Fnc.SysGetAttrValue('MfgPartType') <> 'DmC' then
  begin

    if Fnc.SysGetAttrValue('Air_Gap') = 0 then InputAttributeErrorHandler('Air Gap cannot be 0');

    if Fnc.SysGetAttrValue('Line_Width') = 0 then InputAttributeErrorHandler('Line Width cannot be 0');

  end;

  // Check only applies to Pre-booked jobs - the first con
  if GreaterThan1CoreorSequential then  // 2472
   if Not (Fnc.SysGetAttrValue('Panel_Width_Press') >= 358) then
     InputAttributeErrorHandler('Press Panel Width must be >= 358MM');

end;
