uses
  RouteFunctions,
  Eng_DrillFunctions;
const
  ExcelTemplate = 'EngenixCNCDrillDetails.xlsx';
  ExcelReport   = StringReplace(ExcelTemplate,'.xlsx', Fnc.GetJobData.Values['JobName'] + '.xlsx', SetOf([rfReplaceAll, rfIgnoreCase]));
  FileTemplateDir = 'C:\Engenix\Report\Template\';
  WorkingDir = 'C:\Engenix\Report\';
  SlotToolFile = 'SlotTools.txt';
  DrillToolFile = 'DrillTools.txt';

var
  ErrFound : boolean;
  ErrMsg : string;
  ExcelQuery : TADOQuery;

procedure CheckTemplatesExists;
begin
  if (DirectoryExists(FileTemplateDir)) then
  begin
    if not (FileExists(FileTemplateDir + ExcelTemplate)) then
    begin
      ErrFound := True;
      ErrMsg := 'Template file ' + FileTemplateDir + ExcelTemplate + ' not found';
    end;
  end
  else
  begin
    ErrFound := True;
    ErrMsg := 'Template directory ' + FileTemplateDir + ' not found.';
  end;
end;

function CheckReportExists: boolean;
begin
  result := false;
  if FileExists(WorkingDir + ExcelReport) then
    result := true;
end;

function FileCopy(Source,Dest : String): Boolean;
var
  SourceStream,DestStream : TFileStream;
begin
  try
    SourceStream:=TFileStream.Create(Source,fmOpenRead);
    DestStream:=TFileStream.Create(Dest,fmCreate);
    DestStream.CopyFrom(SourceStream,SourceStream.Size);
    SourceStream.Free;
    DestStream.Free;
    Result := True;
  except
    Result := False;
  end;
end;

procedure CopyTemplateToWorkingDir;
begin
  try
    begin
      if not(FileCopy(FileTemplateDir+ExcelTemplate,WorkingDir+ExcelReport)) then
      begin
        ErrFound := True;
        ErrMsg := 'Unable to copy Excel file from the template directory';
      end;
    end
  except
    ErrFound := True;
    ErrMsg := 'Exception error copying Excel file from the template directory';
  end;
end;

procedure CreateAndOpenExcelQuery;
begin
  Fnc.MouseBusy;
  Excelquery := TadoQuery.Create(nil);
  Excelquery.ConnectionString := Fnc.ExcelConnect(WorkingDir + ExcelReport, true, 0);
  Excelquery.Close;
  Excelquery.Sql.Clear;
  Excelquery.Sql.Add('SELECT * FROM [CNC Drill Report$]');

  try
    Excelquery.Open;
  except
    MessageDlg('Error on CNC Report Excel query', mtError, Setof([mbOK]), 0);
    Excelquery.Close;
    Excelquery.Free;
    Fnc.MouseNormal;
    exit;
  end;
end;

procedure InsertDrillToolData;
var
  i : integer;
  DrillName : string;
  DrillDetails: TsysTable;
  ToolColName: string;
  DrillsWithTools: integer;
  DrillSize: float;
  DrillList: TStringList;

  SlotToolsList: TStringList;
  DrillToolsList: TStringList;
  DrillToolStr: String;
begin
  //Fnc.OpenDataGrid(ExcelQuery)
  DrillList := TStringList.Create;
  DrillList.Sorted := true;
  for i := 1 to FindNumberofDrillFiles do
  begin
    if (Fnc.SysGetItemAttrValue('DrillDefID', True, cStackupDrill, i) = 1) or
       (Fnc.SysGetItemAttrValue('DrillDefID', True, cStackupDrill, i) = 9)
    then
    begin
      DrillName := Fnc.SysGetItemAttrValue('ItemLayerName', True, cStackupDrill, i);
      DrillList.Add(DrillName);
    end;
  end;

  SlotToolsList := TStringList.Create;
  SlotToolsList.LoadFromFile(FileTemplateDir + SlotToolFile); // Starts at Col 213 (F213)
  DrillToolsList := TStringList.Create;
  DrillToolsList.LoadFromFile(FileTemplateDir + DrillToolFile); // Starts at Col 17 (F17)

  DrillsWithTools := 0;
  for i := 0 to DrillList.Count -1 do
  begin
    DrillName := DrillList.Strings[i]
    DrillDetails := Fnc.SysGetDrillRouteToolsDetails(DrillName);
    //Fnc.OpenDataGrid(DrillDetails);

    if not DrillDetails.IsEmpty then
    begin
      DrillsWithTools := DrillsWithTools + 1;

      ExcelQuery.Append;

      ExcelQuery.FieldByName('Drill Name').AsString := DrillName;

      if Fnc.SysGetAttrValue('LayerCount') > 2 then
      begin
        if Fnc.SysGetLayerAttrValue(DrillName, 'DrillDefID') = 1 then
          Excelquery.FieldByName('Board Thickness').AsFloat := Fnc.SysGetAttrValue('Press_Thickness')
        else
          Excelquery.FieldByName('Board Thickness').AsFloat := Fnc.SysGetAttrValue('LayupThickness');
      end
      else
        Excelquery.FieldByName('Board Thickness').AsFloat := DSThicknessB4Plating;

      Excelquery.FieldByName('Build Stage').AsString := Fnc.SysGetAttrValue('ItemMatrlDesc');

      DrillDetails.First;
      while not DrillDetails.Eof do
      begin
        DrillSize := DrillDetails.FieldByName('DRILL_SIZE').AsFloat;
        DrillToolStr := FormatFloat('0.000', DrillSize);

        // if last char <> 0 then 0.125 or 0.0275 etc
        //if Copy(FormatFloat('0000', FloatToStr(DrillDetails.FieldByName('DRILL_SIZE').AsFloat) * 1000), 4, 1) <> '0' then
        //  ToolColName := FormatFloat('0000', FloatToStr(DrillSize) * 1000);
        //else
        //  ToolColName := FormatFloat('000', FloatToStr(DrillSize) * 100);

        if DrillDetails.FieldByName('HoleType').AsString = 'Slot' then
          ToolColName := 'F' + IntToStr(SlotToolsList.IndexOf(DrillToolStr) + 213 )
        else
          ToolColName := 'F' + IntToStr(DrillToolsList.IndexOf(DrillToolStr) + 17 );
        try
          ExcelQuery.FieldByName(ToolColName).AsInteger := DrillDetails.FieldByName('TotNumHoles').AsFloat;
        except
          MessageDlg('Could not find Excel Column Name for CNC Drill Report ' + ToolColName,  mtWarning, Setof([mbOK]) , 0);
        end;
        DrillDetails.Next;
      end;
      //Fnc.OpenDataGrid(DrillDetails);
    end;
    Fnc.SysTableDestroy(DrillDetails);
  end;
  DrillList.Free;
  SlotToolsList.Free;
  DrillToolsList.Free;
end;

procedure AddMetaData;
begin
  ExcelQuery.First;
  ExcelQuery.Append;

  Excelquery.FieldByName('JobID').AsInteger := Fnc.GetJobData.Values['JobId'];
  Excelquery.FieldByName('Customer').AsString := Fnc.GetJobData.Values['CustomerName'];
  Excelquery.FieldByName('Job Name').AsString := Fnc.GetJobData.Values['JobName'];
  Excelquery.FieldByName('Part Description').AsString := Fnc.GetJobData.Values['PartDescription'];
  Excelquery.FieldByName('Part Number').AsString := Fnc.GetJobData.Values['PartNumberName'];
  Excelquery.FieldByName('Job Type').AsString := Eng_JobType;
  Excelquery.FieldByName('Export to ERP Date').AsString := DateToStr(Date);
  Excelquery.FieldByName('Material type').AsString := GenMaterialType;
  Excelquery.FieldByName('Layer Count').AsInteger := Fnc.SysGetAttrValue('LayerCount');
  //Excelquery.FieldByName('Board Thickness').AsFloat := Fnc.SysGetAttrValue('LayupThickness'); // Value at Drill Stage!
  Excelquery.FieldByName('NC Drill Entry Material').AsString := Fnc.SysGetAttrValue('NC_Drill_1_EntryMat'); // Will need to figure out 1st Drill v 2nd Drill
  Excelquery.FieldByName('NC Stack Height').AsInteger := Fnc.SysGetAttrValue('Stack_Hgt'); // Will need to figure out 1st Drill v 2nd Drill
  //Excelquery.FieldByName('Build Stage').AsString := Fnc.SysGetAttrValue('ItemMatrlDesc');
  Excelquery.FieldByName('Panel Length').AsFloat := Fnc.SysGetAttrValue('Panel_Length');
  Excelquery.FieldByName('Panel Width').AsFloat := Fnc.SysGetAttrValue('Panel_Width');
end;

procedure CreateJobFileFromTemplate;
begin
  ErrMsg := '';
  ErrFound := false;

  CheckTemplatesExists;
  if ErrFound then
  begin
    MessageDlg(ErrMsg, mtError, Setof([mbOK]), 0);
    exit;
  end
  else
  begin
    // not CheckReportExists then - Just create a new report each time, no need to clean up existing data
    CopyTemplateToWorkingDir;
  end
  if ErrFound then
    MessageDlg(ErrMsg, mtError, Setof([mbOK]), 0);
end;

procedure GenCNCDrillReport2;
begin

  try
    CreateJobFileFromTemplate;

    if not ErrFound then
      CreateAndOpenExcelQuery;
    else
      exit;

    AddMetaData;
    InsertDrillToolData;
    ExcelQuery.Post
  finally
    Excelquery.Close;
    Excelquery.Free;
    Fnc.MouseNormal;
  end;
end;

procedure SetCNCDrillReportExportDate;
begin
  CreateAndOpenExcelQuery;
  try
    ExcelQuery.First;
    ExcelQuery.Edit;
    ExcelQuery.FieldByName('Export to ERP Date').AsString := DateToStr(Date);
    ExcelQuery.Post;
  finally
    Excelquery.Close;
    Excelquery.Free;
  end;
end;

begin
  // Testing only
  SetCNCDrillReportExportDate
end;
