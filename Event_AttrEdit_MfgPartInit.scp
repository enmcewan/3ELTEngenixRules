//HeaderImportExport-->
//SiteId=0
//Enterprise=True
//ScriptType=1
//ScriptGroup=Attribute Edit
//HeaderImportExport<--
{
To get/set attribute values or hide/show attributes use the following functions

GetVal(AttrName: string): variant;
GetValTopLevel(AttrName: string): variant;
Fnc.SysAttrEditGetLayerAttrValue(LayerName: string; AttrName: string): variant;

SetVal(AttrName, AttrValue: string; HideAttrib: boolean = False);
SetValTopLevel(AttrName, AttrValue: string; HideAttrib: boolean = False);
Fnc.SysAttrEditSetLayerAttrValue(LayerName: string; AttrName: string; AttrValue: string; HideAttrib: boolean = False);
} 
uses
  HiPot_Table_Lookup,
  Electrical_Table_Lookup;

function GetVal(AttrName: string): variant
begin

  result := Fnc.SysAttrEditGetAttrValue(AttrName);

end;

procedure SetVal(AttrName: string; Value: variant);
begin

  Fnc.SysAttrEditSetAttrValue(AttrName, Value, false);

end;

procedure ShowAttr(AttrName: string);
begin

  SetVal( AttrName, '');

end;

// Not currently needed, table data is using numerci values
function ConvertTableData(Data: string; parameter: string) : variant;
begin

  case parameter of
    'volts', 'ramp', 'hold': try result := StrToInt(Data); Except result := 0; end;
                     'leak': try result := StrToFloat(Data); Except result := 0.0; end;
  else
    ShowMessage('Hi Pot Param Not Found');
  end;
                          
  if result = 0 then
    MessageDlg('Unable to convert Hi-Pot Table Data to number, check table for valid values', mtWarning, Setof([mbOK]) , 0);

end;

procedure AttrEdit_MfgPartInit(ParamList: TStringList; AttrTable: TSysTable; SpecTable: TSysTable);
begin

  // Set/Check Hi-Pot Values
  if (ParamList.values['ItemType'] = 'MFGTP') or (ParamList.values['ItemType'] = 'MFGSB') then
  begin

    // 1308 Update Hi-Pot table Value Units
    // For new Jobs, get values from new table
    // For existing Jobs with Data, recalculate Test Voltage & Leakage Values
    // Make sure only to convert once - old values are in the 100's
    if (GetVal('Volt') > 0) and (GetVal('Volt') > 100) then
      SetVal('Volt', GetVal('Volt') / 1000);

    if (GetVal('Leak') > 0) and (GetVal('Leak_New') = 0) then // Don't need to check for converting more than once since we use a new attribute
      SetVal('Leak_New', GetVal('Leak') * 1000);

    // 1230 Auto Add Hi-Pot Spec
    if (GetVal('Volt') = 0.0) or
       (GetVal('Ramp') = 0) or
       (GetVal('Hold') = 0) or
       (GetVal('Leak_New') = 0) then
         SetHiPotValues(ParamList.values['ItemType'], false)
    else
    begin

      if (GetVal('Volt') > 0) and (GetVal('Ramp') > 0) then
        SetVal('Wait', (GetVal('Volt') / GetVal('Ramp')) * 1000);

    end;

    // 2769
    if GetVal('CoreBuild_CuThin_Mode') = 'Auto' then ShowAttr('CoreBuild_CuThin_1stBuff');
    if GetVal('EpoxyPlug_CuThin_Mode') = 'Auto' then ShowAttr('EpoxyPlug_CuThin_1stBuff');
    
  end;

   if (ParamList.values['ItemType'] = 'MFGTP') and
      (( GetVal('EC_Test_Voltage') = 0 ) or
      ( GetVal('EC_Cont_Res') = 0 ) or
      ( GetVal('EC_Isol_Res') = 0 ) or
      ( GetVal('EC_AutoUpdate') )) // 2632  Electrical Check Spec not updating
   then // 1255 EC Parameter Attributes
     SetECValues;

   // Check or Update Finish, Selective Gold & Gold Finger Type
  // Item 1256
  if ParamList.values['ItemType'] = 'MFGTP'then
  begin
    if GetVal('Board_Finish') = 'Full Body Gold + LGA' then
    begin
      MessageDlg('The board finish "Full Body Gold + LGA" is no longer valid. Select another option', mtError, Setof([mbOK]), 0);
    end;

    if GetVal('Board_Finish') = 'ENIG + OSP' then
    begin
      MessageDlg('The board finish "ENIG + OSP" is no longer valid. Board Finish set to "OSP" and Selective Gold set to "ENIG"', mtInformation, Setof([mbOK]), 0);
      SetVal('Board_Finish', 'OSP');

      if GetVal('Sel_Gold_Type') = 'None' then
        SetVal('Sel_Gold_Type', 'ENIG');
      else
      begin
        MessageDlg('ENIG + OSP cannot have another Selective Gold Type. Select another option', mtError, Setof([mbOK]), 0);
      end;
    end;

    if ( GetVal('Sel_Gold_Type') = 'BGA, Encapsulation' ) or
       ( GetVal('Sel_Gold_Type') = 'Thin/Thick Encapsulated Pattern' ) then
    begin
      MessageDlg(GetVal('Sel_Gold_Type') + ' is no longer valid. Select another Selective Gold Type', mtError, Setof([mbOK]), 0);
    end;

    if ( GetVal('Sel_Gold_Type') = 'Pattern (Overhang)' ) or
       ( GetVal('Sel_Gold_Type') = 'PTH' ) then
    begin
      MessageDlg('Selective Gold type: "' + GetVal('Sel_Gold_Type') + '" is no longer valid. Value set to "Pattern Overhang / PTH"', mtInformation, Setof([mbOK]), 0);
      SetVal('Sel_Gold_Type', 'Pattern Overhang / PTH');
    end;

    if GetVal('Gold_Fgr_Type') = 'Lead Line Etching B4 Res (Sel)' then
    begin
      MessageDlg('Gold Finger type: "' + GetVal('Gold_Fgr_Type') + '" is no longer valid. Value set to "Lead Line Etching"', mtInformation, Setof([mbOK]), 0);
      SetVal('Gold_Fgr_Type', 'Lead Line Etching');
    end;

    if GetVal('Gold_Fgr_Type') = 'Lead Line Etching Af Res (Sel)' then
    begin
      MessageDlg('Gold Finger type: "' + GetVal('Gold_Fgr_Type') + '" is no longer valid. Value set to "Au Finger Plate after SM"', mtInformation, Setof([mbOK]), 0);
      SetVal('Gold_Fgr_Type', 'Au Finger Plate after SM');
    end;

    if ( GetVal('Gold_Fgr_Type') = 'Chamfer Af Res (Sel)' ) or
       ( GetVal('Gold_Fgr_Type') = 'Thin/Thick - Lead Line Etching B4 Res (Sel)' ) or
       ( GetVal('Gold_Fgr_Type') = 'Thin/Thick - After Pattern (Sel)' ) or // Rename of rename - see above
       ( GetVal('Gold_Fgr_Type') = 'No Horn - Lead Line Etching B4 Res (Sel)' )
    then
    begin
      MessageDlg('"' + GetVal('Gold_Fgr_Type') + '"' + ' is no longer valid. Select another Gold Finger Type', mtError, Setof([mbOK]), 0);
      SetVal('Gold_Fgr_Type', 'None');
    end;



  end;
  //ShowMessage('End of Mfg Part Init');
end;
