//HeaderImportExport-->
//SiteId=0
//Enterprise=True
//ScriptType=1
//ScriptGroup=Attribute Edit
//HeaderImportExport<--
procedure setMinValues(layerList: TStringList);                                                                                                                                                                                                                                                                                                
var
  i : integer;
  layerName : string;
  LLA_Via : float;
  LLA_Pth : float;
  LM_P2P : float;
  LM_P2C : float;
begin
  for i := 0 to layerList.Count -1 do
  begin
    layerName := layerList.Strings[i];
    LLA_Via := Fnc.SysAttrEditGetLayerAttrValue(layerName, 'Layer_Land_Area_Via' );
    LLA_Pth := Fnc.SysAttrEditGetLayerAttrValue(layerName, 'Layer_Land_Area_Pth' );
    LM_P2P := Fnc.SysAttrEditGetLayerAttrValue(layerName, 'Layer_Min_PadToPad' );
    LM_P2C := Fnc.SysAttrEditGetLayerAttrValue(layerName, 'Layer_Min_PadToCuFeat' );
                
    if LLA_Via < LLA_Pth then
      Fnc.SysAttrEditSetLayerAttrValue(layerName, 'Layer_Land_Area', LLA_Via, false)
    else                                 
      Fnc.SysAttrEditSetLayerAttrValue(layerName, 'Layer_Land_Area', LLA_Pth, false);
      
    if LM_P2P < LM_P2C then
      Fnc.SysAttrEditSetLayerAttrValue(layerName, 'Layer_Min_PadTo', LM_P2P, false)
    else
      Fnc.SysAttrEditSetLayerAttrValue(layerName, 'Layer_Min_PadTo', LM_P2C, false);
  end;
end;                        

function attrMapper(DFMAttr: string) : string;  
begin
  case DFMAttr of
    'Min_Land_area_Via'       : result := 'Layer_Land_Area_Via'; // Min of Both
    'Min_Land_area_Pth'       : result := 'Layer_Land_Area_Pth'; // Min of Both
    'Min_Via2Cu'              : result := 'Layer_Min_Via2Cu';
    'Min_Pth2Cu'              : result := 'Layer_Min_Pth2Cu';
    'Min_Npth2Cu'             : result := '';
    'Min_Rout2Cu'             : result := '';
    'Min_Cu_Web'              : result := '';
    'Thermal_A/G'             : result := '';
    'Thermal_Tie_Cu_Width'    : result := '';
    'Split_Plane_A/G'         : result := '';
    'Min_Spacing_Pad2Pad'     : result := 'Layer_Min_PadToPad';       // Min of both
    'Min_Spacing_Pad2Cu_feat' : result := 'Layer_Min_PadToCuFeat';   // Min of both
    'Min_Spacing_Cu_feat2feat': result := 'Layer_Min_Air_Gap';
    'Min_Spacing_Cu_feat2Gnd' : result := '';
    'Min_Line_width'          : result := 'Layer_Min_Line'; 
  end;                 
end;                         
                                          
function convertToFloat(value: string) : float;
begin
  // Check for values like 55(75)   
  if pos('(', value) > 0 then
    value := copy(value, pos('(', value) + 1 , pos(')', value) - (pos('(', value) + 1));
                                    
  try 
    result := StrToFloat(value)/1000;
  except
    //ShowMessage(value); 
    result := 1.00;
  end;
  
  //if result = 0 then value := 1.0;

end;

procedure updateLayerAttributes2(dataTable: TSysTable; attrList: TStringList; layerList: TStringList; layernameClip: integer)
var  
  egxAttr: string;                  
  egxLayerName: string;
  egxLayerNameType: string;
  egxCuLAyers: TStringList;
  layerSubSet: TStringList;
  dataValue: float;
  
  i: integer;   
  j: integer;       
  
begin
  egxCuLAyers := TStringList.Create;      
  egxCuLAyers := Fnc.SysGetListOfLayerNames(cStackupLayer);
  
  // What is the naming format for the Engenix layers?  Assumes all layers named the same way 
  if pos('LAYER', egxCuLayers.strings[0]) > 0 then
    egxLayerNameType := 'LAYER'
  else if pos('LYR', egxCuLayers.strings[0]) > 0 then
    egxLayerNameType := 'LYR'        
  else
    showmessage('Cannot determine Engenix layer format');
    
  // Create List of Layers to reference DFM Values
  layerSubSet := TStringList.Create;
  layerSubSet.Duplicates := dupIgnore;
  layerSubSet.Sorted := true;
                                       
  // For each attribute, do a Table Locate then for each layer, update attribute value.                        
  for i := 0 to attrList.count -1 do
  begin
    if attrList[i] <> 'Copper Thickness' then // Not importing this, use stackup value only?
    begin
      dataTable.Locate('Attribute', attrList.strings[i], SetOf([]));
                                                   
      // Loop thru table layerList and transform table layer name to engenix layer name and update value 
      for j := 0 to layerList.count -1 do
      begin            
        // Derive the Engenix Layer name from the table layer name
        egxLayerName := copy(layerList.Strings[j], 1, length(layerList.Strings[j]) - layernameClip);
        egxLayerName := StringReplace(egxLayerName, 'layer', egxLayerNameType, 
                            SetOf([rfReplaceAll, rfIgnoreCase]));
                            
        // Add egxLayerName to subset List
        layerSubSet.Add(egxLayerName)
                            
        // Map Engenix attribute to table attribute
        egxAttr := attrMapper(attrList.strings[i]);
                   
        // Update Engenix Attribute Value
        if egxAttr <> '' then
        begin                      
          dataValue := convertToFloat(dataTable.FieldByName(layerList.Strings[j]).AsString);        
          Fnc.SysAttrEditSetLayerAttrValue(egxLayerName, egxAttr, dataValue, false); 
        end;
                                    
        //if j = 3 then break; // for testing only, limit no of loops 
      end;
      
      //if i = 1 then break;  // for testing only, limit no of loops 
    end;
  end;                                            
  
  // Set Minimum for combined attributes
  //ShowMessage(layerSubSet.Text);
  setMinValues(layerSubSet);
  
  egxCuLAyers.Free ;
  layerSubSet.Free ;
end;                                     

function isHTMLTableValue(HTMLStr: string; item: string) : boolean;
begin
  result := false;
  if                                                 
    ( pos('<td', HTMLStr) = 0 ) and
    ( pos('/td>', HTMLStr) = 0 ) and
    ( pos('</th>', HTMLStr) = 0 ) and
    ( pos(item, HTMLStr) = 0 ) and
    ( pos('</tr>', HTMLStr) = 0 ) and
    ( pos('&nbsp;', HTMLStr) = 0 )
  then                                
    result := true;
end;                             

function getHTMLValues(HTMLData : TStringList; dataset: string; dataTable: string) : TStringList;
var
  i : integer;
  dataSection : boolean;
  dataTableFound : boolean
begin            
  dataSection := false;
  dataTableFound := false                  
  result := TStringList.Create;
  
  for i := 0 to HTMLData.Count - 1 do
  begin        
    // Find the correct table in the HTML Data
    if HTMLData.Strings[i] = dataTable then dataTableFound := true;
    
    if dataTableFound then
    begin
      // Then find the correction section in the table
      if HTMLData.Strings[i] = dataset then dataSection := true; 
      
      if dataSection then
      begin
        if isHTMLTableValue(HTMLData.Strings[i], dataset) 
        then                 
          result.Add(HTMLData.Strings[i]);
                                         
        if ( dataTableFound ) and ( dataSection ) and ( HTMLData.Strings[i] = '</tr>' ) then
          Break;      
      end;
    end;
  end;
end;                                        

procedure tableUpdater(table : TSysTable; method: string; layers: TStringList; values: TStringList; attr: string);
var
  i : integer;
begin
  if method = 'Append' then
    table.Append
  else if method = 'Edit' then                                    
    table.Edit;                     
    
  // Add Attribute name as first column value
  table.Edit;
  table.FieldByName('Attribute').AsString := attr;
  table.Post;
  
  // Add attribute values to the record     
  for i := 0 to layers.Count - 1 do
  begin
    table.Edit;                                         
    table.FieldByName(layers.Strings[i]).AsString := values.Strings[i];
    table.Post;  
  end;
end;

procedure main(HTMLData: TStringList; dataTable: string; layernameClip: integer);
var
  layerList: TStringList;           
  attributes: TStringList;    
  attrValues: TStringList;                  
  
  i: integer                                          
  foundDataTable: boolean;
  copperValues: boolean;
  minLandAreaVia: boolean;
  attrTable: TSysTable;   
begin
  layerList := TStringList.Create;            
  attributes := TStringList.Create;
  attrValues := TStringList.Create; 
                                                  
  foundDataTable := false;
  copperValues := false;
  minLandAreaVia := false;
  
  attrTable := Fnc.SysTableCreate('MyTable');
  Fnc.SysTableAddField(attrTable, 'Attribute', 50, FtString, False);
  
  // Add Layers as table Columns                                                 
  for i := 0 to HTMLData.Count - 1 do      
  begin    
    if HTMLData.Strings[i] = dataTable then foundDataTable := true;
    
    if foundDataTable then
    begin                                        
      if pos('layer-', HTMLData.Strings[i] ) > 0 then // We have layer name data
      begin           
         layerList.Add(HTMLData.Strings[i]);
         Fnc.SysTableAddField(attrTable, HTMLData.Strings[i], 50, FtString, False);
      end;
    end; 
                                                       
    if ( foundDataTable ) and ( HTMLData.Strings[i] = '</tr>' ) then
      Break;         
  end;
                 
  // Add amended layer names as first table row - handled spearately to other attributes
  attrTable.Open;              
  for i := 0 to layerList.Count - 1 do
  begin
    attrTable.Edit;
    attrTable.FieldByName(layerList.Strings[i]).AsString := copy(layerList.Strings[i], 1, length(layerList.Strings[i]) - layernameClip);
    attrTable.Post;  
  end;  
                                                      
  //Add remaining values
  // It would be possible to extract the list of attibutes from the HTML as well, but it's a 'fixed' list.
  attributes.Delimiter := ',';                 
  attributes.StrictDelimiter := true;
  
  if dataTable = 'IL Design Item +ve P/G' then
    attributes.DelimitedText := 'Copper Thickness,Min_Land_area_Via,Min_Land_area_Pth,Min_Via2Cu,Min_Pth2Cu,Min_Npth2Cu,Min_Rout2Cu,Min_Cu_Web,Thermal_A/G,Thermal_Tie_Cu_Width,Split_Plane_A/G';
  else if dataTable = 'IL Design Item SIG' then
    attributes.DelimitedText := 'Copper Thickness,Min_Spacing_Pad2Pad,Min_Spacing_Pad2Cu_feat,Min_Spacing_Cu_feat2feat,Min_Spacing_Cu_feat2Gnd,Min_Land_area_Via,Min_Land_area_Pth,Min_Rout2Cu,Min_Line_width,Min_Via2Cu,Min_Pth2Cu,Min_Npth2Cu,Min_Cu_Web';
                                                                                                                                 
  for i := 0 to attributes.count -1 do                
  begin                                              
    attrValues := getHTMLValues(HTMLData, attributes.strings[i], dataTable);
    tableUpdater(attrTable, 'Append', layerList, attrValues, attributes.strings[i]); 
  end;

  updateLayerAttributes2(attrTable, attributes, layerList, layernameClip);
  attrTable.Close;
   
  layerList.Free;
  attributes.free;          
  attrValues.free;
end;
                                    
function GetHTMLFileName: string;
var                                            
  OpenDialog: TOpenDialog;
begin
  Result := '';

  OpenDialog := TOpenDialog.Create(nil);
  OpenDialog.Filter := 'Default (*.html)|*.html' + '|htm (*.htm)|*.htm' + '|All (*.*)|*.*';
                            
  if OpenDialog.Execute(nil) then
    Result := OpenDialog.FileName;

  OpenDialog.Free;                             
end;

procedure importHTMLDFMData;    
var                       
  HTMLFileName: string;
  FileData: TStringList;                                    
begin
  HTMLFileName := GetHTMLFileName;             
                           
  if HTMLFileName <> '' then
  begin             
    FileData := TStringList.Create;
    FileData.LoadFromFile(HTMLFileName);

    main(FileData, 'IL Design Item +ve P/G', 2);
    main(FileData, 'IL Design Item SIG', 4);
                                   
    FileData.Free;
  end;                                           
end;

procedure setZeroValuesToOne;
var
  LayerList: TStringList;
  attributes: TStringList;            
  i : integer;
  j : integer;                                     
begin
  LayerList := TStringList.Create;
  LayerList := Fnc.SysGetListOfLayerNames(cStackupLayer);
  
  attributes := TStringList.Create;
  attributes.Delimiter := ',';                 
  attributes.StrictDelimiter := true;
  attributes.DelimitedText := 'Layer_Land_Area_Via,Layer_Land_Area_Pth,Layer_Min_PadTo,Layer_Land_Area,Layer_Min_Via2Cu,Layer_Min_Pth2Cu,Layer_Min_PadToPad,Layer_Min_PadToCuFeat,Layer_Min_PadTo,Layer_Min_Air_Gap,Layer_Min_Line';
                                     
  
  //Skip outer layers
  for i := 1 to LayerList.count - 2 do       
  begin
    for j := 0 to attributes.Count -1 do
    begin
      if Fnc.SysAttrEditGetLayerAttrValue(LayerList.Strings[i], attributes.Strings[j]) = 0 then
        Fnc.SysAttrEditSetLayerAttrValue(LayerList.Strings[i], attributes.Strings[j], 1.0, false);
    end;                                                        
  end;
  
  LayerList.Free;
  attributes.Free;
end;

procedure AttrEdit_UserEvent1(ParamList: TStringList; AttrTable: TSysTable; SpecTable: TSysTable);
begin
  importHTMLDFMData;
  setZeroValuesToOne;
end;                       
