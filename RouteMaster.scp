//HeaderImportExport-->
//SiteId=0
//Enterprise=True
//ScriptType=0
//ScriptGroup=HCS
//HeaderImportExport<--
uses
  Event_RouteGenLibrary, //Route System Scripts
  Eng_RouteFunctions, Eng_DrillFunctions,    //Route System Functions
  RouteFunctions, //Route User Scripts
  RouteFunctions_Drilling,
  RouteFlow01_PEInners,
  RouteFlow02_Bk2Drill,
  RouteMasterVersionControl,
  RouteMasterVerifyAttributes;

procedure CheckAndGenPartData;
begin

  GetPartType;
  Engx_MfgPartLayerCount;
  Engx_ScanBOM; 
  Engx_ScanDrill;
  GetPartCoreFamilies;
  GetPartPPGFamilies;
  SetTopBotLayerNames;
  TotalThickestCuUM;
  LayupThickness := Fnc.SysGetAttrValue('LayupThickness');
  SetThicknessRequirements;
  GET_VCUT_TYPE;
  GetCopperInfo;
  CheckProdPartUsesQualMats;             
  Find2milorlessCores; // Special Process Description
  SetMatTGClass;   // CNC Entry Sheet updated Rule (613)

  //photoStepList := TStringList.Create;

  if Fnc.SysGetAttrValue('MfgPartType') <> 'DmC' then
  begin
    BaseCuTopUM := ConvertBaseCuLabelToMicrons('True', 'False');
    BaseCuBotUM := ConvertBaseCuLabelToMicrons('False', 'False');
  end;                        

  NCRun := 0;
  BakingDone := false;
  ENIG_NFluxDone := false;
  PANEL_VCUT_DONE := false;
  BackDrillDone := false;
  ImpedanceDone := false;
  VCutDone := false;
  //ImmersionSilverDone := false; 1256
  AOIforCMK := false;            
  MicroEtchDone := false;
  OLPhotoLineforDES := '';

  GLB_NC_Thickness := 0.0;
  GLB_Ave_CuThk := 0.0;
  GLB_Abs_CuThk := 0.0;
  GLB_TGT_Ave_Hole_CuThk := 0.0;
  GLB_TGT_Abs_HOLE_CuThk := 0.0;

  Min_Drill := 0.0;
  Min_Slot := 0.0;

  Au_Plt_Count := 0;

  CU_RATIO_WARNING := 0;
          
  MetalizationRun := 0;

  epoxyPlugDone := false;  //978 
  verticalDesmear :=false;

  Fnc.SysSetAttrValue('MfgPartType', MfgPartType);
               
  if Fnc.SysGetAttrValue('MfgPartType') = 'Sub' then
    Fnc.SysSetAttrValue('LayerCount', GetCopperLayerCount)
  else                          
    Fnc.SysSetAttrValue('LayerCount', Engx_TotLayerCount);
                            
  if Fnc.HasImpedance = true then
    Fnc.SysSetAttrValue('Has_Impedance', true)
  else
    Fnc.SysSetAttrValue('Has_Impedance', false);

  if Engx_TotLayerCount = 0 then
    fnc.SysSetAttrValue('MfgPartType', 'DmC');

  if FindNumberOfDrillFiles > 0 then
  begin
    SetDrillTypes;
    SetBlindViaInfo;

    fnc.SysSetAttrValue('BlindVias', false);
    fnc.SysSetAttrValue('BuriedVias', false);
    fnc.SysSetAttrValue('Mech_BlindVias', false);

    if CheckBlindDrill(0) = true then
      fnc.SysSetAttrValue('BlindVias', true);

    if CheckBuriedDrill(1) = true then
      fnc.SysSetAttrValue('BuriedVias', true);
                                         
    //if CheckMechBlindDrill(0) then                  // Mech Blind Vias
    if MechBlindViaSide <> 'None' then
    //  Fnc.SysSetAttrValue('Mech_BlindVias', true);
    begin // 917 Correct of Seq Lam w. Mech Blind Vias                      
      Fnc.SysSetAttrValue('Mech_BlindVias', true);

      if (( Fnc.SysGetAttrValue('MfgPartType') = 'Sub' ) and ( SubLayersAreOnTopMfgPart )) then
        Fnc.SysSetAttrValueTopLevel('Sfc_Sub_Mech_BlindVias', true);  
    end;                         

    if Fnc.SysGetAttrValue('MfgPartType') = 'Top' then  // Engenix special Process description
      FindStackedVias;

    if Fnc.SysGetAttrValue('NCRunX2') = true then
    begin
      if Fnc.SysGetAttrValue('Min_Drill_Size_2') > 0 then
        fnc.SysSetAttrValue('Aspect_Ratio_Val_2', Round1000(PressThickness/Fnc.SysGetAttrValue('Min_Drill_Size_2')))
      else
        ShowMessage('Warning! : 2nd Min_Drill_Size = 0.0');
    end;             
    
    if Fnc.SysGetAttrValue('BlindVias') then
    begin
      //Fnc.SysSetAttrValue('Blind_Via_Depth', Fnc.SysGetAttrValue('Blind_AspectRatio') * Fnc.SysGetAttrValue('Laser_Check_Hole')); //  Blind Via Changes
      if Fnc.SysGetAttrValue('Blind_AspectRatio') = 0.0 then
        Fnc.SysSetAttrValue('Blind_AspectRatio', BlindViaMAspect);

      if Fnc.SysGetAttrValue('Blind_Via_Depth') = 0.0 then
        Fnc.SysSetAttrValue('Blind_Via_Depth', BlindViaMDepth)
      else
        Fnc.SysSetAttrValue('Blind_Via_Depth', Fnc.SysGetAttrValue('Blind_AspectRatio') * Fnc.SysGetAttrValue('Laser_Check_Hole'));
    end;

    if Fnc.SysGetAttrValue('Abs_Min_Th') > 0 then
    begin
      Fnc.SysSetAttrValue('Max_Hole_Size', Fnc.SysGetAttrValue('Max_Drill_Size') - (Fnc.SysGetAttrValue('Abs_Min_Th')/1000*2 ));
      Fnc.SysSetAttrValue('Max_PHole_Size', Fnc.SysGetAttrValue('Max_PDrill_Size') - (Fnc.SysGetAttrValue('Abs_Min_Th')/1000*2 ));
    end
    else
    begin
      Fnc.SysSetAttrValue('Max_Hole_Size', Fnc.SysGetAttrValue('Max_Drill_Size') - (Fnc.SysGetAttrValue('Ave_Min_Th')/1000*2 ));
      Fnc.SysSetAttrValue('Max_PHole_Size', Fnc.SysGetAttrValue('Max_PDrill_Size') - (Fnc.SysGetAttrValue('Ave_Min_Th')/1000*2 ));
    end;

    Fnc.SysSetAttrValue('Max_Hole_Size', Round100(Fnc.SysGetAttrValue('Max_Hole_Size')));
    Fnc.SysSetAttrValue('Max_PHole_Size', Round100(Fnc.SysGetAttrValue('Max_PHole_Size')));

    if Fnc.SysGetAttrValue('Max_P_CHole_Size') > Fnc.SysGetAttrValue('Max_PHole_Size') then
       Fnc.SysSetAttrValue('Max_PHole_Size',Fnc.SysGetAttrValue('Max_P_CHole_Size'));

    if Fnc.SysGetAttrValue('Max_PHole_Size') > Fnc.SysGetAttrValue('Max_Hole_Size') then
      Fnc.SysSetAttrValue('Max_Hole_Size',Fnc.SysGetAttrValue('Max_PHole_Size')); 
  end;

  if Fnc.SysGetAttrValue('MfgPartType') <> 'DmC' then  // 1525
  begin
    // Check if Layer Attribute Values exist && populate Mfg attr with the minimum
    SetMfgPartAttrToLayerMin('Air_Gap', 'Layer_Min_Air_Gap' );
    SetMfgPartAttrToLayerMin('Land_Area', 'Layer_Land_Area' ); 
    SetMfgPartAttrToLayerMin('Line_Width', 'Layer_Min_Line' ); 
    SetMfgPartAttrToLayerMin('Min_PTrace_Gap', 'Layer_Min_PadTo' );  
  end;
         
  if Fnc.SysGetAttrValue('Line_Width') > 0 then
    Fnc.SysSetAttrValue('Line_Width_Blown', Fnc.SysGetAttrValue('Line_Width') + Fnc.SysGetAttrValue('Overall_Blown_Val'));

  if ((Fnc.SysGetAttrValue('Min_PTrace_Gap') > 0) and (Fnc.SysGetAttrValue('Air_Gap') > 0)) then
  begin
    if Fnc.SysGetAttrValue('Air_Gap') < Fnc.SysGetAttrValue('Min_PTrace_Gap') then
      Fnc.SysSetAttrValue('Min_Gap', Fnc.SysGetAttrValue('Air_Gap'))
    else
      Fnc.SysSetAttrValue('Min_Gap', Fnc.SysGetAttrValue('Min_PTrace_Gap'));
                                
    if (Fnc.SysGetAttrValue('Air_Gap') - Fnc.SysGetAttrValue('Overall_Blown_Val')) < Fnc.SysGetAttrValue('Min_PTrace_Gap') then
      Fnc.SysSetAttrValue('Air_Gap_Blown', Fnc.SysGetAttrValue('Air_Gap') - Fnc.SysGetAttrValue('Overall_Blown_Val'))
    else
      Fnc.SysSetAttrValue('Air_Gap_Blown', Fnc.SysGetAttrValue('Min_PTrace_Gap'));

    if Fnc.SysGetAttrValue('Air_Gap') - Fnc.SysGetAttrValue('Overall_Blown_Val') < 0 then
      ShowMessage('ERROR: Air Gap cannot be less than Overall Blown Value');
  end
  else
  begin     
    if Fnc.SysGetAttrValue('Air_Gap') > 0  then                                            
    begin
      Fnc.SysSetAttrValue('Min_Gap', Fnc.SysGetAttrValue('Air_Gap'));
      Fnc.SysSetAttrValue('Air_Gap_Blown', Fnc.SysGetAttrValue('Air_Gap') - Fnc.SysGetAttrValue('Overall_Blown_Val')) ;

      if Fnc.SysGetAttrValue('Air_Gap') - Fnc.SysGetAttrValue('Overall_Blown_Val') < 0 then
        ShowMessage('ERROR: Air Gap cannot be less than Overall Blown Value');
    end
    else
    begin
      Fnc.SysSetAttrValue('Min_Gap', Fnc.SysGetAttrValue('Min_PTrace_Gap'));
      Fnc.SysSetAttrValue('Air_Gap_Blown', Fnc.SysGetAttrValue('Min_PTrace_Gap'));
    end;
  end;

  Fnc.SysSetAttrValue('Press_Thickness', 0.0);

  if Fnc.SysGetAttrValue('LayerCount') > 2 then
  begin
    Fnc.SysSetAttrValue('Press_Thickness', Fnc.SysGetAttrValue('LayupThicknessRelam'));
    PressThickness := Fnc.SysGetAttrValue('LayupThicknessRelam'); 
       
    if Fnc.SysGetAttrValue('Actual_Press_Thickness') <> 0.0 then
      Fnc.SysSetAttrValue('Press_Thickness', Fnc.SysGetAttrValue('Actual_Press_Thickness')); 
                                       
    SequentialorBuildup;
  end;
                                                         
  if FindNumberOfDrillFiles > 0 then
  begin              
    if Fnc.SysGetAttrValue('LayerCount') > 2 then
    begin
      if Fnc.SysGetAttrValue('Min_Drill_Size') > 0 then
        fnc.SysSetAttrValue('Aspect_Ratio_Val', Round1000(PressThickness/Fnc.SysGetAttrValue('Min_Drill_Size')))
      else
        ShowMessage('Warning! : Min_Drill_Size = 0.0');
    end
    else   
    begin
      if Fnc.SysGetAttrValue('Min_Drill_Size') > 0 then
        fnc.SysSetAttrValue('Aspect_Ratio_Val', Round1000(LayupThickness/Fnc.SysGetAttrValue('Min_Drill_Size')))
      else        
        ShowMessage('Warning! : Min_Drill_Size = 0.0');
    end;                       
  end;                                        
  
  SetHCSPartType;  // 408 Paradigm Part Number Coding - Internal Part number
  
  if Fnc.SysGetAttrValue('MfgPartType') = 'Top' then   
    Get_SO_Unit; // 408 Paradigm Part Number Coding - Internal Part number 

  // 977 Automate attribute 'Product Code' by rule
  if Fnc.SysGetAttrValue('ProdCode') = 'Auto' then   // 1323
    Fnc.SysSetAttrValue('ProdCode', GenProductCode);

  DirectLaser := Fnc.SysGetAttrValue('Direct_Laser');
  LaserABotHits := Fnc.SysGetAttrValue('LaserABotHits');
  LaserBTopHits := Fnc.SysGetAttrValue('LaserBTopHits');
  UVLaserB_Top := Fnc.SysGetAttrValue('UVLaserB_Top');
  UVLaserA_Bot := Fnc.SysGetAttrValue('UVLaserA_Bot'); 
    
  // BoardFinish = 'Thin/Thick Au Plate' )
  // SelectiveGoldType= 'Pattern Overhang / PTH' )
  //GoldFingerType = 'Lead Line Etching' )
  BoardFinish := Fnc.SysGetAttrValue('Board_Finish');
  SelectiveGoldType := Fnc.SysGetAttrValue('Sel_Gold_Type');
  GoldFingerType := Fnc.SysGetAttrValue('Gold_Fgr_Type');
                              
  //Fnc.SysGetAttrValue('LayupThickness'ZZZ)
  LayupThickness := Fnc.SysGetAttrValue('LayupThickness');

  InputAttributesOK := true; 
  InputAttributesErrorList := TStringList.Create;

  VerifyKeyAttributesOK;

  if not InputAttributesOK then  //760 - condition for spray coat PSR-2000, If Board thickness>/= 3.6mm, Error will prompt that the board cannot run Spray coat.
  begin

    ErrorMessageGenAndLog(InputAttributesErrorList.text, mtError);
    Fnc.UserRouteGenAbort := true;
    InputAttributesErrorList.free;

  end
  else
  begin
    Fnc.SysSetAttrValue('Rout_LengthPCB', 0.0);
                           
    if MfgPartType = 'Top' then
      Fnc.SysSetAttrValue('Rout_LengthPCB', (Fnc.SysGetAttrValue('PCB_Length') + Fnc.SysGetAttrValue('PCB_Width')) * 2);

    // Paradigm Units, CPS, CPP, CPD
    Fnc.SysSetAttrValue('BomEffDays', 5000);
    Fnc.SysSetAttrValue('Core_Count', TotNumOfCores);

    Fnc.SysSetAttrValue('Grain_Dir', Fnc.SysGetAttrValueTopLevel('Grain_Dir'));
                
    if Eng_JobType = 'Production' then
    begin
      Fnc.SysSetAttrValue('ERPWarehouse', 'LOYAN');
      if MfgPartType = 'Top' then
        Fnc.SysSetAttrValue('ERPLocation', 'FGILP')
      else
        Fnc.SysSetAttrValue('ERPLocation', 'L0001');
    end
    else if Eng_JobType = 'Sample' then       //Updated 16/01/13 Per email request from Alison
    begin
      Fnc.SysSetAttrValue('ERPWarehouse', 'LOYSM');
      if MfgPartType = 'Top' then
        Fnc.SysSetAttrValue('ERPLocation', 'FGILP')
      else
        Fnc.SysSetAttrValue('ERPLocation', 'L0001');
    end;   

    PDM_LotSize;
    PDM_LdTime;
    
    Fnc.SysSetAttrValue('CountCode', 'C'); // 

    Fnc.SysSetAttrValue('Track_Width', Round(Fnc.SysGetAttrValue('Line_Width') / 0.0254));
    Fnc.SysSetAttrValue('Gap_Width', Round(Fnc.SysGetAttrValue('Min_Gap') / 0.0254));

    Fnc.SysSetAttrValue('Panel_Size', IntToStr(Fnc.SysGetAttrValue('Panel_Length')) + ' X ' + IntToStr(Fnc.SysGetAttrValue('Panel_Width')));

    Fnc.SysSetAttrValue('Panel_Cavity', Fnc.SysGetAttrValueTopLevel('Panel_Cavity'));

    Fnc.SysSetAttrValue('Pattern_Density', FloatToStr(Round1000(Fnc.SysGetAttrValue('Line_Width') / 0.0254))
                                           + '/' +
                                           FloatToStr(Round1000(Fnc.SysGetAttrValue('Min_Gap') / 0.0254))
                        );

    Fnc.SysSetAttrValue('PCB_Size', FloatToStr(Fnc.SysGetAttrValueTopLevel('PCB_Length')) + ' X ' + FloatToStr(Fnc.SysGetAttrValueTopLevel('PCB_Width')));

    Fnc.SysSetAttrValue('PCB_Length', Fnc.SysGetAttrValueTopLevel('PCB_Length'));
    Fnc.SysSetAttrValue('PCB_Width', Fnc.SysGetAttrValueTopLevel('PCB_Width'));

    if MfgPartType = 'Top' then
    begin
      if Fnc.SysGetAttrValue('Warpage_Type') = 'Percent' then
        Fnc.SysSetAttrValue('Warpage_Str', FloatToStr( Fnc.SysGetAttrValue('Warpage') ) + ' %');
      else if Fnc.SysGetAttrValue('Warpage_Type') = 'MM' then
        Fnc.SysSetAttrValue('Warpage_Str', FloatToStr( Fnc.SysGetAttrValue('Warpage_mm') ) + ' MM');

      if CustCode_Rule('Customer') = 'FA' then    
        Fnc.SysSetAttrValue('Warpage_Str_PCPS', '<' + Fnc.SysGetAttrValue('Warpage_Str') + '(highest pt of any corner)')
      else
        Fnc.SysSetAttrValue('Warpage_Str_PCPS', Fnc.SysGetAttrValue('Warpage_Str'));

    end;

    Fnc.SysSetAttrValue('Parts_Per_PCB', Fnc.SysGetAttrValueTopLevel('Parts_Per_PCB'));

    Fnc.SysSetAttrValue('X_Out', Fnc.SysGetAttrValueTopLevel('X_Out'));

    if MfgPartType = 'Top' then
      SetParadigmUserName;
                          
    Fnc.SysSetAttrValue('PBS_Part', false);
    Fnc.SysSetAttrValue('RouteCode', 'ENGIX');

    if Fnc.SysGetAttrValueTopLevel('SO_Unit') = 'Part'  then
    begin
      Fnc.SysSetAttrValue('Parts_Per_PCB', 1);
      Fnc.SysSetAttrValue('Panel', Fnc.SysGetAttrValueTopLevel('Panel_Cavity'));
    end               
    else
    begin
      Fnc.SysSetAttrValue('Parts_Per_PCB', Fnc.SysGetAttrValueTopLevel('Part_Cavity'));
      Fnc.SysSetAttrValue('Panel', Fnc.SysGetAttrValueTopLevel('Panel_Cavity') * Fnc.SysGetAttrValueTopLevel('Part_Cavity'));
    end;

    Fnc.SysSetAttrValue('ReportUnitValue1', 1.0);
    Fnc.SysSetAttrValue('ReportUnitValue2', 1 / Fnc.SysGetAttrValue('Panel'));
    Fnc.SysSetAttrValue('ReportUnitValue3', ((Fnc.SysGetAttrValue('Panel_Length') / 100 ) * (Fnc.SysGetAttrValue('Panel_Width') / 100)) / Fnc.SysGetAttrValue('Panel'));

    if MfgPartType = 'Top' then 
      Fnc.SysSetAttrValue('Mat_Yield', Round1000(
                                                 (Fnc.SysGetAttrValue('PCB_Length') * Fnc.SysGetAttrValue('PCB_Width') * Fnc.SysGetAttrValue('Panel_Cavity') /
                                                  Fnc.SysGetAttrValue('Panel_Length') / Fnc.SysGetAttrValue('Panel_Width'))
                                                 * 100
                                                ))
    else if MfgPartType = 'Sub' then
      Fnc.SysSetAttrValue('Mat_Yield', Round1000(
                                                 (Fnc.SysGetAttrValue('Panel_Length') * Fnc.SysGetAttrValue('Panel_Width')) /
                                                 (Fnc.SysGetAttrValue('Panel_Length_Press') * Fnc.SysGetAttrValue('Panel_Width_Press'))
                                                 * 100
                                                ))
    else
      Fnc.SysSetAttrValue('Mat_Yield', Round1000(
                                                 (Fnc.SysGetAttrValueParent('Panel_Length') * Fnc.SysGetAttrValueParent('Panel_Width')) /
                                                 (Fnc.SysGetAttrValue('Panel_Length') * Fnc.SysGetAttrValue('Panel_Width'))
                                                 * 100
                                                ))

    Fnc.SysSetAttrValue('PCS_MSQ', Round100(Fnc.SysGetAttrValue('Panel') / ((Fnc.SysGetAttrValue('Panel_Length') / 1000) * (Fnc.SysGetAttrValue('Panel_Width') / 1000))));

    // Email request from Alison 8/12/15
    if MfgPartType <> 'Top' then 
    begin
      Fnc.SysSetAttrValue('ReleaseHold', false);
      Fnc.SysSetAttrValue('EditingHold', false);
    end;
  end;
         
  // Max Epoxy Plugging = 5mm
  if ((Fnc.SysGetAttrValue('EpoxySide') <> 'None') and (LayupThickness > 8.00)) then  // 2573  
    MessageDlg('Max Thickness for Epoxy Plugging is 5.00 MM.', mtWarning, Setof([mbOK]), 0);
                          
  // 757 - Job Type Checking  
  if MfgPartType = 'Top' then CheckJobType;
    
  // 911 Change Chamfer B4 Res (Sel) name to Finger Au After Pattern (Sel)
  if MfgPartType = 'Top' then
  begin

    if GoldFingerType = 'Chamfer B4 Res (Sel)' then
      Fnc.SysSetAttrValue('Gold_Fgr_Type', 'After Pattern (Sel)');
    
     if GoldFingerType = 'Thin/Thick - Chamfer B4 Res (Sel)' then
      Fnc.SysSetAttrValue('Gold_Fgr_Type', 'Thin/Thick - After Pattern (Sel)');

  end;
  
  // Check or Update Finish, Selective Gold & Gold Finger Type
  // Item 1256  
  if MfgPartType = 'Top' then
  begin             
    if BoardFinish = 'Full Body Gold + LGA' then
    begin                                 
      MessageDlg('The board finish "Full Body Gold + LGA" is no longer valid. Select another option', mtError, Setof([mbOK]), 0); 
      Fnc.UserRouteGenAbort := true;
    end;
    
    if BoardFinish = 'ENIG + OSP' then
    begin
      MessageDlg('The board finish "ENIG + OSP" is no longer valid. Board Finish set to "OSP" and Selective Gold set to "ENIG"', mtInformation, Setof([mbOK]), 0);
      Fnc.SysSetAttrValue('Board_Finish', 'OSP');
                                                      
      if SelectiveGoldType= 'None' then
        Fnc.SysSetAttrValue('Sel_Gold_Type', 'ENIG');
      else
      begin
        MessageDlg('ENIG + OSP cannot have another Selective Gold Type. Select another option', mtError, Setof([mbOK]), 0);
        Fnc.UserRouteGenAbort := true;
      end;
    end;
    
    if ( SelectiveGoldType= 'ENIG' ) and ( BoardFinish <> 'OSP' ) then
    begin
      MessageDlg('ENIG Selective Gold can only have OSP for the Board Finish', mtError, Setof([mbOK]), 0);
      Fnc.UserRouteGenAbort := true;
    end;
    
    if ( SelectiveGoldType= 'BGA, Encapsulation' ) or 
       ( SelectiveGoldType= 'Thin/Thick Encapsulated Pattern' ) then
    begin
      MessageDlg(SelectiveGoldType+ ' is no longer valid. Select another Selective Gold Type', mtError, Setof([mbOK]), 0); 
      Fnc.UserRouteGenAbort := true; 
    end;

    if ( SelectiveGoldType= 'Pattern (Overhang)' ) or 
       ( SelectiveGoldType= 'PTH' ) then
    begin
      MessageDlg('Selective Gold type: "' + SelectiveGoldType+ '" is no longer valid. Value set to "Pattern Overhang / PTH"', mtInformation, Setof([mbOK]), 0);
      Fnc.SysSetAttrValue('Sel_Gold_Type', 'Pattern Overhang / PTH'); 
    end;       
    
    if GoldFingerType = 'Lead Line Etching B4 Res (Sel)' then
    begin
      MessageDlg('Gold Finger type: "' + GoldFingerType + '" is no longer valid. Value set to "Lead Line Etching"', mtInformation, Setof([mbOK]), 0);
      Fnc.SysSetAttrValue('Gold_Fgr_Type', 'Lead Line Etching');
    end;
    
    if GoldFingerType = 'Lead Line Etching Af Res (Sel)' then
    begin 
      MessageDlg('Gold Finger type: "' + GoldFingerType + '" is no longer valid. Value set to "Au Finger Plate after SM"', mtInformation, Setof([mbOK]), 0);
      Fnc.SysSetAttrValue('Gold_Fgr_Type', 'Au Finger Plate after SM');
    end;
                                    
    if ( GoldFingerType = 'Chamfer Af Res (Sel)' ) or
       ( GoldFingerType = 'Thin/Thick - Lead Line Etching B4 Res (Sel)' ) or
       ( GoldFingerType = 'Thin/Thick - After Pattern (Sel)' ) or // Rename of rename - see above
       ( GoldFingerType = 'No Horn - Lead Line Etching B4 Res (Sel)' )
    then
    begin
      MessageDlg('"' + GoldFingerType + '"' + ' is no longer valid. Select another Gold Finger Type', mtError, Setof([mbOK]), 0); 
      Fnc.UserRouteGenAbort := true;     
    end;
    
    if ( BoardFinish = 'Immersion Silver' ) and
       ( SelectiveGoldorFinger ) and
       ( Fnc.SysGetAttrValue('Imm_Silver_Process') = '<Not Selected>' ) then
    begin
      MessageDlg('Immersion Silver Process not selected for Selective Gold', mtError, Setof([mbOK]), 0); 
      Fnc.UserRouteGenAbort := true;
    end;
    
    // 2363
    if BoardFinish = 'HAL' then
    begin
       MessageDlg('HAL is no longer a valid Board Finish. Lead Free HAL has been selected automatically', mtInformation, Setof([mbOK]), 0);
       Fnc.SysSetAttrValue('Board_Finish', 'Lead Free HAL')
    end; 

    if ( BoardFinish = 'Lead Free HAL' ) and  // 1355
       ( SelectiveGoldorFinger ) and
       ( Fnc.SysGetAttrValue('Lead_Free_HAL_Process') = '<Not Selected>' ) then
    begin
      MessageDlg('Lead Free HAL Process not selected for Selective Gold', mtError, Setof([mbOK]), 0); 
      Fnc.UserRouteGenAbort := true;
    end;

    if (( SelectiveGoldType<> 'None' ) or ( GoldFingerType <> 'None' )) and       
       (( BoardFinish <> 'Immersion Silver' )  and
         ( BoardFinish <> 'ENIG' ) and
         ( BoardFinish <> 'ENEPIG' ) and
         ( BoardFinish <> 'OSP' ) and 
         ( BoardFinish <> 'Lead Free HAL' ))
    then
    begin
      MessageDlg('Selective Gold / Gold Finger is not compatible with ' + BoardFinish, mtError, Setof([mbOK]), 0); 
      Fnc.UserRouteGenAbort := true;                 
    end;

    if ( GoldFingerType = 'Tab Plating' ) and
       (( BoardFinish <> 'OSP' ) and ( BoardFinish <> 'Immersion Silver' )) 
    then
    begin
      MessageDlg('Gold Finger Tab Plating is not comaptible with ' + BoardFinish, mtError, Setof([mbOK]), 0); 
      Fnc.UserRouteGenAbort := true; 
    end;

    // 1305 Addtional Rule Check for CZ Pre-Treat
    if ( HardGoldB4Resist ) and ( Fnc.SysGetAttrValue('CZPreTreat') ) and ( MfgPartType = 'Top' ) then
    begin
      MessageDlg('CZ Pre-Treat is not compatible with Hard Gold Before Resist process, step will be omitted.', mtInformation, Setof([mbOK]), 0);
    end;                 
                     
  end;

  if ( MfgPartType = 'Top') or (MfgPartType = 'Inn') then
  begin
    // 1308 Update Hi-Pot table Value Units                                                   
    // For existing Jobs with Data, recalculate Test Voltage & Leakage Values
    // Make sure only to convert once - old values are in the 100's
    if (Fnc.SysGetAttrValue('Volt') > 0) and (Fnc.SysGetAttrValue('Volt') > 100) then
      Fnc.SysSetAttrValue('Volt', Fnc.SysGetAttrValue('Volt') / 1000);
                     
    if (Fnc.SysGetAttrValue('Leak') > 0) and (Fnc.SysGetAttrValue('Leak_New') = 0) then // Don't need to check for converting more than once since we use a new attribute
      Fnc.SysSetAttrValue('Leak_New', Fnc.SysGetAttrValue('Leak') * 1000);
  end;
  
  // 1354 CNC Fixed Offset Selection Rule
  if ( MfgPartType = 'Top') or (MfgPartType = 'Sub') then
  begin
    if (LaserBTopHits +
       LaserABotHits +
       UVLaserB_Top +
       UVLaserA_Bot = 0) and
       ( Fnc.SysGetAttrValue('Drill_OffsetX_Mode') = 'Auto' ) then
    begin
      if Fnc.SysGetAttrValue('Drill_FSF_X') <> 0 then
        Fnc.SysSetAttrValue('Drill_Offset_X', SetDrillXOffset(1));
      if ( Fnc.SysGetAttrValue('NCRunX2') ) and ( Fnc.SysGetAttrValue('Drill_FSF_X') <> 0 ) then
        Fnc.SysSetAttrValue('Drill_Offset_X_2', SetDrillXOffset(2));
    end;             
  end;
  
  // Set Layer Attributes
  if Fnc.SysGetItemAttrValue('Layer_Min_Line', true, cStackupLayer, 1) = 0.0 then
    Fnc.SysSetItemAttrValue('Layer_Min_Line', Fnc.SysGetAttrValue('Line_Width'), true, cStackupLayer, 1);
  if Fnc.SysGetItemAttrValue('Layer_Min_Line', false, cStackupLayer, 1) = 0.0 then
    Fnc.SysSetItemAttrValue('Layer_Min_Line', Fnc.SysGetAttrValue('Line_Width'), false, cStackupLayer, 1);
    
  if Fnc.SysGetItemAttrValue('Layer_Min_Air_Gap', true, cStackupLayer, 1) = 0.0 then
    Fnc.SysSetItemAttrValue('Layer_Min_Air_Gap', Fnc.SysGetAttrValue('Air_Gap'), true, cStackupLayer, 1);
  if Fnc.SysGetItemAttrValue('Layer_Min_Air_Gap', false, cStackupLayer, 1) = 0.0 then
    Fnc.SysSetItemAttrValue('Layer_Min_Air_Gap', Fnc.SysGetAttrValue('Air_Gap'), false, cStackupLayer, 1);

  if Fnc.SysGetItemAttrValue('Layer_Min_PadTo', true, cStackupLayer, 1) = 0.0 then
    Fnc.SysSetItemAttrValue('Layer_Min_PadTo', Fnc.SysGetAttrValue('Min_PTrace_Gap'), true, cStackupLayer, 1);
  if Fnc.SysGetItemAttrValue('Layer_Min_PadTo', false, cStackupLayer, 1) = 0.0 then
    Fnc.SysSetItemAttrValue('Layer_Min_PadTo', Fnc.SysGetAttrValue('Min_PTrace_Gap'), false, cStackupLayer, 1);
  
  if Fnc.SysGetItemAttrValue('Layer_Land_Area', true, cStackupLayer, 1) = 0.0 then
    Fnc.SysSetItemAttrValue('Layer_Land_Area', Fnc.SysGetAttrValue('Land_Area'), true, cStackupLayer, 1);
  if Fnc.SysGetItemAttrValue('Layer_Land_Area', false, cStackupLayer, 1) = 0.0 then
    Fnc.SysSetItemAttrValue('Layer_Land_Area', Fnc.SysGetAttrValue('Land_Area'), false, cStackupLayer, 1);
    
  // 2363 Remove PAL 3
  if Fnc.SysGetAttrValue('Electrolytic_Cu_Line') = 'PAL3' then
  begin
    Fnc.SysSetAttrValue('Electrolytic_Cu_Line', 'Auto');
    MessageDlg('PAL3 is no longer valid for the Electrolytic Plating Line. "Auto" has been used instead.', mtInformation, Setof([mbOK]), 0);
  end;
  
  if Fnc.SysGetAttrValue('Electrolytic_Cu_Line_2') = 'PAL3' then
  begin
    Fnc.SysSetAttrValue('Electrolytic_Cu_Line_2', 'Auto');
    MessageDlg('PAL3 is no longer valid for the Electrolytic Plating Line 2NC. "Auto" has been used instead.', mtInformation, Setof([mbOK]), 0);
  end;
  
  // 2391 Stack-Up Info for QR Code
  if MfgPartType = 'Inn' then
  begin

    SetInnerCoreCuAttribute;
    SetInnerCoreThkAttribute;

  end;

  // 2565 Add the Job Name Attribute to Route Step Assignment
  Fnc.SysSetAttrValue('JobNameAttribute', Fnc.GetJobData.Values['JobName']);

end;

procedure RoutePreProcess;
begin

  if ( not Fnc.SysRouteGenIsInsertingManualStep ) and
     ( not Fnc.SysRouteGenIsDeletingStep )
  then
    CheckAndGenPartData;

  // Always init photoStepList as it is used in the RoutePostProcess procedure
  photoStepList := TStringList.Create;

end;

procedure InitRouteGeneratedAttributes;
begin

  Fnc.SysSetAttrValue('UEtch_Cu', 0.0);
  Fnc.SysSetAttrValue('UEtch_Spec', '');

  InProcessCuThk := 0;
  if (( CoreBuild or SubAssemblyCoreBuild ) and ( Fnc.SysGetAttrValue('LayerCount') > 2 )) then 
  begin

    InProcessCuThk := GetSuborCoreIPCT;
    
    if InProcessCuThk = 0 then
      InProcessCuThk := BaseCuTopUM;

  end                                           
  else            
  begin

    if Fnc.SysGetAttrValue('MfgPartType') <> 'DmC' then
      InProcessCuThk := BaseCuTopUM; //364 Surface Cu Calculation

  end;
  
  Fnc.SysSetAttrValue('Pin_Lam', false);

end;
                     
procedure FlowSelect;
begin

  Fnc.MouseBusy;
  InitRouteGeneratedAttributes;
  
  if ((MfgPartType = 'Inn') or (MfgPartType = 'DmC')) then  //Simple Inner or Dummy Core
  begin

    if FindNumberOfDrillFiles = 0 then                       
      InnerLayerPE;
    else                  
      RouteFlow02;
      
  end                                               
  else
    RouteFlow02;

  Fnc.MouseNormal;

end;

procedure RoutePostProcess;
var

  i,
  routeStep : integer;
  photoSeqStr : string;

begin

  photoSeqStr := '';

  if photoStepList.Count > 1 then
  begin
                                                                     
    for i := 0 to photoStepList.Count - 1 do
    begin

      routeStep := StrToInt(photoStepList.Strings[i]);
                                                                                                                                  
      case i of

        0 : photoSeqStr := '1st Photo';
        1 : photoSeqStr := '2nd Photo';
        2 : photoSeqStr := '3rd Photo';
        3 : photoSeqStr := '4th Photo';
        4 : photoSeqStr := '5th Photo';
        5 : photoSeqStr := '6th Photo';
        6 : photoSeqStr := '7th Photo';                      
        7 : photoSeqStr := '8th Photo';
        8 : photoSeqStr := '9th Photo';

      end;

      Fnc.SysRouteGenInsAddlParam(routeStep, 'Erp', 'Photo Sequence', photoSeqStr, '', '', false, '', '', '');

    end;
    
  end;                                                            
  
  SetRulesVersion;

end;
