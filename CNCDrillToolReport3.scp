//HeaderImportExport-->
//SiteId=0
//Enterprise=True
//ScriptType=0
//ScriptGroup=
//HeaderImportExport<--
uses                                                                                                                                                                              
  RouteFunctions,
  Eng_DrillFunctions,
  SanitizeFileName;
const
  ExcelTemplate = 'EngenixCNCDrillDetails.xlsx';
  ExcelReport   = StringReplace(ExcelTemplate,'.xlsx', Fnc.GetJobData.Values['JobName'] + '.xlsx', SetOf([rfReplaceAll, rfIgnoreCase]));
  FileTemplateDir = 'C:\Engenix\Report\Template\';
  WorkingDir = 'C:\Engenix\Report\';
  SlotToolFile = 'SlotTools.txt';
  DrillToolFile = 'DrillTools.txt';
var
  ErrFound : boolean;     
  ErrMsg : string;
  ExcelQuery : TADOQuery;
                                                                       
procedure CheckTemplatesExists;
begin
  if (DirectoryExists(FileTemplateDir)) then
  begin
    if not (FileExists(FileTemplateDir + ExcelTemplate)) then
    begin
      ErrFound := True;
      ErrMsg := 'Template file ' + FileTemplateDir + ExcelTemplate + ' not found';
    end;
  end
  else
  begin
    ErrFound := True;
    ErrMsg := 'Template directory ' + FileTemplateDir + ' not found.';
  end;
end;

function CheckReportExists: boolean;
begin
  result := false;
  if FileExists(WorkingDir + ExcelReport) then
    result := true;
end;

function FileCopy(Source,Dest : String): Boolean;
var
  SourceStream,DestStream : TFileStream;
begin
  try
    SourceStream:=TFileStream.Create(Source,fmOpenRead);
    DestStream:=TFileStream.Create(Dest,fmCreate);
    DestStream.CopyFrom(SourceStream,SourceStream.Size);
    SourceStream.Free;
    DestStream.Free;
    Result := True;
  except
    Result := False;
  end;
end;

procedure CopyTemplateToWorkingDir;
begin
  try
    begin
      if not(FileCopy(FileTemplateDir+ExcelTemplate,WorkingDir+ExcelReport)) then
      begin
        ErrFound := True;
        ErrMsg := 'Unable to copy Excel file from the template directory';
      end;
    end
  except
    ErrFound := True;
    ErrMsg := 'Exception error copying Excel file from the template directory';
  end;
end;

procedure CreateAndOpenExcelQuery;
begin
  Fnc.MouseBusy;
  Excelquery := TadoQuery.Create(nil);
  Excelquery.ConnectionString := Fnc.ExcelConnect(WorkingDir + ExcelReport, true, 0);
  Excelquery.Close;
  Excelquery.Sql.Clear;
  Excelquery.Sql.Add('SELECT * FROM [CNC Drill Report$]');

  try
    Excelquery.Open;
  except
    MessageDlg('Error on CNC Report Excel query', mtError, Setof([mbOK]), 0);
    Excelquery.Close;
    Excelquery.Free;
    Fnc.MouseNormal;
    exit;
  end;
end;

procedure InsertDrillToolData(Worksheet: variant);
var
  i : integer;
  DrillName : string;
  DrillDetails: TsysTable;
  ToolCol: integer;
  ToolRow: integer;
  DrillsWithTools: integer;
  DrillSize: float;
  DrillList: TStringList;

  SlotToolsList: TStringList;
  DrillToolsList: TStringList;
  DrillToolStr: String;
  OutputList: TStringList;
begin
  //Fnc.OpenDataGrid(ExcelQuery)
  OutputList := TStringList.Create;
  DrillList := TStringList.Create;
  DrillList.Sorted := true;
  for i := 1 to FindNumberofDrillFiles do
  begin
    if (Fnc.SysGetItemAttrValue('DrillDefID', True, cStackupDrill, i) = 1) or
       (Fnc.SysGetItemAttrValue('DrillDefID', True, cStackupDrill, i) = 9)
    then
    begin
      DrillName := Fnc.SysGetItemAttrValue('ItemLayerName', True, cStackupDrill, i);
      DrillList.Add(DrillName);
    end;
  end;

  SlotToolsList := TStringList.Create;
  SlotToolsList.LoadFromFile(FileTemplateDir + SlotToolFile); // Starts at Col 213 (F213)
  DrillToolsList := TStringList.Create;
  DrillToolsList.LoadFromFile(FileTemplateDir + DrillToolFile); // Starts at Col 17 (F17)

  DrillsWithTools := 0;
  ToolRow := Worksheet.UsedRange.Rows.Count;

  for i := 0 to DrillList.Count -1 do
  begin
    DrillName := DrillList.Strings[i]
    DrillDetails := Fnc.SysGetDrillRouteToolsDetails(DrillName);
    //Fnc.OpenDataGrid(DrillDetails);

    if not DrillDetails.IsEmpty then
    begin
      DrillsWithTools := DrillsWithTools + 1;

      ToolRow := ToolRow + 1;

      if MfgAttr('LayerCount') > 2 then
      begin
        if Fnc.SysGetLayerAttrValue(DrillName, 'DrillDefID') = 1 then
          WorkSheet.Cells[ToolRow,10].Value := MfgAttr('Press_Thickness')
        else
          WorkSheet.Cells[ToolRow,10].Value := MfgAttr('LayupThickness');
      end
      else
        WorkSheet.Cells[ToolRow,10].Value := DSThicknessB4Plating;

      WorkSheet.Cells[ToolRow,11].Value := DrillName;

      WorkSheet.Cells[ToolRow,14].Value := MfgAttr('ItemMatrlDesc');

      DrillDetails.First;
      while not DrillDetails.Eof do
      begin
        DrillSize := DrillDetails.FieldByName('DRILL_SIZE').AsFloat;
        DrillToolStr := FormatFloat('0.000', DrillSize);

        // if last char <> 0 then 0.125 or 0.0275 etc
        //if Copy(FormatFloat('0000', FloatToStr(DrillDetails.FieldByName('DRILL_SIZE').AsFloat) * 1000), 4, 1) <> '0' then
        //  ToolColName := FormatFloat('0000', FloatToStr(DrillSize) * 1000);
        //else
        //  ToolColName := FormatFloat('000', FloatToStr(DrillSize) * 100);

        if DrillDetails.FieldByName('HoleType').AsString = 'Slot' then
          ToolCol := SlotToolsList.IndexOf(DrillToolStr) + 213
        else                           
          ToolCol := DrillToolsList.IndexOf(DrillToolStr) + 17
        try
          WorkSheet.Cells[ToolRow,ToolCol].Value := DrillDetails.FieldByName('TotNumHoles').AsFloat;
        except                          
          MessageDlg('Could not find Excel Column Name for CNC Drill Report ' + IntToStr(ToolCol),  mtWarning, Setof([mbOK]) , 0);
        end;
        
        OutputList.Add(IntToStr(ToolRow) + ';' + IntToStr(ToolCol) + ';' + DrillDetails.FieldByName('TotNumHoles').AsString);
        DrillDetails.Next;                    
      end;
      //Fnc.OpenDataGrid(DrillDetails);
    end;                           
    Fnc.SysTableDestroy(DrillDetails);
  end;
  OutputList.SaveToFile(WorkingDir + 
                        Fnc.GetJobData.Values['JobId'] + 
                        CleanFileName(Fnc.GetJobData.Values['JobName']) + 
                        CleanFileName(MfgAttr('ItemMatrlDesc')) + '.txt');
  
  DrillList.Free;        
  SlotToolsList.Free;
  DrillToolsList.Free;
  OutputList.Free;
end;

procedure AddMetaData(Worksheet: variant);
var
  row: integer;
begin
  row := 3;

  WorkSheet.Cells[row,1].Value := Fnc.GetJobData.Values['JobId'];
  WorkSheet.Cells[row,2].Value  := Fnc.GetJobData.Values['CustomerName'];
  WorkSheet.Cells[row,3].Value  := Fnc.GetJobData.Values['JobName'];
  WorkSheet.Cells[row,4].Value := Fnc.GetJobData.Values['PartDescription'];
  WorkSheet.Cells[row,5].Value := Fnc.GetJobData.Values['PartNumberName'];
  WorkSheet.Cells[row,6].Value  := Eng_JobType;
  WorkSheet.Cells[row,7].Value  := DateToStr(Date);   
  WorkSheet.Cells[row,8].Value  := GenMaterialType;
  WorkSheet.Cells[row,9].Value := MfgAttr('LayerCount');
  WorkSheet.Cells[row,12].Value  := MfgAttr('NC_Drill_1_EntryMat'); // Will need to figure out 1st Drill v 2nd Drill
  WorkSheet.Cells[row,13].Value := MfgAttr('Stack_Hgt'); // Will need to figure out 1st Drill v 2nd Drill
  WorkSheet.Cells[row,15].Value := MfgAttr('Panel_Length');
  WorkSheet.Cells[row,16].Value := MfgAttr('Panel_Width');
end;

procedure CreateJobFileFromTemplate;
begin
  ErrMsg := '';
  ErrFound := false;

  CheckTemplatesExists;
  if ErrFound then
  begin
    MessageDlg(ErrMsg, mtError, Setof([mbOK]), 0);
    exit;
  end
  else
  begin
    if not CheckReportExists then
      CopyTemplateToWorkingDir;
  end
  if ErrFound then
    MessageDlg(ErrMsg, mtError, Setof([mbOK]), 0);
end;

procedure GenCNCDrillReport;
begin
  CreateJobFileFromTemplate;

  if not ErrFound then
    CreateAndOpenExcelQuery;
  else
    exit;
  try
    AddMetaData('lll');
    InsertDrillToolData('lll');
    ExcelQuery.Post
  finally
    Excelquery.Close;
    Excelquery.Free;
    Fnc.MouseNormal;
  end;
end;

function GetExcelOleFileObject: variant;
var
  aMsg: string;
begin
  Result := nil;
  aMsg := '';

  if not FileExists(WorkingDir + ExcelReport) then
    aMsg := 'File does not exist: ' + WorkingDir + ExcelReport
  else
  begin
    Result := CreateOleObject('Excel.Application');
    if VarIsNull(Result) then
      aMsg := 'Failed to create an Excel session';
  end;

  if not (aMsg = '') then
    ShowMessage(aMsg);
end;

procedure TestExcelOLE
var
  ExcelOleObject: variant;
  WorkBook: variant;
  WorkSheet: variant;
begin
  WorkBook := nil;
  WorkSheet := nil;

  ExcelOleObject := GetExcelOleFileObject;

  ExcelOleObject.DisplayAlerts := False;

   try
    if not VarIsNull(ExcelOleObject) then
      WorkBook := ExcelOleObject.WorkBooks.Open(WorkingDir + ExcelReport);

    if not VarIsNull(WorkBook) then
      WorkSheet := WorkBook.WorkSheets.Item['CNC Drill Report'];

    if not VarIsNull(WorkSheet) then
    begin
      //DoProcessTheExcelFile(WorkSheet);
      //WorkSheet.Cells[5,213].Value := 'It Works!';
      AddMetaData(Worksheet);
      InsertDrillToolData(Worksheet);

      WorkBook.Save;
      //ExcelOleObject.Visible := True;
//    WorkBook.SaveAs(.... FileName ...);;
    end;
  finally
    ExcelOleObject.Quit;
  end;


end;


begin
  // Testing only
  //SetCNCDrillReportExportDate
  TestExcelOLE
end;
