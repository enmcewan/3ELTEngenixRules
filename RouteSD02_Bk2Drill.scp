//HeaderImportExport-->
//SiteId=0
//Enterprise=True
//ScriptType=0
//ScriptGroup=HCS
//HeaderImportExport<--
uses
  Event_RouteGenLibrary,
  Eng_RouteFunctions,
  RouteFunctions,
  RouteFunctions_Drilling, // Blind Via Changes
  CT_PreBook,
  CT_CuPlt_GM,
  CT_CuPlt_Line,
  CT_OLPhoto,
  CT_SearchLibrary,
  CT_Drill_StkHt,
  RouteSD03_ElyCu2Marking,
  CT_Drill_EntrySht,
  CT_Desmear;

Var
  PhotoLine: string;
  AltLine: string;
  ProdResource: string
  DesLine: string;       

procedure PEP_SD;
begin
  SysRouteInsDepartment('Erp', 'PEPOL-A', '');
  SysRouteInsWorkCenter('Erp', 'PEPOL-A', '');

  if CustCode_Rule('Customer') = 'FA' then
    SysRouteInsInstruction('Erp', 'PEPOL010', ''); // “Check OPE location off-set”

  AddSubsAndInnersAtStep; // 1229 PEP Flow option for Sub-assembly build.
  
  //if Fnc.SysRouteInsGetStepNum = 1 then  // 1471 QR Code information info update    
  //  InsertQRInfoAtStep1;   

end;
           
procedure Pre_Oxide_Baking_SD;
begin
  SysRouteInsDepartment('Erp', 'OXBAK-A', '');
  SysRouteInsWorkCenter('Erp', 'OXBAK-A', '');

  if (( HasMultipleSubAssemblies ) and ( MatPreOxide24HrBake )) then
    SysRouteInsAddlParameter('Erp', 'Remarks', '24 Hrs Baking','', '', false, '', '', ''); 

  SysRouteInsAddlParameter('Erp', 'Bake Reason', 'SP Material','', '', false, '', '', '');
end;

procedure Shearing_SD;
begin
  SysRouteInsDepartment('Erp', 'SHEAR=C', '');
  SysRouteInsWorkCenter('Erp', 'SHEAR=C', '');
  
  //if Fnc.SysRouteInsGetStepNum = 1 then  // 1471 QR Code information info update    
  //  InsertQRInfoAtStep1; 
end;

procedure Shearing_Laser_SD;
var                  
  ShearSize : string;
begin
  SysRouteInsDepartment('Erp', 'FINIL-A', '');
  SysRouteInsWorkCenter('Erp', 'FINIL-A', '');

  ShearSize := IntToStr(Fnc.SysGetAttrValue('Panel_Length')) + ' X ' + IntToStr(Fnc.SysGetAttrValue('Panel_Width'));

  SysRouteInsAddlParameter('Erp', 'Shear To', ShearSize, '', '', false, '', '', '');
end;

procedure Oxide_SD;
var
  UseOxideLine1 : boolean;
  UseOxideLine2 : boolean;
  UseOxideLine3 : boolean;

  OxideLineName1 : string;
  OxideLineName2 : string;
  OxideLineName3 : string;

  AltOxideLineName : string;
  OxideLineSelected : boolean;
  OxideLineName : string;

begin
  UseOxideLine1 := true;
  UseOxideLine2 := true;
  UseOxideLine3 := true;

  OxideLineName1 := 'L3';
  OxideLineName2 := 'L4';
  OxideLineName3 := 'L2';

  AltOxideLineName := '';
  OxideLineSelected := false;
  OxideLineName := '';

  SysRouteInsDepartment('Erp', 'OXDOL-B', '');

  if HasSubAssemblies = true then //In place of IES GLB_INNER_PRESSED - Verify
    UseOxideLine2 := false;

  if ((ThinnestCore < 0.043) or (ThickestCore > 2.4)) then
    UseOxideLine1 := false;

  //if ((ThinnestCore < 0.024) or (ThickestCore > 2.0)) then  // Per change request from Herole 2016/07/21
  if ((ThinnestCore < 0.012) or (ThickestCore > 2.0)) then
    UseOxideLine2 := false;

  if ((ThinnestCore < 0.05) or (ThickestCore > 2.4)) then
    UseOxideLine3 := false;

  if UseOxideLine1 = true then
  begin
    OxideLineSelected := true;
    OxideLineName := OxideLineName1;
    AltOxideLineName := OxideLineName1;
  end;

  if UseOxideLine2 = true then
  begin
    if OxideLineSelected = true then
    begin
      AltOxideLineName := AltOxideLineName + '/' + OxideLineName2;
    end
    else
    begin
      OxideLineSelected := true;
      OxideLineName := OxideLineName2;
      AltOxideLineName := OxideLineName2;
    end;
  end;

  if UseOxideLine3 = true then
  begin
    if OxideLineSelected = true then
    begin
      AltOxideLineName := AltOxideLineName + '/' + OxideLineName3;
    end
    else
    begin
      OxideLineSelected := true;
      OxideLineName := OxideLineName3;
      AltOxideLineName := OxideLineName3;
    end;
  end;

  if OxideLineSelected = false then
  begin
    ShowMessage('Error!!! - No Oxide Line Selected');
    SysRouteInsertStepExt('EGX_Missing_Steps', 'EGX_Missing_Steps01');
  end;

  if AltOxideLineName = 'L3/L4/L2' then
  begin
    SysRouteInsWorkCenter('Erp', 'OXDOL-B', '');
    SysRouteInsInstruction('Erp', 'OXDOL011', ''); // "ALTERNATIVE LINE : L3/L4/L2"
  end;

  if OxideLineName = 'L2' then
    SysRouteInsWorkCenter('Erp', 'OXDOL-C0', '');

  if OxideLineName = 'L3' then
    SysRouteInsWorkCenter('Erp', 'OXDOL-D0', '');

  if OxideLineName = 'L4' then
    SysRouteInsWorkCenter('Erp', 'OXDOL-E0', '');
    
  //if Fnc.SysRouteInsGetStepNum = 1 then  // 1471 QR Code information info update    
  //  InsertQRInfoAtStep1;  

end;

procedure Post_Oxide_Baking_SD;
begin
  SysRouteInsDepartment('Erp', 'OXBAK-A', '');
  SysRouteInsWorkCenter('Erp', 'OXBAK-A', '');

  if PressCycleMoreThan1 = true then
    SysRouteInsAddlParameter('Erp', 'Bake Reason', 'HDI : After 1 Press','', '', false, '', '', '');

  if  ((MatCyanateEster) or (MatPhenolCure = true)) then
    SysRouteInsAddlParameter('Erp', 'Bake Reason', 'SP Material','', '', false, '', '', '');

  if ((BaseCuTopUM >= 70) or (BaseCuBotUM >= 70)) then
    SysRouteInsAddlParameter('Erp', 'Bake Reason', 'Base Cu >= 2oz','', '', false, '', '', '');
end;

procedure Pre_Book_SD;
var
  Material : TStringlist;
  Prod_Res : string;
  PBookLine: string;
  AltLine: string;
begin
  Prod_Res := '';
  PBookLine:= '';
  AltLine:= '';

  SysRouteInsDepartment('Erp', 'PBOOK-A', '');
  SysRouteInsWorkCenter('Erp', 'PBOOK-C0', '');

  Material := TStringList.Create;
  Material.add('Prepreg');
  Material.add('PP/Filler');
  Material.add('Core');

  SysRouteInsMaterials('Engx', Material, 1, '');
end;

procedure Riveting_SD;
begin
  SysRouteInsDepartment('Erp', 'PBOOK-B0', '');
  SysRouteInsWorkCenter('Erp', 'PBOOK-B0', '');

  if Fnc.SysGetAttrValue('Rivet_Thk') <> '' then
    SysRouteInsAddlParameter('Erp', 'Rivet Thickness', Fnc.SysGetAttrValue('Rivet_Thk'), '', '', false, '', '', '');

  if NumOfCores > 8 then
    SysRouteInsInstruction('Erp', 'PBOOK013', ''); // 4 Rivet
  else
    SysRouteInsInstruction('Erp', 'PBOOK012', ''); // 2 Rivet

end;

procedure PlasticEye_Riveting_SD
begin
  SysRouteInsDepartment('Erp', 'PBOOK-B0', '');
  SysRouteInsWorkCenter('Erp', 'PBOOK-B0', '');
  SysRouteInsInstruction('Erp', 'PBOOK009', ''); // Remark: Plastic Eyelet Riveting.
end;

procedure Pin_Lam_SD;
begin
  SysRouteInsDepartment('Erp', 'PBOOK-A', '');
  SysRouteInsWorkCenter('Erp', 'PBOOK-G0', '');

  //If Pin-Lam Used, Copper Foil Should be in Sheet Format. Set Attr for BOM Conversion
  Fnc.SysSetAttrValue('Pin_Lam', true);
end;
                
procedure Pin_Bond_SD;
var
  Work_Center : string;
begin                       
  Work_Center := 'None';
  SysRouteInsDepartment('Erp', 'PBOOK-A', '');
                    
  if (( NumOfCores ) + ( NumOfSubs )) = 2 then
  begin
    if (( SuborILThk_GreaterThan(0.25) ) and ( SuborILPnlLen_GreaterThan(609) )) then
      Work_Center := 'PBOOK-D0'; // 6 Head
  end;

  if (( NumOfCores ) + ( NumOfSubs )) >= 2 then
  begin
    if ( (SuborILThk_GreaterThan(0.024) ) and ( SuborILPnlLen_GreaterThan(509) )) then
      Work_Center := 'PBOOK-A0';  // 3 Head
                  
    if (( NumOfCores ) + ( NumOfSubs )) = 2 then
    begin
      if (( SuborILThk_GreaterThan(0.25) ) and ( SuborILPnlLen_GreaterThan(609) )) then
        Work_Center := 'PBOOK-D0'; // 6 Head
    end;
  end;

  if Work_Center <> 'None' then
    SysRouteInsWorkCenter('Erp', Work_Center, '')
  else
    ShowMessage('Error!!! : No Resource Selected for Pin Bond. Check Panel Length & Thickness for each Inner/Sub');
    
  Fnc.SysSetAttrValue('Pin_Lam', false);
end;

procedure Hot_Press_SD;
var
  Material : TStringList;
  FoilWtinKG : float;
  BaseCopper : string;
  FirstPlating : string;
  SecondPlating : string;

begin
  SysRouteInsDepartment('Erp', 'PRESS-A', '');

  if PinLamination = true then
    SysRouteInsWorkCenter('Erp', 'PRESS-C1', '')
  else
    SysRouteInsWorkCenter('Erp', 'PRESS-C0', '');

  SysRouteInsAddlParameter('Erp', 'Press Thickness', FormatFloat('0.000', Fnc.SysGetAttrValue('Press_Thickness')), '', '', false, '', '', '');

  if Fnc.SysGetAttrValue('NCRunX2') = true then
    SysRouteInsInstruction('Erp', '2NC_KRAFT', ''); // REMARK: PUT KRAFT PAPER IN BETWEEN PANEL

  // 1246 Remove PBOOK008 Instruction
  {if (
      (BaseCuTopUM = 12) and
      (                          
       (CustCodeFirstChar = 'W') or      // Use of this needs to be confirmed
       (CustCodeFirstChar = 'S') 
      )
     )                                                                                             
  then
    SysRouteInsInstruction('Erp', 'PBOOK008', ''); // =- USE COPPER FOIL - MWG FOIL } 

  Material := TStringList.Create;
  Material.add('Foil');
                           
  FoilWtinKG := 0.0;        

  Fnc.SysGetCopperValues(True, false, BaseCopper, FirstPlating, SecondPlating);
  Case BaseCopper of
      '1/3oz' : FoilWtinKG := 0.0416 ;
      '1/2oz' : FoilWtinKG := 0.0588 ;
      '1oz'   : FoilWtinKG := 0.1088 ;
      '2oz'   : FoilWtinKG := 0.2215 ;
    end;

  if ( BaseCopper = '5um' ) or ( Fnc.SysGetAttrValue('Pin_Lam') ) then   // 1200 5um Cu Foil   // 1247 BOM Cu Foil Unit        
    SysRouteInsMaterials('Engx', Material, 1, '')
  else
    SysRouteInsMaterials('Engx', Material, FoilWtinKG, '')
end;

procedure KKXDYDDistance; // 2200 IL Shearing / Routing Info  
begin
  if (Fnc.SysGetAttrValue('MfgPartType') = 'Top') and
     (PressCycleMoreThan1 = false) and
     (FoilBuild = true)
  then
  begin
    if (ProdCodeLBlb = true) or (CustCode_Rule('Customer') = 'FA') then         
    begin
      if Eng_JobType = 'Sample' then
         MessageDlg('For LB / Fanuc model, the manually entered value of ' + 
                     IntToStr(Fnc.SysGetAttrValue('KK_Distance')) +
                    ' will be used as the KK distance. Please check and confirm', mtWarning, SetOf([mbOK]), 0);
    end
    else
      Fnc.SysSetAttrValue('KK_Distance', Fnc.SysGetAttrValue('Panel_Length') - 8);
  end                           
  else        
  begin
    if (( Eng_JobType = 'Sample' ) and ( PressCycleMoreThan1 = true )) then
      //ShowMessage('ERROR!!! : MORE THAN ONE TIME PRESS, THE KEY IN VALUE: ' + IntToStr(Fnc.SysGetAttrValue('KK_Distance')) + ' WILL BE USED AS KK DISTANCE, PLEASE CHECK AND CONFIRM');
      MessageDlg('More than one time press, the manually entered value of ' + 
                  IntToStr(Fnc.SysGetAttrValue('KK_Distance')) +
                  ' will be used as the KK distance. Please check and confirm', mtWarning, SetOf([mbOK]), 0);
  end;
                       
  if ((Fnc.SysGetAttrValue('KK_Distance') < 100) or (Fnc.SysGetAttrValue('KK_Distance') > 700)) then
    MessageDlg('Wrong KK Distance, please feedback to Engineering!', mtError, SetOf([mbOK]), 0);
    
  SysRouteInsAddlParameter('Erp', 'KK Distance', Fnc.SysGetAttrValue('KK_Distance'), '', '', false, '', '', '');
  
  if (Fnc.SysGetAttrValue('LaserBTopHits') > 0 ) or
     (Fnc.SysGetAttrValue('LaserABotHits') > 0 ) or
     (Fnc.SysGetAttrValue('UVLaserB_Top') > 0 ) or
     (Fnc.SysGetAttrValue('UVLaserB_Top') > 0 )
  then
  begin
    if Fnc.SysGetAttrValue('Panel_Length_XD') = 0 then 
    begin // 1465
      if Fnc.SysGetAttrValue('Panel_Length') > 510 then
        Fnc.SysSetAttrValue('Panel_Length_XD', 460)
      else
        Fnc.SysSetAttrValue('Panel_Length_XD', 350) 
    end;         
                                                                
    if Fnc.SysGetAttrValue('Panel_Width_XD') = 0 then
    begin
      if Fnc.SysGetAttrValue('MfgPartType') = 'Top' then  // 1465
        Fnc.SysSetAttrValue('Panel_Width_XD', Fnc.SysGetAttrValue('Panel_Width') - 10)
      else if Fnc.SysGetAttrValue('MfgPartType') = 'Sub' then
      begin
         if IsFirstSub(Fnc.SysGetAttrValue('ItemMatrlDesc')) then
           Fnc.SysSetAttrValue('Panel_Width_XD', Fnc.SysGetAttrValue('Panel_Width') - 10)
         else
           Fnc.SysSetAttrValue('Panel_Width_XD', Fnc.SysGetAttrValue('Panel_Width') - 14)
      end;
    end;

    SysRouteInsAddlParameter('Erp', 'X Distance Length', Fnc.SysGetAttrValue('Panel_Length_XD'), '', '', false, '', '', '');
    SysRouteInsAddlParameter('Erp', 'Y Distance Width', Fnc.SysGetAttrValue('Panel_Width_XD'), '', '', false, '', '', ''); 
  end;
end;  

procedure Scope_Drilling_SD;
var
  fixedDim: string;
  controlRange: string;
begin
  fixedDim := '';
  controlRange := '';

  SysRouteInsDepartment('Erp', 'SCPDR-A', '');

  if (
      (
       (Fnc.SysGetAttrValue('ProdCode') = '04LS') or
       (Fnc.SysGetAttrValue('ProdCode') = 'P04ls') or
       (Fnc.SysGetAttrValue('ProdCode') = '06LS') or
       (Fnc.SysGetAttrValue('ProdCode') = 'P06ls')
      )
      and
       (Fnc.SysGetAttrValue('Press_Thickness') > 1.4)
      and
      (Fnc.SysGetAttrValue('KK_Distance') < 598)
     )              
  then                              
    SysRouteInsWorkCenter('Erp', 'SCPDR-A', '')
  else
    SysRouteInsWorkCenter('Erp', 'SCPDR-B0', '');

  if (
      ((Fnc.SysGetAttrValue('LaserBTopHits') > 0) or (Fnc.SysGetAttrValue('LaserABotHits') > 0))
      // 784 - Scope Drill remarks for HDI jobs (multiple press or jobs with laser via)
      //or
      //(HasMultipleSubAssemblies = true)
     )
  then
    if UsesDefaultXYPanelDistance then               // 1465
      SysRouteInsInstruction('Erp', 'SCPDR054', '')
    else
      SysRouteInsInstruction('Erp', 'SCPDR001', ''); // REMARK:SCOPE DRILL FOR 4 MURAKI HOLES.

  if Fnc.SysGetAttrValue('NCRunX2') = true then //GLB_NC_RUN = 0 is not required
    SysRouteInsInstruction('Erp', '2NC_KRAFT', ''); //REMARK: PUT KRAFT PAPER IN BETWEEN PANEL

  // 1114 Fixed Scale Factor Info
  if Fnc.SysGetAttrValue('Scope_Drill_Fixed_X') > 0 then
  begin
    fixedDim := 'X = ' + FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Scope_Drill_Fixed_X'))) + 'mm; ' +
                'Y = ' + FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Scope_Drill_Fixed_Y'))) + 'mm';
                
    controlRange := 'X = ' + FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Scope_Drill_Fixed_X') - 0.05)) + '~' +
                             FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Scope_Drill_Fixed_X') + 0.05)) + 'mm; ' +
                    'Y = ' + FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Scope_Drill_Fixed_Y') - 0.05)) + '~' +
                             FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Scope_Drill_Fixed_Y') + 0.05)) + 'mm';
                                                         
    SysRouteInsAddlParameter('Erp', 'Fixed Dimension', fixedDim, '', '', false, '', '', '');
    SysRouteInsAddlParameter('Erp', 'Control Range', controlRange, '', '', false, '', '', '');
  end;
  
  KKXDYDDistance; // 2200 IL Shearing / Routing Info  
end;

procedure Scope_Drilling_EP_SD;
begin
  SysRouteInsDepartment('Erp', 'SCPDR-A', '');
  SysRouteInsWorkCenter('Erp', 'SCPDR-A', '')

  SysRouteInsAddlParameter('Erp', 'KK Distance', Fnc.SysGetAttrValue('KK_Distance'), '', '', false, '', '', '');
end;

procedure IL_RoutShear_Common;
var
  //Calc_KK : integer;
  ShearPnlPress : boolean;
  ShearSize : string;
  X_CMK_SF : float;        
  Y_CMK_SF : float;
  Press_Thk_Nom : string;
  Press_Thk_Max : string;
  Press_Thk_Min : string;

begin                         
  //Calc_KK := 0;
  ShearPnlPress := false;
  ShearSize := '';
  X_CMK_SF := 0.0;         
  Y_CMK_SF := 0.0;

  Press_Thk_Nom := '';
  Press_Thk_Max := '';
  Press_Thk_Min := '';

  // 2200 IL Shearing / Routing Info 
  {if (
      (Fnc.SysGetAttrValue('MfgPartType') = 'Top') and
      (PressCycleMoreThan1 = false) and
      (FoilBuild = true)
     )
  then
  begin
    if (
        (ProdCodeLBlb = true) or
        (CustCode_Rule('Customer') = 'FA')
       )
    then         
    begin
      if Eng_JobType = 'Sample' then
        MessageDlg('For LB / Fanuc model, the manually entered value of ' + 
                  IntToStr(Fnc.SysGetAttrValue('KK_Distance')) +
                  ' will be used as the KK distance. Please check and confirm', mtWarning, SetOf([mbOK]), 0);
    end
    else
    begin
      Calc_KK := Fnc.SysGetAttrValue('Panel_Length') - 8;
      Fnc.SysSetAttrValue('KK_Distance', Calc_KK);
   end;
  end
  else        
  begin
    if (( Eng_JobType = 'Sample' ) and ( PressCycleMoreThan1 = true )) then
      MessageDlg('More than one time press, the manually entered value of ' + 
                  IntToStr(Fnc.SysGetAttrValue('KK_Distance')) +
                  ' will be used as the KK distance. Please check and confirm', mtWarning, SetOf([mbOK]), 0);
  end;
                       
  if ((Fnc.SysGetAttrValue('KK_Distance') < 100) or (Fnc.SysGetAttrValue('KK_Distance') > 700)) then
    ShowMessage('ERROR!!! : Wrong KK Distance, please feedback to Engineering!');
  }
   //No need to calculate the Pressed Thickness, this will come from the stack-up

  //No need for special Pressed Min Thickness for "GM04", should be applied at the stack-up requirements

  //No need to calculate Press Thickness for Sub-Assemblies ("IC")

  Press_Thk_Nom := FloatToStr(Round1000(Fnc.SysGetAttrValue('Press_Thickness')));
  Press_Thk_Max := FloatToStr(Round1000(Fnc.SysGetAttrValue('Press_Thickness') * 1.08));
  Press_Thk_Min := FloatToStr(Round1000(Fnc.SysGetAttrValue('Press_Thickness') * 0.92));

  SysRouteInsAddlParameter('Erp', 'Press Thickness', Press_Thk_Min + '~' + Press_Thk_Nom + '~' + Press_Thk_Max, '', '', false, '', '', '');
  //SysRouteInsInstruction('', 'See Stack-up diagram', '');     Removed per email from Alison 10/29

  if ((PPGTypesForILFinish = true) and (Fnc.SysGetAttrValue('BlindVias') = true)) then
    ShearPnlPress := true;

  // No need to check for RCC material, not used

  if Fnc.SysGetAttrValue('MfgPartType') = 'Top' then
  begin                    
    if ((Fnc.SysGetAttrValue('BlindVias') = true) and (Fnc.SysGetAttrValue('CappedVia') = true)) then
      ShearPnlPress := true;
  end
  else  // Can only be a sub getting pressed
  begin
    if (
        (Fnc.SysGetAttrValue('BlindVias') = true) and
        (Fnc.SysGetAttrValue('Press_Thickness') >= 0.6) and
        (Fnc.SysGetAttrValue('Min_Drill_Size') < 2.0)
       )
    then
      ShearPnlPress := true;
  end;
                 
  if (( Fnc.SysGetAttrValue('Shear_Length') <> 0 ) and ( Fnc.SysGetAttrValue('Shear_Width') <> 0 )) then // Request from Herole 9/8 OneDesk
    ShearPnlPress := true;

  if ShearPnlPress then
    ShearSize := IntToStr(Fnc.SysGetAttrValue('Shear_Length')) + ' X ' + IntToStr(Fnc.SysGetAttrValue('Shear_Width'))
  else
    ShearSize := IntToStr(Fnc.SysGetAttrValue('Panel_Length')) + ' X ' + IntToStr(Fnc.SysGetAttrValue('Panel_Width'));

  if ShearSize = '0 X 0' then
    ShowMessage('ERROR!!! : Shear Size cannot be 0 X 0');

  //SysRouteInsAddlParameter('Erp', 'KK Distance', Fnc.SysGetAttrValue('KK_Distance'), '', '', false, '', '', '');
  SysRouteInsAddlParameter('Erp', 'Shear Size', ShearSize, '', '', false, '', '', '');

  if (
      (Fnc.SysGetAttrValue('LaserBTopHits') > 0 ) or
      (Fnc.SysGetAttrValue('LaserABotHits') > 0 ) or
      (Fnc.SysGetAttrValue('UVLaserB_Top') > 0 ) or
      (Fnc.SysGetAttrValue('UVLaserB_Top') > 0 )
     )
  then
  begin
    // 2200 IL Shearing / Routing Info 
    {if Fnc.SysGetAttrValue('Panel_Length_XD') = 0 then 
    begin // 1465
      if Fnc.SysGetAttrValue('Panel_Length') > 510 then
        Fnc.SysSetAttrValue('Panel_Length_XD', 460)
      else
        Fnc.SysSetAttrValue('Panel_Length_XD', 350) 
    end;
                                                                
    if Fnc.SysGetAttrValue('Panel_Width_XD') = 0 then
    begin             
      if Fnc.SysGetAttrValue('MfgPartType') = 'Top' then  // 1465
        Fnc.SysSetAttrValue('Panel_Width_XD', Fnc.SysGetAttrValue('Panel_Width') - 10)
      else if Fnc.SysGetAttrValue('MfgPartType') = 'Sub' then
      begin
         if IsFirstSub(Fnc.SysGetAttrValue('ItemMatrlDesc')) then
           Fnc.SysSetAttrValue('Panel_Width_XD', Fnc.SysGetAttrValue('Panel_Width') - 10)
         else
           Fnc.SysSetAttrValue('Panel_Width_XD', Fnc.SysGetAttrValue('Panel_Width') - 14)
      end;
    end;

    SysRouteInsAddlParameter('Erp', 'X Distance Length', Fnc.SysGetAttrValue('Panel_Length_XD'), '', '', false, '', '', '');
    SysRouteInsAddlParameter('Erp', 'Y Distance Width', Fnc.SysGetAttrValue('Panel_Width_XD'), '', '', false, '', '', ''); 
    }              
    if ((Fnc.SysGetAttrValueTopLevel('QPCB_Length') > 0 ) and (Fnc.SysGetAttrValue('MfgPartType') = 'Top')) then
    begin
      X_CMK_SF := (0.076 * Fnc.SysGetAttrValueTopLevel('QPCB_Length') * 100 ) / Fnc.SysGetAttrValue('Panel_Length');
      Y_CMK_SF := (0.076 * Fnc.SysGetAttrValueTopLevel('Panel_Cavity') / Fnc.SysGetAttrValueTopLevel('QPCB_Length') * 100 ) / Fnc.SysGetAttrValue('Panel_Width');

      X_CMK_SF := Round1000(X_CMK_SF);
      Y_CMK_SF := Round1000(Y_CMK_SF);

      SysRouteInsAddlParameter('Erp', 'X CMK SF', X_CMK_SF, '', '', false, '', '', '');
      SysRouteInsAddlParameter('Erp', 'Y CMK SF', Y_CMK_SF, '', '', false, '', '', '');
    end;

    SysRouteInsInstruction('Erp', 'FINIL001', ''); // REMARKS:4- HOLE MARK CENTER DRILL.

  end;

  if ((CustCode_Rule('Customer') = 'FA') and (Fnc.SysGetAttrValue('KK_Distance') = 502)) then
  begin
    SysRouteInsInstruction('Erp', 'FINIL022', ''); //“ – MEASURE 7 HOLES”
    SysRouteInsInstruction('Erp', 'FINIL036', ''); //“REMARK : Check for KK off-set.”
    SysRouteInsInstruction('Erp', 'FINIL026', ''); // REMARK : K-K offset from panel center : 49.24mm
    SysRouteInsInstruction('Erp', 'FINIL025', ''); // REMARK : Orientation hole from K point. X : 2.08 Y : 57.15
  end;

  if Fnc.SysGetAttrValue('NCRunX2') = true then
    SysRouteInsInstruction('Erp', '2NC_KRAFT', ''); // REMARK: PUT KRAFT PAPER IN BETWEEN PANEL

end;

procedure IL_Route_SD;
var            
  CalcStackHt : integer;
begin
  CalcStackHt := 0.0;
                                              
  SysRouteInsDepartment('Erp', 'FINIL-B', '');
  SysRouteInsWorkCenter('Erp', 'FINIL-B', '');

  {CalcStackHt := Round(8/Fnc.SysGetAttrValue('Press_Thickness'));
  Fnc.SysSetAttrValue('FinIL_Stk', CalcStackHt);
  SysRouteInsAddlParameter('Erp', 'Stack Height', CalcStackHt, '', '', false, '', '', '');}
  
  if not Fnc.SysGetAttrValue('FinIL_Stk_Ovr') then // 1472
  begin
    //CalcStackHt := Round(8/Fnc.SysGetAttrValue('Press_Thickness'));
    CalcStackHt := Round(7.1/Fnc.SysGetAttrValue('Press_Thickness')); // 1499
    Fnc.SysSetAttrValue('FinIL_Stk', CalcStackHt);
    SysRouteInsAddlParameter('Erp', 'Stack Height', CalcStackHt, '', '', false, '', '', '');
  end
  else                       
  begin                                                    
    if Fnc.SysGetAttrValue('FinIL_Stk_User') > 0 then
    begin
      Fnc.SysSetAttrValue('FinIL_Stk', Fnc.SysGetAttrValue('FinIL_Stk_User'));
      SysRouteInsAddlParameter('Erp', 'Stack Height', Fnc.SysGetAttrValue('FinIL_Stk_User'), '', '', false, '', '', '');
    end
    else
      MessageDlg('IL Finish Route Stack Height user override selected but value is 0', mtWarning, Setof([mbOK]) , 0);
  end;

  if Fnc.SysGetAttrValue('NCRunX2') = true then
    SysRouteInsInstruction('Erp', '2NC_KRAFT', ''); // REMARK: PUT KRAFT PAPER INBETWEEN PANEL

  if Fnc.SysGetAttrValue('IL_Finish_Rout') = true then
    SysRouteInsInstruction('Erp', 'FINIL010', ''); //  PLS USE SPECIFIC ROUTING TAPE (PROGRAME) FOR THIS MODEL ONLY.

end;
             
procedure IL_Bevel_SD;
begin
  SysRouteInsDepartment('Erp', 'FINBE-A', '');

  if Fnc.SysGetAttrValue('Press_Thickness') > 3.5 then
    SysRouteInsWorkCenter('Erp', 'FINBE-B0', '')
  else
    SysRouteInsWorkCenter('Erp', 'FINBE-A0', '');

  IL_RoutShear_Common; 
end;                                                                               

procedure IL_Shearing_SD;
begin
  SysRouteInsDepartment('Erp', 'FINIL-A', '');
  SysRouteInsWorkCenter('Erp', 'FINIL-A', '');

  IL_RoutShear_Common;
end;

procedure Outgoing_SD;
begin
  SysRouteInsDepartment('Erp', 'FINGO-A', '');

  if Fnc.SysGetAttrValue('Press_Thickness') > 2.0 then
    SysRouteInsWorkCenter('Erp', 'FINGO-A0', '')
  else
  begin
    if Fnc.SysGetAttrValue('Press_Thickness') > 0.6 then
      SysRouteInsWorkCenter('Erp', 'FINGO-A0', '')
    else
      SysRouteInsWorkCenter('Erp', 'FINGO-B0', '')
  end;
end;

procedure MicroEtch_SD;
var
  sUEtch : string;
  cuAfterMEtch : integer;
begin
  sUEtch := '';

  SysRouteInsDepartment('Erp', 'METCH-A', '');
  SysRouteInsWorkCenter('Erp', 'METCH-A', '');

  if ((Fnc.SysGetAttrValue('UVLaserB_Top') > 0) or (Fnc.SysGetAttrValue('UVLaserA_Bot') > 0)) then
  begin
    if BaseCuTopUM = 18 then
    begin
      Fnc.SysSetAttrValue('UEtch_Spec', '18 TO 9.5~12');
      Fnc.SysSetAttrValue('UEtch_Cu', 9.5);
      MicroEtchDone := true;
    end;
                        
    if BaseCuTopUM = 12 then
    begin    
      Fnc.SysSetAttrValue('UEtch_Spec', '12 TO 7~9.5');
      Fnc.SysSetAttrValue('UEtch_Cu', 7.0);
      MicroEtchDone := true;
    end;
    // DONE AS PER IES. Note that the logic does not handle anything other than 12 or 18 um base copper.
  end
  else
  begin           
    if BaseCuTopUM = 18 then        
    begin
      if Fnc.SysGetAttrValue('UEtch_Value') <> '' then
      begin
        sUEtch := copy(Fnc.SysGetAttrValue('UEtch_Value'), 1, 8);
        Fnc.SysSetAttrValue('UEtch_Spec', '18 to ' + sUEtch);

        sUEtch := copy(sUEtch, 1, 1);
        try                 
          Fnc.SysSetAttrValue('UEtch_Cu', StrToFloat(sUEtch));
        except
          ShowMessage('Error converting User Entered UEtch Spec to a number');
        end;
      end
      else
      begin
        Fnc.SysSetAttrValue('UEtch_Spec', '18 TO 9~12');
        Fnc.SysSetAttrValue('UEtch_Cu', 9.0);
      end;

      MicroEtchDone := true;
    end;

    if BaseCuTopUM = 12 then
    begin
      Fnc.SysSetAttrValue('UEtch_Spec', '12 TO 7~9.5');
      Fnc.SysSetAttrValue('UEtch_Cu', 7.0);
    end;
    MicroEtchDone := true;
  end;

  //New calculation of Micro-etch values per Herole, 364 Surface Cu Calculation, message 3/10/17
  if (( CoreBuild or SubAssemblyCoreBuild ) and ( Fnc.SysGetAttrValue('LayerCount') > 2 )) then
  begin
    Fnc.SysSetAttrValue('UEtch_Spec', IntToStr( InProcessCuThk ) + ' TO ' + IntToStr( InProcessCuThk - 4 ));
    Fnc.SysSetAttrValue('UEtch_Cu', InProcessCuThk - 4);
  end
  else
  begin
    case BaseCuTopUM of
      35 : cuAfterMEtch := 29;    
      18 : cuAfterMetch := 12;
      12 : cuAfterMetch := 8;
    else
      cuAfterMEtch := BaseCuTopUM;
    end;

    Fnc.SysSetAttrValue('UEtch_Spec', IntToStr( BaseCuTopUM ) + ' TO ' + IntToStr( cuAfterMEtch ));
    Fnc.SysSetAttrValue('UEtch_Cu', cuAfterMetch);
  end;

  //InProcessCuThk := Fnc.SysGetAttrValue('UEtch_Cu'); //364 Surface Cu Calculation
  UpdateInProcessCuThk(Fnc.SysGetAttrValue('UEtch_Cu'));
  //ShowMessage( 'Cu Thk After Micro-Etch ' + IntToStr(InProcessCuThk) + 'um'  );

  //SysRouteInsAddlParameter('Erp', 'Micro-Etch Spec', Fnc.SysGetAttrValue('UEtch_Spec'), '', '', false, '', '', '');
  // 1138 Micro Etch for Laser Via
  SysRouteInsAddlParameter('Erp', 'Micro-Etch Spec', Fnc.SysGetAttrValue('UEtch_Cu'), '', '', false, '', '', ''); 

  if ((Fnc.SysGetAttrValue('NCRunX2') = true) and (NCRun = 0)) then
    SysRouteInsInstruction('Erp', '2NC_PESHET', ''); // REMARK: PUT PE SHEET IN BETWEEN PANEL
end;

procedure MicroEtchCuThin_SD;
begin
  SysRouteInsDepartment('Erp', 'METCH-A', '');
  SysRouteInsWorkCenter('Erp', 'METCH-A', '');
  SysRouteInsAddlParameter('Erp', 'Note', 'Micro-Etch for Cu Thin', '', '', false, '', '', '');
end;

procedure MicroEtch_DirLaser_SD; // 1307
begin
  SysRouteInsDepartment('Erp', 'METCH-A', '');
  SysRouteInsWorkCenter('Erp', 'METCH-A', '');
  
  UpdateInProcessCuThk(InProcessCuThk - 3 ); // 1568 Micro-Etch after Direct Laser
  Fnc.SysSetAttrValue('UEtch_Cu', InProcessCuThk);
  
  if InProcessCuThk <= 5 then              
    SysRouteInsInstruction('Erp', 'METCH012', '') 
  else if InProcessCuThk <= 12 then              
    SysRouteInsInstruction('Erp', 'METCH014', '')  
  else
  begin                                                                        
    SysRouteInsAddlParameter('Erp', 'Remark', '2um reduction (bare Cu coupon/Dummy)' , '', '', false, '', '', '');
    SysRouteInsAddlParameter('Erp', 'Micro-Etch Spec', IntToStr(InProcessCuThk) + ' ± 0.5µm', '', '', false, '', '', '');
  end;    
  
  
  
end; 

procedure UV_LaserCommon_SD(LaserSide : string);
begin                         
  SysRouteInsDepartment('Erp', 'LASUV-A', '');
  SysRouteInsWorkCenter('Erp', 'LASUV-A', '');

  SysRouteInsAddlParameter('Erp', 'Stack Height', Fnc.SysGetAttrValue('Laser_StkHt'), '', '', false, '', '', '');

  if Fnc.SysGetAttrValue('UEtch_Cu') = 0.0 then
    SysRouteInsAddlParameter('Erp', 'Base Cu', IntToStr(BaseCuTopUM), '', '', false, '', '', '');
  else
    //SysRouteInsAddlParameter('Erp', 'Micro-Etch Spec', Fnc.SysGetAttrValue('UEtch_Spec'), '', '', false, '', '', '');
    // 1138 Micro Etch for Laser Via
    SysRouteInsAddlParameter('Erp', 'Micro-Etch Spec', Fnc.SysGetAttrValue('UEtch_Cu'), '', '', false, '', '', ''); 

end;

procedure UV_LaserA_SD;
begin
  UV_LaserCommon_SD('LaserA');

  SysRouteInsAddlParameter('Erp', 'Bottom Layer', Fnc.SysGetAttrValue('BotLayer'), '', '', false, '', '', '');
  SysRouteInsAddlParameter('Erp', 'Laser Material', GetLaserMaterial('LaserSideA'), '', '', false, '', '', '');
  SysRouteInsAddlParameter('Erp', 'Laser Hits', Fnc.SysGetAttrValue('UVLaserA_Bot'), '', '', false, '', '', '');

end;

procedure UV_LaserB_SD;
begin                                              
  UV_LaserCommon_SD('LaserB');

  SysRouteInsAddlParameter('Erp', 'Top Layer', Fnc.SysGetAttrValue('TopLayer'), '', '', false, '', '', '');
  SysRouteInsAddlParameter('Erp', 'Laser Material', GetLaserMaterial('LaserSideB'), '', '', false, '', '', '');
  SysRouteInsAddlParameter('Erp', 'Laser Hits', Fnc.SysGetAttrValue('UVLaserB_Top'), '', '', false, '', '', '');

end;

procedure Conf_Mask_SD;
var
  fixedDim: string;
  controlRange: string;
begin
  fixedDim := '';
  controlRange := '';
  //O_PHO_CONF$ = 'Conformal Mask'
  // CONFORMAL_ =  Conformal Mask Size
  // DRY FILM = Conformal Mask Dry Film Thickness
  // MASK_SIZE = ENTER AFTER ETCHING CONFORMAL MASK SIZE

  SysRouteInsDepartment('Erp', 'EXPOL-A', '');

  OL_Photo_Common_SD('ConformalMask');

  //Search_Table_PhotoLine('ConformalMask', PhotoLine, AltLine, ProdResource, DesLine);
  //SysRouteInsWorkCenter('Erp', ProdResource, '');

  SysRouteInsAddlParameter('Erp', 'Conf. Mask Size', Fnc.SysGetAttrValue('ConfMask_Size'), '', '', false, '', '', '');

  if Fnc.SysGetAttrValue('ConfMask_Size_Skip') > 0 then
    SysRouteInsAddlParameter('Erp', 'Conf. Mask Size - Skip', Fnc.SysGetAttrValue('ConfMask_Size_Skip'), '', '', false, '', '', '');

  SysRouteInsAddlParameter('Erp', 'Conf. Mask Thickness', Fnc.SysGetAttrValue('ConfMask_Thk'), '', '', false, '', '', '');

  //SysRouteInsAddlParameter('Erp', 'Shear Size', IntToStr(Fnc.SysGetAttrValue('Panel_Length_Press')) + ' X ' + IntToStr(Fnc.SysGetAttrValue('Panel_Width_Press')), '');

  if ((Fnc.SysGetAttrValue('ConfMask_Thk') = 38) and (Fnc.SysGetAttrValue('ConfMask_Size_AE') < 115.0)) then
    ShowMessage('If Conf Mask Dry Film Thickness = 38 then After Etching Mask Size must be > 115');

  SysRouteInsAddlParameter('Erp', 'Times Pressed', IntToStr(NumTimesPress), '', '', false, '', '', '');
  
  // 1114 Fixed Scale Factor Info
  if Fnc.SysGetAttrValue('ConfMask_FSF_X') > 0 then
  begin
    fixedDim := 'X = ' + FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('ConfMask_FSF_X'))) + '%; ' +
                'Y = ' + FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('ConfMask_FSF_Y'))) + '%';
                
    controlRange := 'X = ' + FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('ConfMask_FSF_X') - Fnc.SysGetAttrValue('ConfMask_FSF_X_Tol'))) + '~' +
                             FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('ConfMask_FSF_X') + Fnc.SysGetAttrValue('ConfMask_FSF_X_Tol'))) + '%; ' +
                    'Y = ' + FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('ConfMask_FSF_Y') - Fnc.SysGetAttrValue('ConfMask_FSF_Y_Tol'))) + '~' +
                             FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('ConfMask_FSF_Y') + Fnc.SysGetAttrValue('ConfMask_FSF_Y_Tol'))) + '%';
                                                       
    SysRouteInsAddlParameter('Erp', 'Fixed Scale Factor', fixedDim, '', '', false, '', '', '');
    SysRouteInsAddlParameter('Erp', 'Control Range', controlRange, '', '', false, '', '', '');
  end;

end;

procedure OL_AOI_Common_SD(AOIforCMK : boolean);
begin
  SysRouteInsDepartment('Erp', 'INSOL-A', '');
  SysRouteInsWorkCenter('Erp', 'INSOL-A', '');

  if ((Fnc.SysGetAttrValue('BlindVias') = true) or (CheckBuriedDrill(1) = true)) then
  begin                                            
    if NOT ((Fnc.SysGetAttrValue('BlindVias') = true) and (CheckBuriedDrill(1) = true)) then
    begin
      if Fnc.SysGetAttrValue('BlindVias') = true then
        SysRouteInsAddlParameter('Erp', 'Via Type', 'Blind', '', '', false, '', '', '');

      if CheckBuriedDrill(1) = true then
        SysRouteInsAddlParameter('Erp', 'Via Type', 'Buried', '', '', false, '', '', '');
    end
    else
    begin
      SysRouteInsAddlParameter('Erp', 'Via Type', 'Blind & Buried', '', '', false, '', '', '');
    end;
  end;

  if ((AOIforCMK = true) and (CustCode_Rule('Customer') = 'FA')) then
    SysRouteInsInstruction('Erp', 'INSOL010', ''); // - 100% AOI

  SysRouteInsAddlParameter('Erp', 'Thickness', FormatFloat('0.000', Fnc.SysGetAttrValue('LayupThickness')), '', '', false, '', '', '');
  SysRouteInsAddlParameter('Erp', 'Annular', Fnc.SysGetAttrValue('Annular'), '', '', false, '', '', '');
  SysRouteInsAddlParameter('Erp', 'X Out', Fnc.SysGetAttrValue('X_Out'), '', '', false, '', '', '');

end;

procedure OL_AOI_CM_SD;
begin

  OL_AOI_Common_SD(true);

  if Fnc.SysGetAttrValue('Application') = 'AUTOMOTIVE' then
    SysRouteInsInstruction('Erp', 'INSOL008', ''); //TRACKPAD :100% AOI.
end;

procedure OL_AOI_SD;
begin
  OL_AOI_Common_SD(false);

  case Fnc.SysGetAttrValueTopLevel('Circ_Repair') of
    'INSOL001' : SysRouteInsInstruction('Erp', 'INSOL001', ''); // CIRCUIT REPAIR :REPAIR PER TRACE NOT EXCEEDING 2,BREAKS NOT EXCEEDING 3mm
    'INSOL002' : SysRouteInsInstruction('Erp', 'INSOL002', ''); // CIRCUIT REPAIR :NOT ALLOWED
    'INSOL003' : SysRouteInsInstruction('Erp', 'INSOL003', ''); // CIRCUIT REPAIR :A=3,B=3,SZ=3
    'INSOL004' : SysRouteInsInstruction('Erp', 'INSOL004', ''); // CIRCUIT REPAIR :TRACE WELD MAX 2 PER PCB ADHESIVE TESTCIPC-7M-650 METHOD 2-4.28.1
    'INSOL005' : SysRouteInsInstruction('Erp', 'INSOL005', ''); // CIRCUIT REPAIR :REPAIR TRACE NOT EXCEEDING 3MM,LENGTH NOT EXCEEDING 3MM
    else         ShowMessage('Error!!! : Circuit Repair Value Out of Range');
  end;

  SysRouteInsAddlParameter('Erp', 'Land Area', Fnc.SysGetAttrValue('Land_Area'), '', '', false, '', '', '');
  SysRouteInsAddlParameter('Erp', 'Line Width', Fnc.SysGetAttrValue('Line_Width'), '', '', false, '', '', '');
  SysRouteInsAddlParameter('Erp', 'Min Gap', Fnc.SysGetAttrValue('Min_Gap'), '', '', false, '', '', '');

  if CustCode_Rule('Customer') = 'FA' then
    SysRouteInsInstruction('Erp', 'INSOL030', ''); //REMARK : Sampling cu pad scale measurement smart scope”

  if (
      ((Fnc.SysGetAttrValue('Board_Finish') = 'Immersion Tin') or (ProdCodeLX)) and
      (Fnc.SysGetAttrValue('LayupThickness') <= 3.0)
     )
  then
    SysRouteInsInstruction('Erp', 'IMTIN002', ''); // REMARK: Manual masking of resist alignment pads.”

end;

procedure IL_AOI_OL_ThinPanel_SD;
begin
  OL_AOI_SD;
  SysRouteInsDepartment('Erp', 'INSIL-A', '');
  SysRouteInsWorkCenter('Erp', 'INSIL-A', '');  
end

procedure CO2_LaserCommon_SD(LaserSide : string);
var
  CurrentCuThk : float;
begin
  SysRouteInsDepartment('Erp', 'LASDR-A', '');

  if Fnc.SysGetAttrValue('UEtch_Cu') = 0.0 then
    CurrentCuThk := BaseCuBotUM
  else
    CurrentCuThk := Fnc.SysGetAttrValue('UEtch_Cu');

  if Fnc.SysGetAttrValue('ConfMask_Size') > 150 then
    SysRouteInsWorkCenter('Erp', 'LASDR-A', '')  // 959 Laser MAchine Resource Code 
  else
  begin
    if CurrentCuThk > 18 then
      SysRouteInsWorkCenter('Erp', 'LASDR-A', '')
    else
      SysRouteInsWorkCenter('Erp', 'LASDR-A', '');// 959 Laser MAchine Resource Code 
  end; 

  //SysRouteInsAddlParameter('Erp', 'Stk Height', Fnc.SysGetAttrValue('Laser_StkHt'), '');

  if Fnc.SysGetAttrValue('UEtch_Cu') = 0.0 then
    SysRouteInsAddlParameter('Erp', 'Cu Thickness', IntToStr(CurrentCuThk), '', '', false, '', '', '');
  else
    //SysRouteInsAddlParameter('Erp', 'Micro-Etch Spec', Fnc.SysGetAttrValue('UEtch_Spec'), '', '', false, '', '', '');
    // 1138 Micro Etch for Laser Via
    SysRouteInsAddlParameter('Erp', 'Micro-Etch Spec', Fnc.SysGetAttrValue('UEtch_Cu'), '', '', false, '', '', ''); 

  SysRouteInsInstruction('Erp', 'LASDR017', ''); // 836 - Instruction Code Update

end;

procedure CO2_LaserA_SD;
begin
  CO2_LaserCommon_SD('LaserA');

  SysRouteInsAddlParameter('Erp', 'Bottom Layer', Fnc.SysGetAttrValue('BotLayer'), '', '', false, '', '', '');
  //SysRouteInsAddlParameter('Erp', 'Laser Mat', GetLaseredMaterials(Fnc.SysGetAttrValue('BotLayer')),'');
  SysRouteInsAddlParameter('Erp', 'Laser Hits', Fnc.SysGetAttrValue('LaserABotHits'), '', '', false, '', '', '');
                           
  //SysRouteInsInstruction('', InsertBlindViaDrillDepth('A'), '');
  InsertBlindViaInfo('A');
  //SysRouteInsInstruction('', GetLaseredMaterials(Fnc.SysGetAttrValue('BotLayer')),'');

  //if Fnc.SysGetAttrValue('SViaStp_PadCuThk_A') <> '' then
  //  SysRouteInsAddlParameter('Erp', 'SKIPSTP_TA', Fnc.SysGetAttrValue('SViaStp_PadCuThk_A'), '');

end;

procedure CO2_LaserB_SD;
begin
  CO2_LaserCommon_SD('LaserB');

  SysRouteInsAddlParameter('Erp', 'Top Layer', Fnc.SysGetAttrValue('TopLayer'), '', '', false, '', '', '');
  //SysRouteInsAddlParameter('Erp', 'Laser Mat', GetLaseredMaterials(Fnc.SysGetAttrValue('TopLayer')),'');
  SysRouteInsAddlParameter('Erp', 'Laser Hits', Fnc.SysGetAttrValue('LaserBTopHits'), '', '', false, '', '', '');

  //SysRouteInsInstruction('', InsertBlindViaDrillDepth('B'), '');
  InsertBlindViaInfo('B');

  //SysRouteInsInstruction('', GetLaseredMaterials(Fnc.SysGetAttrValue('TopLayer')),'');

  //if Fnc.SysGetAttrValue('SViaStp_PadCuThk_B') <> '' then
  //  SysRouteInsAddlParameter('Erp', 'SKIPSTP_TB', Fnc.SysGetAttrValue('SViaStp_PadCuThk_B'), '');

end;

procedure Hist_Line_SD;
begin
  SysRouteInsDepartment('Erp', 'HISTL-A', '');                                                            
  SysRouteInsWorkCenter('Erp', 'HISTL-A', '');                                
end;

procedure Dir_LaserCommon;
begin                                         
  SysRouteInsDepartment('Erp', 'LASDR-A', '');
  SysRouteInsWorkCenter('Erp', 'LASDR-A', '');
  SysRouteInsInstruction('Erp', 'LASDR017', '');
end;
                                       
procedure Dir_LaserA_SD;   // 1307 Direct Laser
begin                        
  Dir_LaserCommon;
  SysRouteInsAddlParameter('Erp', 'Bottom Layer', Fnc.SysGetAttrValue('BotLayer'), '', '', false, '', '', '');
  SysRouteInsAddlParameter('Erp', 'Laser Hits', Fnc.SysGetAttrValue('LaserABotHits'), '', '', false, '', '', '');
  InsertBlindViaInfo('A');
  //SysRouteInsAddlParameter('Erp', 'Laser Size', Fnc.SysGetAttrValue('Direct_Laser_Size'), '', '', false, '', '', '');
end;

procedure Dir_LaserB_SD;
begin
  Dir_LaserCommon;
  SysRouteInsAddlParameter('Erp', 'Top Layer', Fnc.SysGetAttrValue('TopLayer'), '', '', false, '', '', '');
  SysRouteInsAddlParameter('Erp', 'Laser Hits', Fnc.SysGetAttrValue('LaserBTopHits'), '', '', false, '', '', '');
  InsertBlindViaInfo('B');     
  //SysRouteInsAddlParameter('Erp', 'Laser Size', Fnc.SysGetAttrValue('Direct_Laser_Size'), '', '', false, '', '', '');
end;

procedure Laser_Insp_SD
begin
  SysRouteInsDepartment('Erp', 'FINAL-A', '');
  SysRouteInsWorkCenter('Erp', 'FINAL-A', '');
end;

procedure Desmear_Std_Attr;
begin
  SysRouteInsAddlParameter('Erp', 'Pre-preg Material', Fnc.SysGetAttrValue('PPGMat'), '', '', false, '', '', '');
  SysRouteInsAddlParameter('Erp', 'Core Material', Fnc.SysGetAttrValue('CoreMat'), '', '', false, '', '', '');

  if Fnc.SysGetAttrValue('LayerCount') > 2 then // 2 Layer Fixes
    SysRouteInsAddlParameter('Erp', 'Thickness', FormatFloat('0.000', Fnc.SysGetAttrValue('Press_Thickness')), '', '', false, '', '', '');
  else
    SysRouteInsAddlParameter('Erp', 'Thickness', FormatFloat('0.000', DSThicknessB4Plating), '', '', false, '', '', '');
end;

procedure Desmear_SD;
var
  Instruction : string;
begin
  SysRouteInsDepartment('Erp', 'DMEAR-A', '');
  SysRouteInsWorkCenter('Erp', 'DMEAR-A', '');

  {Instruction := 'NOTE : MULTIPLE PROCESS STEPS REQUIRED' + #13 +
                  'REFER TO SHOP FLOOR INSTRUCTIONS' + #13 +
                  'FOR ACTUAL DEMSEAR/BAKE/PLASMA STEPS';}
                         
  SysRouteInsInstruction('Erp', 'DMEAR060','');  // 836 Instruction Code Update
  Desmear_Std_Attr;
end;

procedure DeSmear_Params(Rte_Step : string);
var
  j: integer;
  Material: string;
  Thickness: double;
  ParamList: TStringList;
  ParamName: string;
  ParamValue: string;
begin

  if Fnc.SysGetAttrValue('LayerCount') > 2 then // 2 Layer Fixes
    Thickness := Fnc.SysGetAttrValue('Press_Thickness')//Fnc.SysGetAttrValue('LayupThickness');   987 Wrong Desmear Flow
  else
    Thickness := DSThicknessB4Plating;

  Material := GetDesmearSearchMaterial;
  ParamList := GetDesmearStepParameters(Material, Thickness, Rte_Step);

  if ParamList.Count > 0 then
  begin
    //showmessage(ParamList.Strings[j] + #13#13 + ParamList.Text);
    for j := 0 to ParamList.Count - 1 do
    begin
      ParamName := ParamList.Names[j];
      ParamValue := ParamList.Values[ParamName];

      SysRouteInsAddlParameter('Erp', ParamName, ParamValue, '', '', false, '', '', '');

      //showmessage('Name: ' + QuotedStr(ParamName) + ', Value: ' + QuotedStr(ParamValue));
    end;
    ParamList.Free;
  end;
end;

procedure Desmear_Common(Line : string);
begin
  SysRouteInsDepartment('Erp', 'DMEAR-A', '');

  case Line of
    'DM' : begin SysRouteInsWorkCenter('Erp', 'DMEAR-C0', ''); SysRouteInsInstruction('Erp', 'METAL004',''); end;
    'HM' : begin SysRouteInsWorkCenter('Erp', 'DMEAR-A0', ''); end;
  end;

  Desmear_Std_Attr;
end;

procedure Desmear_DM2_SD;
begin
  Desmear_Common('DM');
  DeSmear_Params('DM2');
end;

procedure Desmear_DM2_1_SD;
begin
  Desmear_Common('DM');
  DeSmear_Params('DM2-1');
end;

procedure Desmear_DM2_2_SD;
begin
  Desmear_Common('DM');
  DeSmear_Params('DM2-2');
end;

procedure Desmear_Holl_SD;
begin
  if MechBlindViaSide <> 'None' then    // MEch Blind Vias
    SysRouteInsAddlParameter('Erp', 'Remark', 'With Mech Blind Vias', '', '', false, '', '', '');

  Desmear_Common('HM');
  DeSmear_Params('Hollmuller Desmear');
end;

procedure Desmear_Holl2_1_SD;
begin
  Desmear_Common('HM');
  DeSmear_Params('Hollmuller Desmear2-1');
end;

procedure Desmear_Holl2_2_SD;
begin
  Desmear_Common('HM');
  DeSmear_Params('Hollmuller Desmear2-2');
end;

procedure Desmear_Baking_SD;
begin
  SysRouteInsDepartment('Erp', 'DMBAK-A', '');           
  SysRouteInsWorkCenter('Erp', 'DMBAK-A', '');

  DeSmear_Params('Oven Baking');
end;

procedure Desmear_Baking_2_SD;
begin
  SysRouteInsDepartment('Erp', 'DMBAK-A', '');
  SysRouteInsWorkCenter('Erp', 'DMBAK-A', '');

  DeSmear_Params('Oven Baking2');
end;

procedure Desmear_AlkRinse_SD;
begin
  SysRouteInsDepartment('Erp', 'ARINS-A', '');  // 836 - Instruction Code Update
  SysRouteInsWorkCenter('Erp', 'ARINS-A', '');

  SysRouteInsInstruction('Erp', 'ARINS003',''); // 836 - Instruction Code Update

  //DeSmear_Params('Alkaline Rinse');
end;

procedure Plasma_SD;
begin
  SysRouteInsDepartment('Erp', 'PLASM-A', '');
  SysRouteInsWorkCenter('Erp', 'PLASM-A0', '');
  DeSmear_Params('Plasma');
end;

procedure Plasma_2_SD;
begin       
  SysRouteInsDepartment('Erp', 'PLASM-A', '');
  SysRouteInsWorkCenter('Erp', 'PLASM-A0', '');
  DeSmear_Params('Plasma2');
end;

procedure Plasma_3_SD;
begin       
  SysRouteInsDepartment('Erp', 'PLASM-A', '');
  SysRouteInsWorkCenter('Erp', 'PLASM-A0', '');
                                               
  SysRouteInsAddlParameter('Erp', 'Remark', 'Program 8', '', '', false, '', '', '');

end;

// 978 
procedure Vertical_Desmear_SD;
begin            
 // SysRouteInsDepartment('Erp', 'DMEAR-B0', '');
//  SysRouteInsWorkCenter('Erp', 'DMEAR-B0', '');
  SysRouteInsDepartment('Erp', 'DMEAR-V01', '');
  SysRouteInsWorkCenter('Erp', 'DMEAR-V01', ''); 
  //DeSmear_Params('Vertical Desmear');
end;

procedure Vertical_Desmear_2_SD;
begin
//  SysRouteInsDepartment('Erp', 'DMEAR-B0', '');
//  SysRouteInsWorkCenter('Erp', 'DMEAR-B0', '');
  SysRouteInsDepartment('Erp', 'DMEAR-V01', '');
  SysRouteInsWorkCenter('Erp', 'DMEAR-V01', ''); 
  DeSmear_Params('Vertical Desmear2');
end; 

procedure Desmear_CappedVia_SD;
begin
  //Desmear_Common('HM');
  SysRouteInsDepartment('Erp', 'DMEAR-A', '');
  SysRouteInsWorkCenter('Erp', 'DMEAR-A0', '');
                                

  SysRouteInsAddlParameter('Erp', 'Pre-preg Material', Fnc.SysGetAttrValue('PPGMat'), '', '', false, '', '', '');
  SysRouteInsAddlParameter('Erp', 'Core Material', Fnc.SysGetAttrValue('CoreMat'), '', '', false, '', '', '');

  if Fnc.SysGetAttrValue('LayerCount') > 2 then // 2 Layer Fixes
    SysRouteInsAddlParameter('Erp', 'Thickness', FormatFloat('0.000', Fnc.SysGetAttrValue('LayupThickness')), '', '', false, '', '', '');
  else
    SysRouteInsAddlParameter('Erp', 'Thickness', FormatFloat('0.000', DSThicknessB4Plating), '', '', false, '', '', '');

  // Updated per request from Jenny 09/16/15
  SysRouteInsAddlParameter('Erp', 'Buffing', 'OFF','', '', false, '', '', '');
  SysRouteInsAddlParameter('Erp', 'HP Rinse', 'OFF','', '', false, '', '', '');
  SysRouteInsAddlParameter('Erp', 'Sweller', 'OFF','', '', false, '', '', '');
  SysRouteInsAddlParameter('Erp', 'Promoter / Neutralizer', '3.5m/min','', '', false, '', '', '');

end;
                                                             

procedure CuThinning_SD;
begin
  SysRouteInsDepartment('Erp', 'EPBUF-A', '');
  SysRouteInsWorkCenter('Erp', 'EPBUF-A', '');
  SysRouteInsAddlParameter('Erp', 'Buffing Type', Fnc.SysGetAttrValue('CoreBuildCuThin'), '', '', false, '', '', '');
  SysRouteInsInstruction('Erp', 'ROUTE003', ''); //REMARKS : CLEAR BUFFING.  (From OL Main Flow)
end;

function GetDrillEntrySheet : string;  // 912 Mech Blind Via Entry MAterial
var
  Entry_Sheet_Mode : string;
begin
  result := '';
  Entry_Sheet_Mode := '';

  if (
      ((NCRun <= 1) and (Fnc.SysGetAttrValue('Drill_Entry_Sht') = 'Auto')) or
      ((NCRun = 2) and (Fnc.SysGetAttrValue('Drill_Entry_Sht_2') = 'Auto'))
     )
  then                            
  begin
    if Fnc.SysGetAttrValueTopLevel('Wicking_Max') <> 'None' then
      Entry_Sheet_Mode := 's';
    else if Fnc.SysGetAttrValueTopLevel('Cust_Spec') = '192192' then
      Entry_Sheet_Mode := 'n';
    else
      Entry_Sheet_Mode := 'm';

    if Fnc.SysGetAttrValue('Press_Thickness') > 3.6 then
      Entry_Sheet_Mode := Entry_Sheet_Mode + ';a'
    else
      Entry_Sheet_Mode := Entry_Sheet_Mode + ';l';

    if (( Entry_Sheet_Mode = 'm;l' ) and ( Fnc.SysGetAttrValue('TG_Class') = 'Hybrid' )) then  // CNC Entry Sheet updated Rule (613)
      result := 'LAE1007'
    else
      result := GetCNCEntrySheet(Entry_Sheet_Mode);

    if result = '' then
      ShowMessage('No Entry Sheet Material Found. Check inputs and run again. If inputs are OK, contact Process Engineer for Entry Sheet material and set manually & re-run the rules.');

    // NOTE. Entry Sheet for 2X NC Drill is handled in the table lookup variable. Different factor is the min drill size. 2X NC Drill uses Min_Drill_2
  end
  else  // Use set the Entry Sheet Manually
  begin
    if NCRun <= 1 then
      result := Fnc.SysGetAttrValue('Drill_Entry_Sht')
    else
      result := Fnc.SysGetAttrValue('Drill_Entry_Sht_2')
  end;
end;

function CNC_ManualOverride: boolean;
begin
  result := false;
  if NCRun = 1 then
  begin       
    if Fnc.SysGetAttrValue('Stack_Hgt_Ovr') = true then
    begin
      Fnc.SysSetAttrValue('Stack_Hgt', Fnc.SysGetAttrValue('Stack_Hgt_User'));
      result := true;
    end;

    if Fnc.SysGetAttrValue('Flute_Len_Ovr') = true  then   // 843 Process Override Rule
      Fnc.SysSetAttrValue('Flute_Len', Fnc.SysGetAttrValue('Flute_Len_User'));
  end
  else if NCRun = 2 then         
  begin                                                  
    if Fnc.SysGetAttrValue('Stack_Hgt_2_Ovr') = true then 
    begin
      Fnc.SysSetAttrValue('Stack_Hgt_2', Fnc.SysGetAttrValue('Stack_Hgt_2_User'));
      result := true;
    end;

    if Fnc.SysGetAttrValue('Flute_Len_Ovr_2') = true then  // 843 Process Override Rule
      Fnc.SysSetAttrValue('Flute_Len_2', Fnc.SysGetAttrValue('Flute_Len_2_User'));
  end;
end;


procedure CNC_Drl_StkHght_Flt_Len;
var
  TableName : string;

  PanelThickness :  float;
  PanelNumLayers : integer;

  StackHeight : integer;
  Slot_StackHeight : integer;
  Flute : string;
  Slot_Flute : string;

begin 
  //
  StackHeight := 0;
  Slot_StackHeight := 0;
  Flute := '';
  Slot_Flute := '';

  if Fnc.SysGetAttrValue('Land_Area') <= 0.10 then
  begin
    TableName := 'CNC_Drilling_New_C'; 
    //Stack Height is set to 1 in table search code
  end
  else
    //TableName := 'CNC_Drilling_New_B';  // Table 'A' is now Table 'B' in new flowchart - will look at renamimg these later
    TableName := 'CNC_Drilling_B_1321';  // 1321
    
  PanelThickness := Get_Panel_Thickness;
  PanelNumLayers := Fnc.SysGetAttrValue('LayerCount');

  if not GetCNCDrilling_StackHeight(TableName, Min_Drill, PanelThickness, PanelNumLayers, StackHeight, Flute) then
  begin
    //showmessage('CNC Stack Height ' + TableName + ': search failed'); 
    
    if not CNC_ManualOverride then
    begin                  
      if NCRun = 1 then
      begin          
        Fnc.SysSetAttrValue('Stack_Hgt', 0);
        Fnc.SysSetAttrValue('Flute_Len', '0.0');
        Fnc.UserRouteGenAbort := true;     
      end                         
      else if NCRun = 2 then
      begin   
        Fnc.SysSetAttrValue('Stack_Hgt_2', 0);
        Fnc.SysSetAttrValue('Flute_Len_2', '0.0');
        Fnc.UserRouteGenAbort := true;
      end                    
    end
    else
      MessageDlg('Manual override values used for Stack Height / Flute Length', mtInformation, SetOf([mbOK]), 0); 
    
  end
  else                             
  begin
    //showmessage(TableName + ', StackHeight: ' + IntToStr(StackHeight) + ', Flute: ' + Flute);
    if Min_Slot > 0.0 then
    begin           
      TableName := 'CNC_Drilling_D';

      if not GetCNCDrilling_StackHeight(TableName, Min_Slot, PanelThickness, PanelNumLayers, Slot_StackHeight, Slot_Flute) then
      begin
        showmessage('CNC Slot Stack Height ' + TableName + ': search failed');
        Fnc.SysSetAttrValue('Stack_Hgt', 0);
        Fnc.SysSetAttrValue('Flute_Len', '0.0');
      end
      else
      begin                
        if Slot_StackHeight < StackHeight then
          StackHeight := Slot_StackHeight;
      end;                            
    end;                        

    //Flute_Len := StrToFloat(Copy(Flute, 1, 3));
    
    // 1484 NC Stack height special rule update
    // If Board Thickness is >1.5mm, =/<3.6mm  AND min drill =/<0.25mm AND have BACKDRILL, NC Stack height must be 1
    // Min_Drill, PanelThickness
    if ( PanelThickness > 1.50 ) and
       ( PanelThickness <= 3.60 ) and
       ( Min_Drill <= 0.25 ) and
       ( (Fnc.SysGetAttrValue('BackDrill') ) or (Fnc.SysGetAttrValue('BackDrill_Epoxy')) ) 
    then
      StackHeight := 1;
                                                              
    if Fnc.SysGetAttrValue('NCRunX2') = true then
    begin
      if NCRun = 1 then                   
      begin
        Fnc.SysSetAttrValue('Stack_Hgt', StackHeight);
        Fnc.SysSetAttrValue('Flute_Len', Flute);
      end;
      else             
      begin            
        Fnc.SysSetAttrValue('Stack_Hgt_2', StackHeight);
        Fnc.SysSetAttrValue('Flute_Len_2', Flute);
      end;                
    end
    else           
    begin                     
      Fnc.SysSetAttrValue('Stack_Hgt', StackHeight);
      Fnc.SysSetAttrValue('Flute_Len', Flute);
    end;
    
    // Manual Override
    CNC_ManualOverride;
  end;                                            
end;

procedure NC_Drill_SD;
var
  Entry_Sheet_Mat : string;
  fixedDim: string;
  controlRange: string;
  fixedDim2: string;
  controlRange2: string; 
begin

  NCRun := NCRun + 1;

  if Fnc.SysGetAttrValue('NCRunX2') = true then
  begin
    if NCRun = 1 then
    begin
      Min_Drill := Fnc.SysGetAttrValue('Min_Drill_Size');
      Min_Slot :=  Fnc.SysGetAttrValue('Min_Slot_Size');
    end        
    else
    begin                                                 
      Min_Drill := Fnc.SysGetAttrValue('Min_Drill_Size_2');
      Min_Slot :=  Fnc.SysGetAttrValue('Min_Slot_Size_2');
    end;
  end                        
  else               
  begin
    Min_Drill := Fnc.SysGetAttrValue('Min_Drill_Size');
    Min_Slot :=  Fnc.SysGetAttrValue('Min_Slot_Size');
  end;                                  

  if (
      (Fnc.SysGetAttrValue('Panel_Width') >= 455) or
      (Fnc.SysGetAttrValue('LayerCount') > 10) or
      (Fnc.SysGetAttrValue('Land_Area') < 0.15) or
      (Fnc.SysGetAttrValue('BlindVias') = true) or
      (Fnc.SysGetAttrValue('BuriedVias') = true)
     )
  then
  begin
    SysRouteInsDepartment('Erp', 'DRILL-E', '');
    SysRouteInsWorkCenter('Erp', 'DRILL-E', '');
  end
  else
  // IES has rule for Drill Hits > 9000 but both conditions go to the same
  begin
    SysRouteInsDepartment('Erp', 'DRILL-A', '');
    SysRouteInsWorkCenter('Erp', 'DRILL-A', '');
  end;

  //Stack Height Lookup
  CNC_Drl_StkHght_Flt_Len;


  // 912 Mech Blind Via Entry Material
  Entry_Sheet_Mat := GetDrillEntrySheet;
  
  // 1114 Fixed Scale Factor Info           
  fixedDim := 'X = ' + FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Drill_FSF_X'))) + '%; ' +
              'Y = ' + FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Drill_FSF_Y'))) + '%';
              
  controlRange := 'X = ' + FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Drill_FSF_X') - Fnc.SysGetAttrValue('Drill_FSF_X_Tol'))) + '~' +
                           FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Drill_FSF_X') + Fnc.SysGetAttrValue('Drill_FSF_X_Tol'))) + '%; ' +
                  'Y = ' + FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Drill_FSF_Y') - Fnc.SysGetAttrValue('Drill_FSF_Y_Tol'))) + '~' +
                           FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Drill_FSF_Y') + Fnc.SysGetAttrValue('Drill_FSF_Y_Tol'))) + '%'; 


  // Add Instructions and Parameters
  if Fnc.SysGetAttrValue('NCRunX2') = false then
  begin
    SysRouteInsAddlParameter('Erp', 'Stack Height', Fnc.SysGetAttrValue('Stack_Hgt'), '', '', false, '', '', '');
    SysRouteInsAddlParameter('Erp', 'Flute Length', Fnc.SysGetAttrValue('Flute_Len'), '', '', false, '', '', '');
    SysRouteInsAddlParameter('Erp', 'Min Drill Size', Fnc.SysGetAttrValue('Min_Drill_Size'), '', '', false, '', '', '');
    SysRouteInsAddlParameter('Erp', 'Min Slot Size', Fnc.SysGetAttrValue('Min_Slot_Size'), '', '', false, '', '', '');
    SysRouteInsAddlParameter('Erp', 'Entry Sheet Material', Entry_Sheet_Mat, '', '', false, '', '', '');
    // 1114 Fixed Scale Factor Info
    if Fnc.SysGetAttrValue('Drill_FSF_X') > 0 then
    begin
      SysRouteInsAddlParameter('Erp', 'Fixed Scale Factor', fixedDim, '', '', false, '', '', '');
      SysRouteInsAddlParameter('Erp', 'Control Range', controlRange, '', '', false, '', '', '');
    end;
    
    // 1259 Addition Attributes for NC        
    //if (Fnc.SysGetAttrValue('Drill_Offset_X') <> 0 ) or (Fnc.SysGetAttrValue('Drill_Offset_Y') <> 0 ) then
    //begin
      if Fnc.SysGetAttrValue('Drill_Offset_X') <> 0 then
        SysRouteInsAddlParameter('Erp', 'Offset X', FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Drill_Offset_X'))), '', '', false, '', '', '');
      if Fnc.SysGetAttrValue('Drill_Offset_Y') <> 0 then
        SysRouteInsAddlParameter('Erp', 'Offset Y', FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Drill_Offset_Y'))), '', '', false, '', '', '');
    //end;
    
    // 1134 Additional Information    
    Fnc.SysSetAttrValue('NC_Drill_1_EntryMat', Entry_Sheet_Mat);
  end
  else               
  begin                    
    if NCRun = 1 then
    begin
      SysRouteInsAddlParameter('Erp', 'Stack Height', Fnc.SysGetAttrValue('Stack_Hgt'), '', '', false, '', '', '');
      SysRouteInsAddlParameter('Erp', 'Flute Length', Fnc.SysGetAttrValue('Flute_Len'), '', '', false, '', '', '');
      SysRouteInsAddlParameter('Erp', 'Min Drill Size', Fnc.SysGetAttrValue('Min_Drill_Size'), '', '', false, '', '', '');
      SysRouteInsAddlParameter('Erp', 'Min Slot Size', Fnc.SysGetAttrValue('Min_Slot_Size'), '', '', false, '', '', '');
      SysRouteInsAddlParameter('Erp', 'Entry Sheet Mat', Entry_Sheet_Mat, '', '', false, '', '', '');
      SysRouteInsInstruction('Erp', 'DRILL010', '');  // REMARK : 1st Drilling
      SysRouteInsInstruction('Erp', '2NC_PESHET', ''); // REMARK: Put PE Sheet In Between Panel
      // 1114 Fixed Scale Factor Info
      if Fnc.SysGetAttrValue('Drill_FSF_X') > 0 then
      begin
        SysRouteInsAddlParameter('Erp', 'Fixed Scale Factor', fixedDim, '', '', false, '', '', '');
        SysRouteInsAddlParameter('Erp', 'Control Range', controlRange, '', '', false, '', '', '');
      end;
                                                      
      // 1259 Addition Attributes for NC
      //if (Fnc.SysGetAttrValue('Drill_Offset_X') <> 0 ) or (Fnc.SysGetAttrValue('Drill_Offset_Y') <> 0 ) then
      //begin
        if Fnc.SysGetAttrValue('Drill_Offset_X') <> 0 then
          SysRouteInsAddlParameter('Erp', 'Offset X', FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Drill_Offset_X'))), '', '', false, '', '', '');
        if Fnc.SysGetAttrValue('Drill_Offset_Y') <> 0 then
        SysRouteInsAddlParameter('Erp', 'Offset Y', FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Drill_Offset_Y'))), '', '', false, '', '', '');
      //end;
      
      // 1134 Additional Information
      Fnc.SysSetAttrValue('NC_Drill_1_EntryMat', Entry_Sheet_Mat);
    end
    else if NCRun = 2 then
    begin
      SysRouteInsAddlParameter('Erp', '2nd Stack Height', Fnc.SysGetAttrValue('Stack_Hgt_2'), '', '', false, '', '', '');
      SysRouteInsAddlParameter('Erp', '2nd Flute Length', Fnc.SysGetAttrValue('Flute_Len_2'), '', '', false, '', '', '');
      SysRouteInsAddlParameter('Erp', '2nd Min Drill Size', Fnc.SysGetAttrValue('Min_Drill_Size_2'), '', '', false, '', '', '');
      SysRouteInsAddlParameter('Erp', '2nd Min Slot Size', Fnc.SysGetAttrValue('Min_Slot_Size_2'), '', '', false, '', '', '');
      SysRouteInsAddlParameter('Erp', '2nd Entry Sheet Mat', Entry_Sheet_Mat, '', '', false, '', '', '');
      SysRouteInsInstruction('Erp', 'DRILL009', '');  // REMARK : 2nd Drilling
      // 1114 Fixed Scale Factor Info
      if Fnc.SysGetAttrValue('Drill_FSF_X_2') > 0 then
      begin
        fixedDim2 := 'X = ' + FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Drill_FSF_X_2'))) + '%; ' +
                     'Y = ' + FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Drill_FSF_Y_2'))) + '%';
                                                                                             
        controlRange2 := 'X = ' + FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Drill_FSF_X_2') - Fnc.SysGetAttrValue('Drill_FSF_X_Tol_2'))) + '~' +
                                  FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Drill_FSF_X_2') + Fnc.SysGetAttrValue('Drill_FSF_X_Tol_2'))) + '%; ' +
                         'Y = ' + FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Drill_FSF_Y_2') - Fnc.SysGetAttrValue('Drill_FSF_Y_Tol_2'))) + '~' +
                                  FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Drill_FSF_Y_2') + Fnc.SysGetAttrValue('Drill_FSF_Y_Tol_2'))) + '%';
                                  
        SysRouteInsAddlParameter('Erp', 'Fixed Scale Factor', fixedDim2, '', '', false, '', '', '');
        SysRouteInsAddlParameter('Erp', 'Control Range', controlRange2, '', '', false, '', '', '');
      end;
      
      // 1259 Addition Attributes for NC
      //if (Fnc.SysGetAttrValue('Drill_Offset_X_2') <> 0 ) or (Fnc.SysGetAttrValue('Drill_Offset_Y_2') <> 0 ) then
      //begin
        if Fnc.SysGetAttrValue('Drill_Offset_X_2') <> 0 then
          SysRouteInsAddlParameter('Erp', 'Offset X', FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Drill_Offset_X_2'))), '', '', false, '', '', '');
        if Fnc.SysGetAttrValue('Drill_Offset_Y_2') <> 0 then
          SysRouteInsAddlParameter('Erp', 'Offset Y', FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Drill_Offset_Y_2'))), '', '', false, '', '', '');
      //end; 
      
      // 1134 Additional Information
      Fnc.SysSetAttrValue('NC_Drill_1_EntryMat', Fnc.SysGetAttrValue('NC_Drill_1_EntryMat') + '/' + Entry_Sheet_Mat); 
    end;                                                                                                 
  end;

  SysRouteInsAddlParameter('Erp', 'Material Tg', GetMatTgValue, '', '', false, '', '', '');
  SysRouteInsAddlParameter('Erp', 'Thickness', FormatFloat('0.000', Get_Panel_Thickness), '', '', false, '', '', '');

  if CustCode_Rule('Customer') = 'GM' then
    SysRouteInsInstruction('Erp', 'DRILL002', ''); //REMARK : 100% Hole Check

  if Fnc.SysGetAttrValue('No_Scale_Adj') then
    SysRouteInsInstruction('Erp', 'DRILL016', ''); // No NC Scaling allowed for X/Y

  if (
      ((pos('N4000-13', Fnc.SysGetAttrValue('PPGMat')) > 0) or (pos('N4000-13', Fnc.SysGetAttrValue('CoreMat')) > 0))
      and                               
      (Eng_JobType = 'Sample')//BOM CODE W or S = Sample
     )
  then          
    SysRouteInsInstruction('Erp', 'DRILL012', ''); // New N-13 Drilling Condition

  if ((CustCode_Rule('Customer') = 'FA') and (Fnc.SysGetAttrValue('KK_Distance') = 502)) then
  begin
    SysRouteInsInstruction('Erp', 'DRILL046', ''); // REMARK : Check for KK offset
    SysRouteInsInstruction('Erp', 'FINIL028', ''); // REMARK : Distance from panel edge to K point : 127.26mm
  end;

  SysRouteInsAddlParameter('Erp', 'Drill Side', DrillSide(Fnc.SysGetAttrValue('Drill_Side')), '', '', false, '', '', '');

  if HasFaradflexMat then                                    // Faradflex drill instruction
    SysRouteInsInstruction('Erp', 'DRILL076', ''); // 836 Instruction Code Update
end;

procedure InsertPressFitRemarks;
var
  pressFitSpec1 : string;
  pressFitSpec2 : string;
  pressFitSpec3 : string;
begin
  SysRouteInsAddlParameter('Erp', 'Remark', 'With Tight Press Fit Tolerance', '', '', false, '', '', '');

  pressFitSpec1 := Fnc.SysGetAttrValue('Tight_PressFit_Spec');
  pressFitSpec2 := Fnc.SysGetAttrValue('Tight_PressFit_Spec_2');
  pressFitSpec3 := Fnc.SysGetAttrValue('Tight_PressFit_Spec_3');

  if pressFitSpec1 <> '' then
    SysRouteInsAddlParameter('Erp', 'Press Fit Spec 1', pressFitSpec1, '', '', false, '', '', '');

  if pressFitSpec2 <> '' then
    SysRouteInsAddlParameter('Erp', 'Press Fit Spec 2', pressFitSpec2, '', '', false, '', '', '');

  if pressFitSpec3 <> '' then
    SysRouteInsAddlParameter('Erp', 'Press Fit Spec 3', pressFitSpec3, '', '', false, '', '', '');


end;

procedure CuHoleCheck_SD;
begin
  SysRouteInsDepartment('Erp', 'HOLCP-A', '');
  SysRouteInsWorkCenter('Erp', 'HOLCP-A', '');

  if Fnc.SysGetAttrValue('Tight_PressFit_Tol') = true then  // 795 Tight Press Fit Tolerance rule
    begin
      if Fnc.SysGetAttrValue('NCRunX2') = true then
      begin
        if NCRun = 2 then
          InsertPressFitRemarks;
      end
      else
        InsertPressFitRemarks;
    end;
end;

procedure PLCountersink_SD;
begin
  SysRouteInsDepartment('Erp', 'ROUTE-D0', '');
  SysRouteInsWorkCenter('Erp', 'ROUTE-D0', '');

  SysRouteInsAddlParameter('Erp', 'Press Thickness', FormatFloat('0.000', Fnc.SysGetAttrValue('Press_Thickness')), '', '', false, '', '', '');
  SysRouteInsAddlParameter('Erp', 'Angle', Fnc.SysGetAttrValue('CSAnglePL'), '', '', false, '', '', '');
  
  // 1191 Drill Side for Countersink/bore & milling 
  SysRouteInsAddlParameter('Erp', 'Drill Side', DrillSide(Fnc.SysGetAttrValue('PLCountersink_Side')), '', '', false, '', '', '');
end;

procedure NPCountersink_SD;
begin
  SysRouteInsDepartment('Erp', 'ROUTE-D0', '');
  SysRouteInsWorkCenter('Erp', 'ROUTE-D0', '');

  // 1113 Thickness is incorrect
  SysRouteInsAddlParameter('Erp', 'Thickness', FormatFloat('0.000', ThicknessOverMask), '', '', false, '', '', '');
  SysRouteInsAddlParameter('Erp', 'Angle', Fnc.SysGetAttrValue('CSAngleNP'), '', '', false, '', '', '');
  
  // 1191 Drill Side for Countersink/bore & milling 
  SysRouteInsAddlParameter('Erp', 'Drill Side', DrillSide(Fnc.SysGetAttrValue('NPCountersink_Side')), '', '', false, '', '', '');
end;

procedure EdgePlateRoute_SD;
begin                                                   
  SysRouteInsDepartment('Erp', 'ROUTE-A', '');
  SysRouteInsWorkCenter('Erp', 'ROUTE-A', '');
                   
  // 793 Update Photo process
  //SysRouteInsInstruction('Erp', 'ROUTE003', ''); // REMARKS : PANEL STACK HEIGHT REFER TO PE

  // SUNK TYPE Route Step Parameter omitted - Step Name will tell operators what the process is.
end;

procedure WashingStd_SD;
begin
  SysRouteInsDepartment('Erp', 'WASHS-A', '');
  SysRouteInsWorkCenter('Erp', 'WASHS-A', '');
end;

procedure PostNCBaking_SD;
begin
  SysRouteInsDepartment('Erp', 'DMBAK-A', '');
  SysRouteInsWorkCenter('Erp', 'DMBAK-A', '');

  if Baking_Mtl = 'FR408HR' then
    SysRouteInsInstruction('Erp', 'BAKE_002', ''); // REMARK: 180 Degree C, 2 hours

  SysRouteInsAddlParameter('Erp', 'Bake Reason', Baking_Mtl, '', '', false, '', '', '');
end;

procedure Electroless_SD;
var
  Min_Drill : float;
  epoxyThinningG7 : boolean;
  AspectRatio: float;
begin
  SysRouteInsDepartment('Erp', 'METAL-C', '');
  
  Min_Drill := 0.0;
  epoxyThinningG7 := false;
                
  if ( Fnc.SysGetAttrValue('EpoxyPlug_CuThin_Process') <> 'None' ) and ( Fnc.SysGetAttrValue('EpoxyPlug_CuThin_Process') <> 'Buffing' ) then
    epoxyThinningG7 := true; 

  if NCRun = 1 then     
  begin
    Min_Drill := Fnc.SysGetAttrValue('Min_Drill_Size');
   // Min_Slot :=  Fnc.SysGetAttrValue('Min_Slot_Size');
   AspectRatio := Fnc.SysGetAttrValue('Aspect_Ratio_Val');  // 1569  Correction of V1/V2 rule for Job with 2x NC 
                         
  end
  else          
  begin                       
    Min_Drill := Fnc.SysGetAttrValue('Min_Drill_Size_2'); 
  //  Min_Slot :=  Fnc.SysGetAttrValue('Min_Slot_Size_2');
    AspectRatio := Fnc.SysGetAttrValue('Aspect_Ratio_Val_2'); // 1569  Correction of V1/V2 rule for Job with 2x NC 
  end;   
  
                                      
  if (( Get_Panel_Thickness >= 3.2 ) and ( Min_Drill <= 0.25 )) or ( AspectRatio > 12.8)  // 1462
  {(  // 978 Updated Cu Rule - Metalization
      (( Get_Panel_Thickness >= 3.2 ) and ( Min_Drill <= 0.25 )) or
      //( Fnc.SysGetAttrValue('Seq_Build') = true ) or  1306 Updated Electroless Plating Rule 
      //( SubParentIsSequential ) or
      //(( Fnc.SysGetAttrValue('EpoxySide') <> 'None') and ( epoxyThinningG7 )) 
     )}
  then
  begin
                                          
    if LaserG30KMechOrSkipBVH then
      SysRouteInsAddlParameter('Erp', 'Remark', 'On-Line Vacuum', '', '', false, '', '', ''); 
      
    SysRouteInsWorkCenter('Erp', 'METAL-D0', '');
    SysRouteInsAddlParameter('Erp', 'VELCP Line', 'V2 Only', '', '', false, '', '', '');
  end
  else
  begin                                                            
  
    //if LaserG30KMechOrSkipBVH then      1204 Updated Desmear Flow
    //  SysRouteInsAddlParameter('Erp', 'Remark', 'Off-Line Vacuum', '', '', false, '', '', ''); 
      
    SysRouteInsWorkCenter('Erp', 'METAL-C0', '');
    SysRouteInsAddlParameter('Erp', 'VELCP Line', 'V1 or V2', '', '', false, '', '', '');
  end 
           
                                              
  if Fnc.SysGetAttrValue('CuFilledVias') = true then
  begin
    SysRouteInsWorkCenter('Erp', 'METAL-D0', '')
    SysRouteInsInstruction('Erp', 'METAL016', ''); //REMARK: VIA TYPE : FILLED VIA.
    // Note, as is this conditions will apply to all electroless steps for a Fill Via board - verify this is correct (also for Electrolytic Cu)     0
   // ShowMessage('For 3EPCB Only : Verify with HCS that Special Via Fill Production Resource will also be used for 2X NC Epoxy Fill Electroless Step');
  end                       
  else
  begin
    if CustCode_Rule('Customer') = 'FA' then
      SysRouteInsWorkCenter('Erp', 'METAL-C0', '') 
    else
      SysRouteInsWorkCenter('Erp', 'METAL-C', '');
  end;

  SysRouteInsAddlParameter('Erp', 'Pre-preg Material', Fnc.SysGetAttrValue('PPGMat'), '', '', false, '', '', '');
  SysRouteInsAddlParameter('Erp', 'Core Material', Fnc.SysGetAttrValue('CoreMat'), '', '', false, '', '', '');

  if Fnc.SysGetAttrValue('LayerCount') > 2 then // 2 Layer Fixes
    SysRouteInsAddlParameter('Erp', 'Thickness', FormatFloat('0.000', Fnc.SysGetAttrValue('Press_Thickness')), '', '', false, '', '', '');
  else
    SysRouteInsAddlParameter('Erp', 'Thickness', FormatFloat('0.000', DSThicknessB4Plating), '', '', false, '', '', ''); 
  

  SysRouteInsAddlParameter('Erp', 'Min Drill Size', Min_Drill, '', '', false, '', '', '');

  if ( MechBlindViaSide <> 'None' ) and ( NCRun = 1 ) then    // MEch Blind Vias 1356 
    SysRouteInsAddlParameter('Erp', 'Remark', 'With Mech Blind Vias', '', '', false, '', '', '');
    
  // 1107 Additional Run Card info - Note sequential build
  if ( Fnc.SysGetAttrValue('Seq_Build') = true ) or ( SubParentIsSequential ) then 
    SysRouteInsAddlParameter('Erp', 'Remark', 'Sequential Build', '', '', false, '', '', ''); 
end;

procedure Electroless_CappedVia_SD;
var                  
  epoxyThinningG7 : boolean;
begin
  SysRouteInsDepartment('Erp', 'METAL-C', '');
  SysRouteInsWorkCenter('Erp', 'METAL-C', '');
  
  epoxyThinningG7 := false;                            
  
  if ( Fnc.SysGetAttrValue('EpoxyPlug_CuThin_Process') <> 'None' ) and ( Fnc.SysGetAttrValue('EpoxyPlug_CuThin_Process') <> 'Buffing' ) then
    epoxyThinningG7 := true; 
  
  if (( Get_Panel_Thickness >= 3.2 ) and ( Min_Drill <= 0.25 )) or (Fnc.SysGetAttrValue('Aspect_Ratio_Val') > 12.8)  // 1462
    {(  // 978 Updated Cu Rule - Metalization
      (( Get_Panel_Thickness >= 3.2 ) and ( Min_Drill <= 0.25 )) or
      //( Fnc.SysGetAttrValue('Seq_Build') = true ) or 1306 Updated Electroless Plating Rule  
      //( SubParentIsSequential ) or
      (( Fnc.SysGetAttrValue('EpoxySide') <> 'None') and ( epoxyThinningG7 ))
     )}
  then
  begin             
                                                      
   // if LaserG30KMechOrSkipBVH then
   //   SysRouteInsAddlParameter('Erp', 'Remark', 'On-Line Vacuum', '', '', false, '', '', ''); 
                              
    SysRouteInsWorkCenter('Erp', 'METAL-D0', '');            
    //SysRouteInsAddlParameter('Erp', 'VELCP Line', 'V2 Only', '', '', false, '', '', '');
    SysRouteInsAddlParameter('Erp', 'VELCP Line', 'V1 or V2', '', '', false, '', '', '');   // 1462
  end            
  else 
  begin
                        
    //if LaserG30KMechOrSkipBVH then  Note required for Capped Via OneDesk 1087
    //  SysRouteInsAddlParameter('Erp', 'Remark', 'Off-Line Vacuum', '', '', false, '', '', ''); 
      
    SysRouteInsWorkCenter('Erp', 'METAL-C0', '');
    SysRouteInsAddlParameter('Erp', 'VELCP Line', 'V1 or V2', '', '', false, '', '', ''); 
  end;
  
  // 1107 Additional Run Card info - Note sequential build
  if Fnc.SysGetAttrValueTopLevel('Seq_Build') = true then
    SysRouteInsAddlParameter('Erp', 'Remark', 'Sequential Build', '', '', false, '', '', ''); 
end;         

procedure Strike_Plating_SD; // 978 Updated Cu Rule - Metalization 
begin
  SysRouteInsDepartment('Erp', 'COPPL-C', '');
  
  if (( Get_Panel_Thickness <= 1.0 ) or ( Get_Panel_Thickness >= 3.5 )) then
  begin                    
    SysRouteInsWorkCenter('Erp', 'COPPL-C22', '');
    SysRouteInsAddlParameter('Erp', 'Plating Line:', 'PAL6', '', '', false, '', '', ''); 
  end                                                    
  else
  begin                                   
    SysRouteInsWorkCenter('Erp', 'COPPL-C1', '');
    SysRouteInsAddlParameter('Erp', 'Plating Line:', 'PAL4', '', '', false, '', '', ''); 
  end;
end;                                   

procedure Electroless_SP_SD; // 978 Updated Cu Rule - Metalization 
begin                                 
  SysRouteInsDepartment('Erp', 'METAL-D0', '');
  SysRouteInsWorkCenter('Erp', 'METAL-D0', '');
  SysRouteInsAddlParameter('Erp', 'VELCP Line:', 'V2 Only', '', '', false, '', '', '');
  SysRouteInsAddlParameter('Erp', 'Remark', 'On-Line Vacuum', '', '', false, '', '', '');
  SysRouteInsAddlParameter('Erp', 'Remark', 'Use Strike Condition', '', '', false, '', '', '');
  
  // 1107 Additional Run Card info - Note sequential build
  if ( Fnc.SysGetAttrValue('Seq_Build') = true ) or ( SubParentIsSequential ) then 
    SysRouteInsAddlParameter('Erp', 'Remark', 'Sequential Build', '', '', false, '', '', '');
end;   

function MCP_CU_THK_Validate_TargetThickness(CuPlating_MCP: TSysTable; aFilter: string): string;
var
  Options: TStringList;
  ValidValues: string;
begin
  Result := '';

  CuPlating_MCP.Filtered := False;
  CuPlating_MCP.Filter := aFilter;
  CuPlating_MCP.Filtered := True;

  if CuPlating_MCP.isEmpty then
  begin
    CuPlating_MCP.Filtered := False;

    Options := TStringList.Create;

    CuPlating_MCP.SortFields := 'ThicknessTargetAve';
    CuPlating_MCP.SortDefault;

    CuPlating_MCP.First;
    while not CuPlating_MCP.Eof do
    begin
      if Options.IndexOf(CuPlating_MCP.FieldByName('ThicknessTargetAve').AsString) < 0 then
        Options.Add(CuPlating_MCP.FieldByName('ThicknessTargetAve').AsString);
      CuPlating_MCP.Next;
    end;

    ValidValues := StringReplace(Options.Text, #13, ' ,', SetOf([rfReplaceAll]));
    ValidValues := StringReplace(ValidValues, #10, '', SetOf([rfReplaceAll]));
    Result := 'Valid values for "ThicknessTargetAve": ' + ValidValues;

    Options.Clear;
    CuPlating_MCP.SortFields := 'ThicknessTargetAbs';
    CuPlating_MCP.SortDefault;

    CuPlating_MCP.First;
    while not CuPlating_MCP.Eof do
    begin
      if Options.IndexOf(CuPlating_MCP.FieldByName('ThicknessTargetAbs').AsString) < 0 then
        Options.Add(CuPlating_MCP.FieldByName('ThicknessTargetAbs').AsString);
      CuPlating_MCP.Next;
    end;

    ValidValues := StringReplace(Options.Text, #13, ' ,', SetOf([rfReplaceAll]));
    ValidValues := StringReplace(ValidValues, #10, '', SetOf([rfReplaceAll]));
    Result := Result + #13 + 'Valid values for "ThicknessTargetAbs": ' + ValidValues;

    Options.Free;

    CuPlating_MCP.SortFields := '';
    CuPlating_MCP.SortDefault;
  end;

  CuPlating_MCP.Filtered := False;
end;

function MCP_CU_THK_Validate_BoardThickness(CuPlating_MCP: TSysTable; Filter1: string; Filter2: string): string;
var
  tMin: double;
  tMax: double;
begin
  Result := '';

  CuPlating_MCP.Filtered := False;
  CuPlating_MCP.Filter := Filter1 + Filter2;
  CuPlating_MCP.Filtered := True;

  if CuPlating_MCP.isEmpty then
  begin
    tMin := 999999;
    tMax := -99999;

    CuPlating_MCP.Filtered := False;
    CuPlating_MCP.Filter := Filter1;
    CuPlating_MCP.Filtered := True;

    CuPlating_MCP.First;
    while not CuPlating_MCP.Eof do
    begin
      if tMin > CuPlating_MCP.FieldByName('ThicknessMin').AsFloat then
        tMin := CuPlating_MCP.FieldByName('ThicknessMin').AsFloat;

      if tMax < CuPlating_MCP.FieldByName('ThicknessMax').AsFloat then
        tMax := CuPlating_MCP.FieldByName('ThicknessMax').AsFloat;

      CuPlating_MCP.Next;
    end;

    Result := 'Board thickness has to be > ' + FloatToStr(tMin) + ' and < ' + FloatToStr(tMax);
  end;

  CuPlating_MCP.Filtered := False;
  CuPlating_MCP.Filter := '';
end;

function MCP_CU_THK: string;
var
  errMsg: string;
  Filter1: string;
  Filter2: string;
  NC_Thickness: string;
  CuPlating_MCP: TSysTable;
begin
  Result := ''
  errMsg := '';

  CuPlating_MCP := Fnc.CustomTableGet('CuPlating_MCP_P3_FV');  // 1086 Updated Cu Platin Rule
  Filter1 := '';
  Filter2 := '';                        

  GLB_Ave_CuThk := 0.0;
  GLB_TGT_Ave_Hole_CuThk := Round(GLB_TGT_Ave_Hole_CuThk * 2 / 10) * 5;

  if (GLB_TGT_Abs_HOLE_CuThk > 11) and (GLB_TGT_Abs_HOLE_CuThk < 13.5) then
    GLB_TGT_Abs_HOLE_CuThk := 12
  else if (GLB_TGT_Abs_HOLE_CuThk >= 13.5) and (GLB_TGT_Abs_HOLE_CuThk < 16.5) then
    GLB_TGT_Abs_HOLE_CuThk := 15
  else if (GLB_TGT_Abs_HOLE_CuThk >= 16.5) and (GLB_TGT_Abs_HOLE_CuThk < 19) then
    GLB_TGT_Abs_HOLE_CuThk := 18               
  else if (GLB_TGT_Abs_HOLE_CuThk >= 19) and (GLB_TGT_Abs_HOLE_CuThk < 22.5) then
    GLB_TGT_Abs_HOLE_CuThk := 20
  else if (GLB_TGT_Abs_HOLE_CuThk >= 22.5) and (GLB_TGT_Abs_HOLE_CuThk < 27.5) then
    GLB_TGT_Abs_HOLE_CuThk := 25;

  if GLB_TGT_Ave_Hole_CuThk > 0 then
  begin
    GLB_TGT_Ave_Hole_CuThk := Trunc(GLB_TGT_Ave_Hole_CuThk);
    Filter1 := Format('([ThicknessTargetAve] = %s)', ([IntToStr(GLB_TGT_Ave_Hole_CuThk)]));
  end
  else
  begin
    GLB_TGT_Abs_Hole_CuThk := Trunc(GLB_TGT_Abs_Hole_CuThk);
    Filter1 := Format('([ThicknessTargetAbs] = %s)', ([IntToStr(GLB_TGT_Abs_Hole_CuThk)]));
  end;

  if Fnc.SysGetAttrValue('LayerCount') > 2 then // 2 Layer Fixes
    NC_Thickness := FloatToStr(Fnc.SysGetAttrValue('Press_Thickness'));
  else
    NC_Thickness := FloatToStr(DSThicknessB4Plating);

  Filter2 := Format(' and ([ThicknessMin] < %s) and (%s <= [ThicknessMax] )', ([NC_Thickness, NC_Thickness]));
  
  //ShowMEssage(Filter1 + ' | ' + Filter2);

  errMsg := MCP_CU_THK_Validate_TargetThickness(CuPlating_MCP, Filter1);
  if errMsg = '' then                       
    errMsg := MCP_CU_THK_Validate_BoardThickness(CuPlating_MCP, Filter1, Filter2);

  if errMsg = '' then
  begin
    CuPlating_MCP.Filtered := False;
    CuPlating_MCP.Filter := Filter1 + Filter2;
    CuPlating_MCP.Filtered := True;

    if not CuPlating_MCP.isEmpty then
    begin
      CuPlating_MCP.First; 
      //Fnc.OpenDataGrid(CuPlating_MCP);
      GLB_Ave_CuThk := CuPlating_MCP.FieldByName('ThicknessSurfacePlated').AsInteger;
    end;
  end;

  GLB_Abs_CuThk := GLB_Ave_CuThk;

  // cleanup
  CuPlating_MCP.Filtered := False;
  CuPlating_MCP.Filter := '';
                                           
  CuPlating_MCP.SortFields := '';
  CuPlating_MCP.SortDefault;
                
  if GLB_Ave_CuThk = 0 then
  begin
    errMsg := 'Failed to set Surface Plating Thickness "GLB_Abs_CuThk" from Table CuPlating_MCP' + #13#13 + errMsg;
    MessageDlg(errMsg, mtWarning, SetOf([mbCancel]), 0);
  end;
end;                     

procedure GetCuPlat_RPLS;
var 
  aFilter: string;
  laser: string;
  CuPlating_RPLS: TSysTable;
  MinDrillSize: float;
begin          
  laser := 'No';

  if Fnc.SysGetAttrValue('LayerCount') > 2 then
    GLB_NC_Thickness := Fnc.SysGetAttrValue('Press_Thickness')
  else
    GLB_NC_Thickness := Fnc.SysGetAttrValue('LayupThickness');
    
  if NCRUN = 1 then
    GLB_Cur_Cu_Ratio := Fnc.SysGetAttrValue('Cu_Ratio')
  else if NCRUN = 2 then                            
    GLB_Cur_Cu_Ratio := Fnc.SysGetAttrValue('Cu_Ratio_2');
    
  if NCRUN = 1 then  
  begin                   
    if Fnc.SysGetAttrValue('LaserBTopHits') + Fnc.SysGetAttrValue('LaserABotHits') + 
       Fnc.SysGetAttrValue('UVLaserB_Top') + Fnc.SysGetAttrValue('UVLaserA_Bot') > 0 
    then    
      laser := 'Yes';        
  end;
  
  // 1467
  if NCRUN = 1 then
    MinDrillSize := Fnc.SysGetAttrValue('Min_Drill_Size')
  else
    MinDrillSize := Fnc.SysGetAttrValue('Min_Drill_Size_2')
                                                      
  aFilter := '     ([LaserVia] = ' + QuotedStr(laser) + ')' 
           + Format(' and ([CuRatioMin] <= %s)', ([IntToStr(GLB_Cur_Cu_Ratio)]))
           + Format(' and ([CuRatioMax] > %s)', ([IntToStr(Trunc(GLB_Cur_Cu_Ratio))]))
           + Format(' and ([BoardThicknessMin] <= %s)', ([FloatToStr(GLB_NC_Thickness)]))
           + Format(' and ([BoardThicknessMax] > %s)', ([FloatToStr(GLB_NC_Thickness)]));
             
  //ShowMessage(aFilter);

  CuPlating_RPLS := Fnc.CustomTableGet('CuPlating_RPLS_1467'); // 1467
                                
  CuPlating_RPLS.Filtered := False;   
  CuPlating_RPLS.Filter := aFilter;
  CuPlating_RPLS.Filtered := True;                
                                  
  //Fnc.OpenDataGrid(CuPlating_RPLS);
                           
  if not CuPlating_RPLS.isEmpty then
  begin                  
    CuPlating_RPLS.First;
    if MinDrillSize <= 0.3 then
      GLB_Ave_CuThk := CuPlating_RPLS.FieldByName('ThicknessSurfacePlated').AsFloat
    else       
      GLB_Ave_CuThk := CuPlating_RPLS.FieldByName('ThicknessSurfacePlated2').AsFloat
  end;

  GLB_Abs_CuThk := GLB_Ave_CuThk;
  //ShowMessage(FloatToStr(MinDrillSize) + '|' + FloatToStr(GLB_Ave_CuThk));
  // cleanup
  CuPlating_RPLS.Filtered := False;             
  CuPlating_RPLS.Filter := '';

  if GLB_Ave_CuThk = 0 then
  begin
    MessageDlg('Failed to set Surface Plating Thickness "GLB_Ave_CuThk" from Table CuPlating_RPLS' + #13#13 + 'Filter: ' + aFilter, mtWarning, SetOf([mbCancel]), 0);
  end;
end;

procedure InsertViaTypeAttributes;
begin
  if ((Fnc.SysGetAttrValue('BlindVias') = true) and (Fnc.SysGetAttrValue('BuriedVias') = true)) then
    SysRouteInsAddlParameter('Erp','Via Type', 'Both Vias','','', false, '', '', '');
  else if Fnc.SysGetAttrValue('BuriedVias') = false then
    SysRouteInsAddlParameter('Erp','Via Type', 'Blind Vias','','', false, '', '', '');
end;

procedure InsertBlindViaAttributes;
begin
  SysRouteInsAddlParameter('Erp','Avg Min Blind', Fnc.SysGetAttrValue('Ave_Min_Bl'),'','', false, '', '', '');
  SysRouteInsAddlParameter('Erp','Abs Min Blind', Fnc.SysGetAttrValue('Abs_Min_Bl'),'','', false, '', '', '');

  InserBlindViaDepthAspect;

  SysRouteInsAddlParameter('Erp','Conf. Mask Size', Fnc.SysGetAttrValue('ConfMask_Size'),'','', false, '', '', '');

  if Fnc.SysGetAttrValue('ConfMask_Size_Skip') > 0 then
    SysRouteInsAddlParameter('Erp','Conf. Mask Size - Skip', Fnc.SysGetAttrValue('ConfMask_Size_Skip'),'','', false, '', '', '');

  SysRouteInsAddlParameter('Erp','Thickness Before Plate', FormatFloat('0.000', Fnc.SysGetAttrValue('Press_Thickness')),'','', false, '', '', '');
end;

procedure CalcAndInsert_DECUTHK(UseF_ : boolean; NCRun : integer; process : string);  // (364) Surface Cu thickness calculation correction
var
  TempVar     : float;
  TempVarI    : integer;
  TempVarI_min : integer;
  TempVarI_max : integer;
  vDE_Cu_Thk : string;

  Surface_Add : float;

begin
  TempVar     := 0.0;
  TempVarI    := 0;
  TempVarI_min    := 0;
  TempVarI_max    := 0;
  vDE_Cu_Thk  := '';
                       
  if Fnc.SysGetAttrValue('UEtch_Cu') > 0 then
    Fnc.SysSetAttrValue('Down_Etch_Cu', Fnc.SysGetAttrValue('UEtch_Cu'))
  else
    Fnc.SysSetAttrValue('Down_Etch_Cu', BaseCuTopUM);

  // Use Current Base Cu instead of Down_Etch_Cu

  {if UseF_ then  // 1201 Remove addition 3um Cu for MicroEtch 
  begin
    if Fnc.SysGetAttrValue('UEtch_Cu') > 0 then
    begin
      Fnc.SysSetAttrValue('Cal_Abs_Th', 3 + GLB_Abs_CuThk + InProcessCuThk);
      Fnc.SysSetAttrValue('Cal_Ave_Th', 3 + GLB_Ave_CuThk + InProcessCuThk);
    end        
    else
    begin                        
      Fnc.SysSetAttrValue('Cal_Abs_Th', GLB_Abs_CuThk + InProcessCuThk);
      Fnc.SysSetAttrValue('Cal_Ave_Th', GLB_Ave_CuThk + InProcessCuThk);
    end;            
  end;}
  
  Fnc.SysSetAttrValue('Cal_Abs_Th', GLB_Abs_CuThk + InProcessCuThk);
  Fnc.SysSetAttrValue('Cal_Ave_Th', GLB_Ave_CuThk + InProcessCuThk);

  if UseF_ then
  begin                
    if  Fnc.SysGetAttrValue('Cal_Abs_Th') > Fnc.SysGetAttrValue('Cal_Ave_Th') then
    begin                                
      TempVar := Fnc.SysGetAttrValue('Cal_Abs_Th');
                  
      {if Fnc.SysGetAttrValue('UEtch_Cu') > 0 then
        ShowMessage('DE Cu Thk = ' + 'In Process Cu: ' + IntToStr(InProcessCuThk) + ' + Table Plating: ' + IntToStr(GLB_Abs_CuThk) + ' + 3' + ' = ' + IntToStr(TempVar));
      else
        ShowMessage('DE Cu Thk = ' + 'In Process Cu: ' + IntToStr(InProcessCuThk) + ' + Table Plating: ' + IntToStr(GLB_Abs_CuThk) + ' + 0' + ' = ' + IntToStr(TempVar));}
    end                      
    else
    begin                      
      TempVar := Fnc.SysGetAttrValue('Cal_Ave_Th');

      {if Fnc.SysGetAttrValue('UEtch_Cu') > 0 then
        ShowMessage('DE Cu Thk = ' + 'In Process Cu: ' + IntToStr(InProcessCuThk) + ' + Table Plating: ' + IntToStr(GLB_Ave_CuThk) + ' + 3' + ' = ' + IntToStr(TempVar));
      else
        ShowMessage('DE Cu Thk = ' + 'In Process Cu: ' + IntToStr(InProcessCuThk) + ' + Table Plating: ' + IntToStr(GLB_Ave_CuThk) + ' + 0' + ' = ' + IntToStr(TempVar));}
    end;
  end
  else
  begin
    //  Copied from DES Step
    Surface_Add := 0.0;
    if ((Fnc.SysGetAttrValue('NCRunX2') = false) and (Fnc.SysGetAttrValue('CappedVia') = false)) then
    begin
      Fnc.SysSetAttrValue('Min_Surf_Plt', 0.0);
    end
    else
    begin
      if Fnc.SysGetAttrValue('CappedVia') = true then
        Surface_Add := Fnc.SysGetAttrValue('Min_Surf_Plt') + 2;

      if Fnc.SysGetAttrValue('NCRunX2') = true then
      begin
        Fnc.SysSetAttrValue('Min_Surf_Plt', 0.0);

        // Per Herole, this is ignored. Plating thickness should come from the plating table for NC Run * 2 ( GLB_Abs_CuThk ). Done below
        if NCRun = 2 then
        begin
          if Fnc.SysGetAttrValue('Abs_Min_Th_2') > Fnc.SysGetAttrValue('Ave_Min_Th_2') then
            Surface_Add := Fnc.SysGetAttrValue('Abs_Min_Th_2')
          else
            Surface_Add := Fnc.SysGetAttrValue('Ave_Min_Th_2');

          if Surface_Add = 0.0 then
            ShowMessage('Error!!! : 2 X NC Model, Second Plating Cu Thickness Cannot Be Zero');
        end
        else
          Surface_Add := 0.0;
      end;
    end;

    if process <> 'CappedVia'  then
    begin
      {if (( Fnc.SysGetAttrValue('UEtch_Cu') = 0.0 ) or ( NCRun = 2 ))then   // 1201 Remove +3um from Cu thickness
      begin
        Fnc.SysSetAttrValue('Abs_Fin_Th', GLB_Abs_CuThk + InProcessCuThk );
        Fnc.SysSetAttrValue('Ave_Fin_Th', GLB_Ave_CuThk + InProcessCuThk );
                               
        // Debug Message
        TempVar := Fnc.SysGetAttrValue('Abs_Fin_Th')
        //ShowMessage('DE Cu Thk = ' + 'In Process Cu: ' + IntToStr(InProcessCuThk) + ' + Table Plating: ' + IntToStr(GLB_Ave_CuThk) + ' + 0' + ' = ' + IntToStr(TempVar));
      end
      else
      begin       
        Fnc.SysSetAttrValue('Abs_Fin_Th', 3 + GLB_Abs_CuThk + InProcessCuThk );
        Fnc.SysSetAttrValue('Ave_Fin_Th', 3 + GLB_Ave_CuThk + InProcessCuThk );

        // Debug Message
        TempVar := Fnc.SysGetAttrValue('Abs_Fin_Th') 
        //ShowMessage('DE Cu Thk = ' + 'In Process Cu: ' + IntToStr(InProcessCuThk) + ' + Table Plating: ' + IntToStr(GLB_Ave_CuThk) + ' + 3' + ' = ' + IntToStr(TempVar));
      end  }
      
      Fnc.SysSetAttrValue('Abs_Fin_Th', GLB_Abs_CuThk + InProcessCuThk );
      Fnc.SysSetAttrValue('Ave_Fin_Th', GLB_Ave_CuThk + InProcessCuThk );
      TempVar := Fnc.SysGetAttrValue('Abs_Fin_Th') 
    end
    else  // Capped Via Plating
    begin
      Fnc.SysSetAttrValue('Abs_Fin_Th', InProcessCuThk + Surface_Add);
      Fnc.SysSetAttrValue('Ave_Fin_Th', InProcessCuThk + Surface_Add);

        // Debug Message
      TempVar := Fnc.SysGetAttrValue('Abs_Fin_Th')
        //ShowMessage('Capped DE Cu Thk = ' + 'In Process Cu: ' + IntToStr(InProcessCuThk) + ' + Min  Plating: ' + IntToStr(Surface_Add) + ' + 0' + ' = ' + IntToStr(TempVar));
    end;
                         
    if  Fnc.SysGetAttrValue('Abs_Fin_Th') > Fnc.SysGetAttrValue('Ave_Fin_Th') then
      TempVar := Fnc.SysGetAttrValue('Abs_Fin_Th')
    else
      TempVar := Fnc.SysGetAttrValue('Ave_Fin_Th');
  end;

  TempVarI := Round(TempVar);
  //InProcessCuThk := TempVarI;
  UpdateInProcessCuThk(TempVarI);
                                    
  {if process <> 'CappedVia' then  // 839 Electrolytic Cu - Capped Via / 2nd Plating DE Cu Thickness Tolerance
  begin
    TempVarI_min := TempVarI - 7;
    TempVarI_max := TempVarI + 7;
  end                                       
  else
  begin
    TempVarI_min := TempVarI - 3;
    TempVarI_max := TempVarI + 3;
  end;      
  }

  TempVarI_min := TempVarI - 7;
  TempVarI_max := TempVarI + 7;

  vDE_Cu_Thk := IntToStr(TempVarI_min) + ' ~ ' + IntToStr(TempVarI) + ' ~ ' + IntToStr(TempVarI_max);

  if NCRun = 1 then
  begin     
    if Fnc.SysGetAttrValue('User_DE_Cu_Thk') <> '' then
    begin
      SysRouteInsAddlParameter('Erp','User DE Cu Thickness', Fnc.SysGetAttrValue('User_DE_Cu_Thk'),'','', false, '', '', '')
      //InProcessCuThk := Conver_UserDE_Cu(Fnc.SysGetAttrValue('User_DE_Cu_Thk'));
      UpdateInProcessCuThk(Conver_UserDE_Cu(Fnc.SysGetAttrValue('User_DE_Cu_Thk')));
      //ShowMessage('User DE Cu Thickness After Plating: ' + IntToStr(InProcessCuThk));
    end
    else
      SysRouteInsAddlParameter('Erp','DE Cu Thickness', vDE_Cu_Thk,'','', false, '', '', '');
  end
  else  // NC RUN must = 2
  begin
    if Fnc.SysGetAttrValue('User_DE_Cu_Thk_2') <> '' then
    begin
      SysRouteInsAddlParameter('Erp','2nd User DE Cu Thick.', Fnc.SysGetAttrValue('User_DE_Cu_Thk_2'),'','', false, '', '', '')
      //InProcessCuThk := Conver_UserDE_Cu(Fnc.SysGetAttrValue('User_DE_Cu_Thk_2'));
      UpdateInProcessCuThk(Conver_UserDE_Cu(Fnc.SysGetAttrValue('User_DE_Cu_Thk_2')));
      //ShowMessage('2nd User DE Cu Thickness After Plating: ' + IntToStr(InProcessCuThk));
    end
    else
      SysRouteInsAddlParameter('Erp','2nd DE Cu Thickness', vDE_Cu_Thk,'','', false, '', '', '');
  end;

  //ShowMessage( 'After Plating Cu Thk ' + IntToStr(InProcessCuThk) + 'um'  );
End;

procedure Electrolytic_Cu_SD(Extra_Plt_Step : boolean);
Var
  Plating_Line : string;
  Alt_Line : string;
  Plating_Line_Selected: string;
  Plating_Line_Alternative: string;
  NCX2_OSP : boolean;

begin
  Plating_Line := '';               
  Alt_Line := '';
  Plating_Line_Selected := '';
  Plating_Line_Alternative := '';

  SysRouteInsDepartment('Erp', 'COPPL-C', '');

  Set_CU_Ratio;               
  
  if NCRun = 1 then
  begin
    if Fnc.SysGetAttrValue('Electrolytic_Cu_Line') = 'Auto' then  // 843 Process Override Rule
    begin
      if ((CustCode_Rule('Customer') = 'GM') and (Fnc.SysGetAttrValue('Test_ID') <> 'None')) then
      begin
        Plating_Line := GetCuPlat_GM;
        Fnc.SysSetAttrValue('Ave_Min_Th', 0.0);
      end
      else
      begin
        //GetCopperPlating_Line(Plating_Line_Selected, Plating_Line_Alternative);
        //Plating_Line := Plating_Line_Selected 
        Plating_Line := SelectPlatingLine; 
      end;
    end
    else
     Plating_Line := Fnc.SysGetAttrValue('Electrolytic_Cu_Line'); 
  end
  else if NCRun = 2 then
  begin                       
    if Fnc.SysGetAttrValue('Electrolytic_Cu_Line_2') = 'Auto' then  // 843 Process Override Rule
    begin
      if ((CustCode_Rule('Customer') = 'GM') and (Fnc.SysGetAttrValue('Test_ID') <> 'None')) then
      begin
        Plating_Line := GetCuPlat_GM;
        Fnc.SysSetAttrValue('Ave_Min_Th_2', 0.0);
      end
      else
      begin
        //GetCopperPlating_Line(Plating_Line_Selected, Plating_Line_Alternative);
        //Plating_Line := Plating_Line_Selected
        Plating_Line := SelectPlatingLine; 
      end;         
    end
    else
     Plating_Line := Fnc.SysGetAttrValue('Electrolytic_Cu_Line_2');  
  end;


  Fnc.SysSetAttrValue('CuPlatingLine', Plating_Line);
                              
  // 1134 Additional Information
  if NCRun = 1 then
    Fnc.SysSetAttrValue('Plating_Line', Plating_Line)
  else if NCRun = 2 then
    Fnc.SysSetAttrValue('Plating_Line', Fnc.SysGetAttrValue('Plating_Line') + '/' + Plating_Line);

  {if Plating_Line = 'PAL3' then
  begin
    //ShowMessage('For 3EPCB Only - Need to confirm the IES logic for <> BLIND VIA or Total Layer Count = Current Part Layer Count');

    if ((Fnc.SysGetAttrValue('BlindVias') = true) and (Fnc.SysGetAttrValue('MfgPartType') <> 'Top')) then
    begin
      if ((Fnc.SysGetAttrValue('Ave_Min_Bl') > 0.0) or (Fnc.SysGetAttrValue('Abs_Min_Bl') > 0.0)) then
      begin
        GLB_Abs_CuThk := Fnc.SysGetAttrValue('Abs_Min_Bl') * 1.4;
        GLB_Ave_CuThk := Fnc.SysGetAttrValue('Ave_Min_Bl') * 1.2;

        // Per Request from Herole 3/13, blind via plating should be the same as PTH plating
        GLB_Abs_CuThk := Fnc.SysGetAttrValue('Abs_Min_Th') * 1.4;
        GLB_Ave_CuThk := Fnc.SysGetAttrValue('Ave_Min_Th') * 1.2;
      end
      else
        ShowMessage('Error: Blind Via but Abs_Min_Bl or Ave_Min_Bl = 0.0');
    end
    else
    begin
      GLB_Abs_CuThk := Fnc.SysGetAttrValue('Abs_Min_Th') * 1.4;
      GLB_Ave_CuThk := Fnc.SysGetAttrValue('Ave_Min_Th') * 1.2;
    end;
    // 1086 Update Electrolytic Cu Plating Rule  - use MCP for Pal3 & Filled Via
    //MCP_CU_THK; 
    
  end;}
          
  {else if (   
           (Plating_Line = 'PAL4') or
           (Plating_Line = 'PAL6') or  // Plating Line PAL5 change to PAL6
           (Plating_Line = 'MCP') or
           (Plating_Line = 'FILL_VIA')  // 976 Filled Via Plating Line 
          )
  then
  begin }   
    // Need to confirm the IES logic for '<> BLIND VIA or Total Layer Count = Current Part Layer Count
    if ((Fnc.SysGetAttrValue('BlindVias') = true) and (Fnc.SysGetAttrValue('MfgPartType') <> 'Top'))  then
    begin
      if ((Fnc.SysGetAttrValue('Ave_Min_Bl') > 0.0) or (Fnc.SysGetAttrValue('Abs_Min_Bl') > 0.0)) then
      begin
        GLB_TGT_Abs_HOLE_CuThk := Fnc.SysGetAttrValue('Abs_Min_Bl');
        GLB_TGT_Ave_Hole_CuThk := Fnc.SysGetAttrValue('Ave_Min_Bl');

        // Per Request from Herole 3/13, blind via plating should be the same as PTH plating
        GLB_TGT_Abs_HOLE_CuThk := Fnc.SysGetAttrValue('Abs_Min_Th');
        GLB_TGT_Ave_Hole_CuThk := Fnc.SysGetAttrValue('Ave_Min_Th');
      end
      else
        ShowMessage('Error: Blind Via but Abs_Min_Bl or Ave_Min_Bl = 0.0');
    end
    else
    begin
      GLB_TGT_Abs_HOLE_CuThk := Fnc.SysGetAttrValue('Abs_Min_Th');
      GLB_TGT_Ave_Hole_CuThk := Fnc.SysGetAttrValue('Ave_Min_Th');
    end;
    
    // For testing, force plating line to RLPS
    // Plating_Line := 'PAL4';

    if ( Plating_Line = 'MCP' ) or ( Plating_Line = 'PAL3' ) or (Plating_Line = 'FILL_VIA') then
      MCP_CU_THK
    else
      GetCuPlat_RPLS;
  //end;                       
                        
  if Plating_Line = 'FILL_VIA' then
  begin
    SysRouteInsDepartment('Erp', 'COPPL-F', '');
    SysRouteInsWorkCenter('Erp', 'COPPL-F', '');
    
    // 976 Filled Via plating line missing info
    SysRouteInsInstruction('Erp', 'COPPL001', ''); // MEASUREMT CU THK : i) ______ii) ______,
    SysRouteInsAddlParameter('Erp','Plating Line', Plating_Line,'','', false, '', '', '');  // Include the Electrolytic Machine Name on the process step.
      
               
    if (( Fnc.SysGetAttrValue('BlindVias') = true ) and ( Fnc.SysGetAttrValue('NCRunX2') = true ) and  ( NCRun = 1 )) or
       (( Fnc.SysGetAttrValue('BlindVias') = true ) and ( Fnc.SysGetAttrValue('NCRunX2') = false ))  
    then //978
    begin
      InsertViaTypeAttributes;
      InsertBlindViaAttributes;
    end;
               
    if NCRun = 2 then
    begin
      SysRouteInsAddlParameter('Erp','2nd Min Drill Size', Fnc.SysGetAttrValue('Min_Drill_Size_2'),'','', false, '', '', '');

      if ((Fnc.SysGetAttrValue('Ave_Min_Th_2') > 0) or (Fnc.SysGetAttrValue('Abs_Min_Th_2') > 0)) then
      begin
        SysRouteInsAddlParameter('Erp','2nd Avg Min Thickness', Fnc.SysGetAttrValue('Ave_Min_Th_2'),'','', false, '', '', '');
        SysRouteInsAddlParameter('Erp','2nd Abs Min Thickness', Fnc.SysGetAttrValue('Abs_Min_Th_2'),'','', false, '', '', '');
        SysRouteInsAddlParameter('Erp','2nd Ave Max Thickness', Fnc.SysGetAttrValue('Ave_Max_Th_2'),'','', false, '', '', '');
        SysRouteInsAddlParameter('Erp','2nd Abs Max Thickness', Fnc.SysGetAttrValue('Abs_Max_Th_2'),'','', false, '', '', '');
      end;

      SysRouteInsAddlParameter('Erp','2nd PTH Aspect Ratio', Fnc.SysGetAttrValue('Aspect_Ratio_Val_2'),'','', false, '', '', '');
      SysRouteInsAddlParameter('Erp','2nd PTH Cu Plate Area', Fnc.SysGetAttrValue('PTH_CuPlt_Area_2'),'','', false, '', '', '');
      SysRouteInsAddlParameter('Erp','2nd Cu Ratio', Fnc.SysGetAttrValue('Cu_Ratio_2'),'','', false, '', '', '');

      //if Fnc.SysGetAttrValue('User_DE_Cu_Thk_2') <> '' then
      //  SysRouteInsAddlParameter('Erp','2nd User DE Cu Thick.', Fnc.SysGetAttrValue('User_DE_Cu_Thk_2'),'','', false, '', '', '');
      // 976 Filled Via plating line missing info
      if NCRun = 2 then // not required but copied from other plating line rule - leave for debugging
          CalcAndInsert_DECUTHK(false, 2, '')
        else        
          CalcAndInsert_DECUTHK(true, 1, ''); 
    end                                                                                                                            
    else
    begin
      SysRouteInsAddlParameter('Erp','Min Drill Size', Fnc.SysGetAttrValue('Min_Drill_Size'),'','', false, '', '', '');

      if ((Fnc.SysGetAttrValue('Ave_Min_Th') > 0) or (Fnc.SysGetAttrValue('Abs_Min_Th') > 0)) then
      begin
        SysRouteInsAddlParameter('Erp','Avg Min Thickness', Fnc.SysGetAttrValue('Ave_Min_Th'),'','', false, '', '', '');
        SysRouteInsAddlParameter('Erp','Abs Min Thickness', Fnc.SysGetAttrValue('Abs_Min_Th'),'','', false, '', '', '');
        SysRouteInsAddlParameter('Erp','Ave Max Thickness', Fnc.SysGetAttrValue('Ave_Max_Th'),'','', false, '', '', '');
        SysRouteInsAddlParameter('Erp','Abs Max Thickness', Fnc.SysGetAttrValue('Abs_Max_Th'),'','', false, '', '', '');
      end;
                             
      SysRouteInsAddlParameter('Erp','Aspect Ratio', Fnc.SysGetAttrValue('Aspect_Ratio_Val'),'','', false, '', '', '');
      SysRouteInsAddlParameter('Erp','PTH Cu Plate Area', Fnc.SysGetAttrValue('PTH_CuPlt_Area'),'','', false, '', '', '');
      SysRouteInsAddlParameter('Erp','Cu Ratio', Fnc.SysGetAttrValue('Cu_Ratio'),'','', false, '', '', '');

      //if Fnc.SysGetAttrValue('User_DE_Cu_Thk') <> '' then
      //  SysRouteInsAddlParameter('Erp','User DE Cu Thickness', Fnc.SysGetAttrValue('User_DE_Cu_Thk'),'','', false, '', '', '');
      // 976 Filled Via plating line missing info
      if ((Fnc.SysGetAttrValue('UEtch_Cu') > 0) or (Fnc.SysGetAttrValue('Min_Surf_Plt') > 0)) then 
          CalcAndInsert_DECUTHK(true, 1, '')  // (364) Surface Cu thickness calculation correction
        else
          CalcAndInsert_DECUTHK(false, 1, '');

      SysRouteInsAddlParameter('Erp','Dimple Spec', Fnc.SysGetAttrValue('Dimple_Spec'),'','', false, '', '', '');

      if ((Fnc.SysGetAttrValue('Application') = 'AUTOMOTIVE') or (Fnc.SysGetAttrValue('Application') = 'AUTOMOTIVE NO INKJET')) then
      begin
        if Fnc.SysGetAttrValue('ApplicationSP') <> 'NONE' then
          SysRouteInsAddlParameter('Erp','Specific Application', Fnc.SysGetAttrValue('ApplicationSP'),'','', false, '', '', '');
      end;

    end;
  end
  else
  begin
    if Plating_Line = 'MCP' then
    begin
      SysRouteInsDepartment('Erp', 'COPPL-E', '');
                       
      if CustCode_Rule('Customer') = 'FA' then
        SysRouteInsWorkCenter('Erp', 'COPPL-E01', '');
      else
        SysRouteInsWorkCenter('Erp', 'COPPL-E0', '');

      if Extra_Plt_Step then
        SysRouteInsWorkCenter('Erp', 'COPPL-E0', '');
    end;

    if Plating_Line = 'PAL3' then
    begin
      SysRouteInsDepartment('Erp', 'COPPL-B', '');
      SysRouteInsWorkCenter('Erp', 'COPPL-B', '');
    end;

    if Plating_Line = 'PAL4' then
    begin
      SysRouteInsDepartment('Erp', 'COPPL-C', '');
      SysRouteInsWorkCenter('Erp', 'COPPL-C1', '');
    end;
                                           
    if Plating_Line = 'PAL6' then
    begin
      //SysRouteInsDepartment('Erp', 'COPPL-C', '');
      SysRouteInsWorkCenter('Erp', 'COPPL-C22', ''); // Plating Line PAL5 change to PAL6
    end;

    SysRouteInsAddlParameter('Erp','Plating Line', Plating_Line,'','', false, '', '', '');  // Include the Electrolytic Machine Name on the process step.

    if ( MechBlindViaSide <> 'None' ) and ( NCRun = 1 ) then    // MEch Blind Vias 1356 
    begin
      SysRouteInsAddlParameter('Erp','Remark', 'With Mech Blind Vias','','', false, '', '', '');
      SysRouteInsAddlParameter('Erp', 'Mech Blind Via Depth', FormatFloat('0.000', MechBlindViaMaxDepth),'','', false, '', '', '');
      SysRouteInsAddlParameter('Erp', 'Mech Blind Via Aspect', FormatFloat('0.000',MechBlindViaMaxAspectRatio),'','', false, '', '', '');
    end;

    if Plating_Line = 'PAL3 + MCP' then
     ShowMessage('ERROR! : NO CU PLATING LINE SELECTED as PAL3 + MCP');

    if Plating_Line = 'NO_PLATING_LINE' then
    begin
      if Fnc.SysGetAttrValue('Press_Thickness') > 3.5 then
      begin
        ShowMessage('ERROR! : Thickness > 3.5mm. NO CU PLATING LINE SELECTED FROM TABLE.' + #13 + 'Resource set to COPPL-C2 Copper Plating 5 Reverse Pulse');
        SysRouteInsWorkCenter('Erp', 'COPPL-C2', '');
      end                      
      else
        ShowMessage('ERROR! : NO CU PLATING LINE SELECTED OR A NEW CU PLATING LINE CREATED IN TABLE PLEASE CHECK!');
    end;

    if Extra_Plt_Step then
    begin
      SysRouteInsAddlParameter('Erp','Surface Plating Spec', Fnc.SysGetAttrValue('Surf_Plt_Spec'),'','', false, '', '', '');
      if ((Fnc.SysGetAttrValue('Aspect_Ratio_Val') > 5.67) or (Fnc.SysGetAttrValue('Press_Thickness') > 1.7)) then
        SysRouteInsInstruction('Erp', 'COPPL002', ''); // REMARKS:REFER TO PE FOR CONDITION.
    end
    else
    begin // 978         
      if (( Fnc.SysGetAttrValue('BlindVias') = true ) and ( Fnc.SysGetAttrValue('NCRunX2') = true ) and  ( NCRun = 1 )) or
         (( Fnc.SysGetAttrValue('BlindVias') = true ) and ( Fnc.SysGetAttrValue('NCRunX2') = false ))
      then
      begin
        if Fnc.SysGetAttrValue('Laser_Check_Hole') = 0.0 then
          ShowMessage('ERROR! : Laser Accuracy Check Hole is ZERO');

        InsertViaTypeAttributes;

        if CustCode_Rule('Customer') <> 'FA' then
          InsertBlindViaAttributes;
      end
      else
      begin
        if Fnc.SysGetAttrValue('LayerCount') > 2 then // 2 Layer Fixes
        begin
          if NCRun = 1 then
            SysRouteInsAddlParameter('Erp','Thickness Before Plate', FormatFloat('0.000', Fnc.SysGetAttrValue('Press_Thickness')),'','', false, '', '', '')
          else if NCRun > 1 then
            SysRouteInsAddlParameter('Erp','Thickness Before Plate', FormatFloat('0.000', Fnc.SysGetAttrValue('LayupThickness')),'','', false, '', '', '')
        end
        else
          SysRouteInsAddlParameter('Erp','Thickness Before Plate', FormatFloat('0.000', DSThicknessB4Plating),'','', false, '', '', '');
      end;
                           
     // IES LOGIC = Level[VIA_TYPE$]="BLIND AND BURIED" OR LPTH? doens;t seem to make sense LPTH = Drilled = everything that gets plated???

     // Fix for Surface Plating not being set until Capped Via step:
      if ((Fnc.SysGetAttrValue('CappedVia') = true) and (Fnc.SysGetAttrValue('NCRunX2') = false)) then
      begin     
        if Fnc.SysGetAttrValue('Min_Surf_Plt') = 0 then
          Fnc.SysSetAttrValue('Min_Surf_Plt', 15.0);
      end;

      if Fnc.SysGetAttrValue('NCRunX2') = false then
      begin
        if ((Fnc.SysGetAttrValue('UEtch_Cu') > 0) or (Fnc.SysGetAttrValue('Min_Surf_Plt') > 0)) then
          CalcAndInsert_DECUTHK(true, 1, '')  // (364) Surface Cu thickness calculation correction
        else
          CalcAndInsert_DECUTHK(false, 1, '');
      end
      else // NC Run X 2
      begin
        if NCRun = 2 then
          CalcAndInsert_DECUTHK(false, 2, '')
        else
          CalcAndInsert_DECUTHK(true, 1, '');
      end;         

      if Fnc.SysGetAttrValue('BlindVias') = true then
      begin
      if CustCode_Rule('Customer') <> 'FA' then
        begin
          if NCRun = 2 then
          begin
            SysRouteInsAddlParameter('Erp','2nd Min Drill Size', Fnc.SysGetAttrValue('Min_Drill_Size_2'),'','', false, '', '', '');
            SysRouteInsAddlParameter('Erp','Ave Min PTH', Fnc.SysGetAttrValue('Ave_Min_Th_2'),'','', false, '', '', '');  // 1513
            SysRouteInsAddlParameter('Erp','Abs Min PTH', Fnc.SysGetAttrValue('Abs_Min_Th_2'),'','', false, '', '', '');  // 1513
          end
          else
          begin
            SysRouteInsAddlParameter('Erp','Min Drill Size', Fnc.SysGetAttrValue('Min_Drill_Size'),'','', false, '', '', '');
            SysRouteInsAddlParameter('Erp','Ave Min PTH', Fnc.SysGetAttrValue('Ave_Min_Th'),'','', false, '', '', ''); // 1513
            SysRouteInsAddlParameter('Erp','Abs Min PTH', Fnc.SysGetAttrValue('Abs_Min_Th'),'','', false, '', '', ''); // 1513
          end
          
        end;
      end
      else
      begin
        if CustCode_Rule('Customer') <> 'FA' then
        begin
          if NCRun = 2 then                             
          begin
            SysRouteInsAddlParameter('Erp','2nd Min Drill Size', Fnc.SysGetAttrValue('Min_Drill_Size_2'),'','', false, '', '', '');

            if ((Fnc.SysGetAttrValue('Ave_Min_Th_2') > 0 ) or (Fnc.SysGetAttrValue('Abs_Min_Th_2') > 0 )) then
            begin
              SysRouteInsAddlParameter('Erp','2nd Ave Min PTH', Fnc.SysGetAttrValue('Ave_Min_Th_2'),'','', false, '', '', '');
              SysRouteInsAddlParameter('Erp','2nd Abs Min PTH', Fnc.SysGetAttrValue('Abs_Min_Th_2'),'','', false, '', '', '');
              SysRouteInsAddlParameter('Erp','2nd Ave Max PTH', Fnc.SysGetAttrValue('Ave_Max_Th_2'),'','', false, '', '', '');
              SysRouteInsAddlParameter('Erp','2nd Abs Max PTH', Fnc.SysGetAttrValue('Abs_Max_Th_2'),'','', false, '', '', '');
            end;
          end
          else
          begin
            SysRouteInsAddlParameter('Erp','Min Drill Size', Fnc.SysGetAttrValue('Min_Drill_Size'),'','', false, '', '', '');
            SysRouteInsAddlParameter('Erp','Ave Min PTH', Fnc.SysGetAttrValue('Ave_Min_Th'),'','', false, '', '', '');
            SysRouteInsAddlParameter('Erp','Abs Min PTH', Fnc.SysGetAttrValue('Abs_Min_Th'),'','', false, '', '', '');

            if Fnc.SysGetAttrValue('Abs_Max_Th') > 0 then
            begin
              SysRouteInsAddlParameter('Erp','Ave Max PTH', Fnc.SysGetAttrValue('Ave_Max_Th'),'','', false, '', '', '');
              SysRouteInsAddlParameter('Erp','Abs Max PTH', Fnc.SysGetAttrValue('Abs_Max_Th'),'','', false, '', '', '');
            end;
          end;
        end;
      end;
      //end;

      if CustCode_Rule('Customer') <> 'FA' then
      begin
        if Fnc.SysGetAttrValue('Surf_Plt_Spec') > 0 then
          SysRouteInsAddlParameter('Erp','Surface Plating Spec', Fnc.SysGetAttrValue('Surf_Plt_Spec'),'','', false, '', '', '');

        if NCRun = 2 then
        begin
          SysRouteInsAddlParameter('Erp','2nd PTH Aspect Ratio', Fnc.SysGetAttrValue('Aspect_Ratio_Val_2'),'','', false, '', '', '');
          SysRouteInsAddlParameter('Erp','2nd PTH Cu Plate Area', Fnc.SysGetAttrValue('PTH_CuPlt_Area_2'),'','', false, '', '', '');
          SysRouteInsAddlParameter('Erp','2nd Cu Ratio', Fnc.SysGetAttrValue('Cu_Ratio_2'),'','', false, '', '', '');
        end
        else
        begin
          SysRouteInsAddlParameter('Erp','PTH Aspect Ratio', Fnc.SysGetAttrValue('Aspect_Ratio_Val'),'','', false, '', '', '');
          SysRouteInsAddlParameter('Erp','PTH Cu Plating Area', Fnc.SysGetAttrValue('PTH_CuPlt_Area'),'','', false, '', '', '');
          SysRouteInsAddlParameter('Erp','Cu Ratio', Fnc.SysGetAttrValue('Cu_Ratio'),'','', false, '', '', '');
        end;
      end;

      if ((CustCode_Rule('Customer') = 'GM') and (Fnc.SysGetAttrValue('Test_ID') <> 'None')) then
      begin
        SysRouteInsAddlParameter('Erp','Test ID', Fnc.SysGetAttrValue('Test_ID'),'','', false, '', '', '');
      end
      else
      begin
        if ((CustCode_Rule('Customer') = 'GM') and (Fnc.SysGetAttrValue('Test_ID') <> 'None')) then
          ShowMessage('ERROR! : Test ID has no Value');
      end;

      if CustCode_Rule('Customer') <> 'FA' then
      begin
        if Fnc.SysGetAttrValue('Min_Surf_Cu') > 0 then
          SysRouteInsAddlParameter('Erp','Min Surface Cu', Fnc.SysGetAttrValue('Min_Surf_Cu'),'','', false, '', '', '');

        if Fnc.SysGetAttrValue('Max_Surf_Cu') > 0 then
          SysRouteInsAddlParameter('Erp','Max Surface Cu', Fnc.SysGetAttrValue('Max_Surf_Cu'),'','', false, '', '', '');

        // SysRouteInsAddlParameter('Erp','Max Surface Cu', Fnc.SysGetAttrValue('Max_Surf_Cu'),'','', false, '', '', '');  1514

        SysRouteInsAddlParameter('Erp','Application', Fnc.SysGetAttrValue('Application'),'','', false, '', '', '');

        if ((Fnc.SysGetAttrValue('Application') = 'AUTOMOTIVE') or (Fnc.SysGetAttrValue('Application') = 'AUTOMOTIVE NO INKJET')) then
        begin
          if Fnc.SysGetAttrValue('ApplicationSP') <> 'NONE' then
            SysRouteInsAddlParameter('Erp','Specific Application', Fnc.SysGetAttrValue('ApplicationSP'),'','', false, '', '', '');
        end;
      end;                                           

    end; // End of Insert Attributes etc for standard (single step) plating

    SysRouteInsInstruction('Erp', 'COPPL001', ''); // MEASUREMT CU THK : i) ______ii) ______,

    if CustCode_Rule('Customer') = 'FA' then
      SysRouteInsInstruction('Erp', 'COPPL038', ''); //  REMARK : Sampling copper thickness measurement

    if Fnc.SysGetAttrValue('NCRunX2') = true then
    begin
      if NCRun = 1 then
        SysRouteInsInstruction('Erp', '2NC_CUPLT1', ''); // REMARK: FIRST CU PLATING.

      if NCRun = 2 then
      begin
        SysRouteInsInstruction('Erp', '2NC_CUPLT2', ''); // REMARK: SECOND CU PLATING.      

        if ( Fnc.SysGetAttrValue('Board_Finish') = 'ENIG' ) or ( ENIGplusOSP ) then // 1256
        begin
          //if ((Fnc.SysGetAttrValue('Cust_Code') = 'WBF') or (Fnc.SysGetAttrValue('Cust_Code') = 'WBC')) then
          if (
              (Eng_JobType = 'Sample') and
              ((CustCode_Rule('Customer') = 'BF') or (CustCode_Rule('Customer') = 'BC'))
             )
          then
            SysRouteInsInstruction('Erp', 'DRILL011', ''); // REMARK: OSP + 2X DRILLING.

        {  Removed per email from alison 10/23
          NCX2_OSP := false;
          ...
        }
                                               
        end;

      end;
    end;

    if Fnc.SysGetAttrValue('Tight_PressFit_Tol') = true then  // 795 Tight Press Fit Tolerance rule
    begin
      if Fnc.SysGetAttrValue('NCRunX2') = true then
      begin
        if NCRun = 2 then
          InsertPressFitRemarks;
      end
      else
        InsertPressFitRemarks;
    end;
  end;
  AddBoardFinishAsAttribute; // 1223 Additional Surface Finish info under Electrolytic Cu step 
End;

Procedure Electrolytic_Cu_1_SD;
begin
  Electrolytic_Cu_SD(false);
end;

Procedure Electrolytic_Cu_2_SD;
begin
  Electrolytic_Cu_SD(true);
end;

Procedure Electrolytic_CappedVia_SD;
begin
  SysRouteInsDepartment('Erp', 'COPPL-E01', '');
  SysRouteInsWorkCenter('Erp', 'COPPL-E01', '');

  if Fnc.SysGetAttrValue('Min_Surf_Plt') = 0 then
    Fnc.SysSetAttrValue('Min_Surf_Plt', 15.0);
                  
  SysRouteInsAddlParameter('Erp','Min Surface Plate', Fnc.SysGetAttrValue('Min_Surf_Plt'), '', '', false, '', '', '');
  SysRouteInsAddlParameter('Erp', 'Process', 'Flash Plating', '', '', false, '', '', '');

  CalcAndInsert_DECUTHK(false, 2, 'CappedVia');
  AddBoardFinishAsAttribute; // 1223 Additional Surface Finish info under Electrolytic Cu step 
end;

procedure KK_Drill_SD;
begin
  SysRouteInsDepartment('Erp', 'KKDRI-B', '');
  SysRouteInsWorkCenter('Erp', 'KKDRI-B', '');
                 
  Fnc.SysSetAttrValue('KK_Distance', Fnc.SysGetAttrValue('Panel_Length') - 8);
  SysRouteInsAddlParameter('Erp', 'KK Distance', Fnc.SysGetAttrValue('KK_Distance'), '', '', false, '', '', '');
         
  //if Fnc.SysRouteInsGetStepNum = 1 then  // 1471 QR Code information info update    
  //  InsertQRInfoAtStep1; 
                  
end;         

procedure MechBlindVia_Common;    
begin
  SysRouteInsDepartment('Erp', 'BACKD-A', '');
  SysRouteInsWorkCenter('Erp', 'BACKD-A', '');
  SysRouteInsAddlParameter('Erp', 'Entry Sheet', GetDrillEntrySheet,'','', false, '','', ''); // 912 Mech Blind Via Entry Material 
end;

procedure MechBlindVia1_SD;
begin
  MechBlindVia_Common;

  case MechBlindViaSide of
    'Bot'   : SysRouteInsAddlParameter('Erp', 'Side A', Fnc.SysGetAttrValue('BotLayer'),'','', false, '','', '');  // 837 Show Same format as Backdrill
    'Top'   : SysRouteInsAddlParameter('Erp', 'Side B', Fnc.SysGetAttrValue('TopLayer'),'','', false, '','', '');
    'Both'  : SysRouteInsAddlParameter('Erp', 'Side A', Fnc.SysGetAttrValue('BotLayer'),'','', false, '','', '');
  end;

  case MechBlindViaSide of
    'Bot'   : InsertMechBlindViaInfo('A');
    'Top'   : InsertMechBlindViaInfo('B');
    'Both'  : InsertMechBlindViaInfo('A');
  end;
end;

procedure MechBlindVia2_SD;
begin
  MechBlindVia_Common;
  SysRouteInsAddlParameter('Erp', 'Side B', Fnc.SysGetAttrValue('TopLayer'),'','', false, '','', '');  // 837 Mechanical Drill should show A & B Format same as backdrill
  InsertMechBlindViaInfo('B');
end;

procedure Beveling_SD;
begin
  SysRouteInsDepartment('Erp', 'FINBE-A0', '');
  SysRouteInsWorkCenter('Erp', 'FINBE-A0', '');
end;

procedure ManualBeveling_SD;
begin
  SysRouteInsDepartment('Erp', 'FINBE-B0', '');
  SysRouteInsWorkCenter('Erp', 'FINBE-B0', '');
end;

procedure CoreBuild_CT_Buffing1_SD;   // Core Build Cu Thinning
begin
  SysRouteInsDepartment('Erp', 'EPBUF-A', '');
  SysRouteInsWorkCenter('Erp', 'EPBUF-A', '');
  SysRouteInsAddlParameter('Erp', '1st Buffing Spec', formatCuThinValue('CoreBuild_CuThin_1stBuff','CoreBuild'), '', '', false, '', '', ''); // 799 Surface Cu Thickness value format in runcard
  //SysRouteInsInstruction('Erp', 'EPXPL002', ''); //REMARKS : CLEAR BUFFING.  (From OL Main Flow) Removed Per request from Herole 9/5

  {if CoreBuild then // 838 Core Build Buffing Remarks
    SysRouteInsInstruction('Erp', 'EPXPL014', ''); //Non-Woven Buffing Only
  else if SubAssemblyCoreBuild then
    SysRouteInsInstruction('Erp', 'EPXPL015', ''); //Ceramic Buffing }  
    
  if Fnc.SysGetAttrValue('CoreBuild_CuThin_Process') = 'Vertical Buffing' then
    SysRouteInsInstruction('Erp', 'EPBUF028', ''); // Use Vertical Buffing Machine Only  // 1473
  else if Fnc.SysGetAttrValue('CoreBuild_CuThin_Process') <> 'Micro-Etch + Buffing' then
  begin
    if CoreBuild then // 838 Core Build Buffing Remarks
      SysRouteInsInstruction('Erp', 'EPXPL014', ''); //Non-Woven Buffing Only
    else if SubAssemblyCoreBuild then
      SysRouteInsInstruction('Erp', 'EPXPL015', ''); //Ceramic Buffing 
  end;
end;

procedure CoreBuild_MicroEtch_SD; // Core Build Cu Thinning
begin
  SysRouteInsDepartment('Erp', 'METCH-A', '');
  SysRouteInsWorkCenter('Erp', 'METCH-A', '');
  SysRouteInsAddlParameter('Erp', 'Note', 'Metch for Cu Thin', '', '', false, '', '', '');
  SysRouteInsAddlParameter('Erp', 'Micro-Etch Spec', formatCuThinValue('CoreBuild_CuThin_MEtch', 'CoreBuild'), '', '', false, '', '', ''); // Buff-Etch-Buff  // 799 Surface Cu Thickness value format in runcard
end;

procedure CoreBuild_CT_Buffing2_SD;  // Core Build Cu Thinning
begin
  SysRouteInsDepartment('Erp', 'EPBUF-A', '');
  SysRouteInsWorkCenter('Erp', 'EPBUF-A', '');
  SysRouteInsAddlParameter('Erp', '2nd Buffing Spec', formatCuThinValue('CoreBuild_CuThin_2ndBuff','CoreBuild'), '', '', false, '', '', ''); // 799 Surface Cu Thickness value format in runcard
  //SysRouteInsInstruction('Erp', 'EPXPL002', ''); //REMARKS : CLEAR BUFFING.  (From OL Main Flow) Removed Per request from Herole 9/5

  if CoreBuild then // 838 Core Build Buffing Remarks
    SysRouteInsInstruction('Erp', 'EPXPL014', ''); //Non-Woven Buffing Only
  else if SubAssemblyCoreBuild then
    SysRouteInsInstruction('Erp', 'EPXPL015', ''); //Ceramic Buffing
end;

procedure Baking_After_HP_SD;
begin
  SysRouteInsDepartment('Erp', 'DMBAK-A', '');
  SysRouteInsWorkCenter('Erp', 'DMBAK-A', '');
end;

// 910 Addition of Ultrasonic and after VELCP Hole check
procedure UltraSonicStep_SD;
begin
  SysRouteInsDepartment('Erp', 'CURIN-U', '');
  SysRouteInsWorkCenter('Erp', 'CURIN-U', '');
end;

// 910 Addition of Ultrasonic and after VELCP Hole check
procedure Hole_Check_AfterEless_SD;
begin
  SysRouteInsDepartment('Erp', 'HOLCP-A', '');
  SysRouteInsWorkCenter('Erp', 'HOLCP-A0', '');
end;
