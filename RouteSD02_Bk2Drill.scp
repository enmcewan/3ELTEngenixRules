//HeaderImportExport-->
//SiteId=0
//Enterprise=True
//ScriptType=0
//ScriptGroup=HCS
//HeaderImportExport<--
uses
  Event_RouteGenLibrary,
  Eng_RouteFunctions,
  RouteFunctions,
  RouteFunctions_Drilling, // Blind Via Changes
  CT_PreBook,
  CT_CuPlt_GM,
  CT_CuPlt_Line,
  CT_OLPhoto,
  CT_SearchLibrary,
  CT_Drill_StkHt,
  RouteSD03_ElyCu2Marking,
  CT_Drill_EntrySht,
  CT_Desmear;

Var
  PhotoLine: string;
  AltLine: string;
  ProdResource: string                    
  DesLine: string;

procedure PEP_SD;
begin
  StepDeptERP('PEPOL-A');                                             
  StepWCERP('PEPOL-A');

  if CustCode_Rule('Customer') = 'FA' then
    StepInstructionERP('PEPOL010'); // “Check OPE location off-set”

  AddSubsAndInnersAtStep; // 1229 PEP Flow option for Sub-assembly build.

  //if Fnc.SysRouteInsGetStepNum = 1 then  // 1471 QR Code information info update
  //  InsertQRInfoAtStep1;

end;

procedure Pre_Oxide_Baking_SD;
begin
  StepDeptERP('OXBAK-A');
  StepWCERP('OXBAK-A');                                  

  if (( HasMultipleSubAssemblies ) and ( MatPreOxide24HrBake )) then
    StepParamERP('Remarks', '24 Hrs Baking');

  StepParamERP('Bake Reason', 'SP Material');
                                     
  //if Fnc.SysRouteInsGetStepNum = 1 then  // 1471 QR Code information info update
  //  InsertQRInfoAtStep1;
end;

procedure Shearing_SD;
begin
  StepDeptERP('SHEAR=C');
  StepWCERP('SHEAR=C');

  //if Fnc.SysRouteInsGetStepNum = 1 then  // 1471 QR Code information info update
  //  InsertQRInfoAtStep1;
end;

procedure Shearing_Laser_SD;
begin
  StepDeptERP('FINIL-A');
  StepWCERP('FINIL-A');
  StepParamERP('Shear To', LaserShearSize);
end;

procedure IL_Rout_StackHeight;
var
  CalcStackHt : integer;
begin
  CalcStackHt := 0.0;
  if not Fnc.SysGetAttrValue('FinIL_Stk_Ovr') then // 1472
  begin
    CalcStackHt := Trunc(7.1/(PressThickness * 1.08 )); // 2289
    Fnc.SysSetAttrValue('FinIL_Stk', CalcStackHt);
    StepParamERP('Stack Height', CalcStackHt);
  end
  else
  begin                    
    if Fnc.SysGetAttrValue('FinIL_Stk_User') > 0 then
    begin
      Fnc.SysSetAttrValue('FinIL_Stk', Fnc.SysGetAttrValue('FinIL_Stk_User'));
      StepParamERP('Stack Height', Fnc.SysGetAttrValue('FinIL_Stk_User'));
    end
    else                                       
      MessageDlg('IL Finish Route Stack Height user override selected but value is 0', mtWarning, Setof([mbOK]) , 0);
  end;
end;

procedure IL_Rout_Laser_SD;  // 2269 Shearing After Laser
begin
  StepDeptERP('FINIL-B');
  StepWCERP('FINIL-B');

  IL_Rout_StackHeight; // 2289
  
  StepParam('Erp', 'Shear To', LaserShearSize);
end;

procedure IL_Bevel_Laser_SD;   // 2269 Shearing After Laser
begin
  StepDeptERP('FINBE-A');

  if PressThickness > 3.5 then
    StepWCERP('FINBE-B0');
  else                      
    StepWCERP('FINBE-A0');
end;

procedure Oxide_SD;
var
  UseOxideLine1,
  UseOxideLine2,
  UseOxideLine3 : boolean;

  OxideLineName1,
  OxideLineName2,
  OxideLineName3 : string;

  AltOxideLineName : string;
  OxideLineSelected : boolean;
  OxideLineName : string;

begin
  UseOxideLine1 := true;
  UseOxideLine2 := true;
  UseOxideLine3 := true;

  OxideLineName1 := 'L3';
  OxideLineName2 := 'L4';
  OxideLineName3 := 'L2';

  AltOxideLineName := '';
  OxideLineSelected := false;
  OxideLineName := '';

  StepDeptERP('OXDOL-B');

  if HasSubAssemblies = true then //In place of IES GLB_INNER_PRESSED - Verify
    UseOxideLine2 := false;

  if ((ThinnestCore < 0.043) or (ThickestCore > 2.4)) then
    UseOxideLine1 := false;

  //if ((ThinnestCore < 0.024) or (ThickestCore > 2.0)) then  // Per change request from Herole 2016/07/21
  if ((ThinnestCore < 0.012) or (ThickestCore > 2.0)) then
    UseOxideLine2 := false;

  if ((ThinnestCore < 0.05) or (ThickestCore > 2.4)) then
    UseOxideLine3 := false;

  if UseOxideLine1 then
  begin
    OxideLineSelected := true;
    OxideLineName := OxideLineName1;
    AltOxideLineName := OxideLineName1;
  end;

  if UseOxideLine2 then
  begin
    if OxideLineSelected = true then
    begin
      AltOxideLineName := AltOxideLineName + '/' + OxideLineName2;
    end
    else
    begin
      OxideLineSelected := true;
      OxideLineName := OxideLineName2;
      AltOxideLineName := OxideLineName2;
    end;
  end;

  if UseOxideLine3 then
  begin
    if OxideLineSelected = true then
    begin
      AltOxideLineName := AltOxideLineName + '/' + OxideLineName3;
    end
    else
    begin
      OxideLineSelected := true;
      OxideLineName := OxideLineName3;
      AltOxideLineName := OxideLineName3;
    end;
  end;

  if not OxideLineSelected then
  begin
    ShowMessage('Error!!! - No Oxide Line Selected');
    AddStep('EGX_Missing_Steps', 'EGX_Missing_Steps01');
  end;

  if AltOxideLineName = 'L3/L4/L2' then
  begin
    StepWCERP('OXDOL-B');
    StepInstructionERP('OXDOL011'); // "ALTERNATIVE LINE : L3/L4/L2"
  end;

  if OxideLineName = 'L2' then
    StepWCERP('OXDOL-C0');

  if OxideLineName = 'L3' then
    StepWCERP('OXDOL-D0');

  if OxideLineName = 'L4' then
    StepWCERP('OXDOL-E0');

  //if Fnc.SysRouteInsGetStepNum = 1 then  // 1471 QR Code information info update
  //  InsertQRInfoAtStep1;

end;

procedure NonEtchPreTreatment_SD;
begin

  StepDeptERP('OXDOL-F0');
  StepWCERP('OXDOL-F0');

end;

procedure Post_Oxide_Baking_SD;
begin
  StepDeptERP('OXBAK-A');
  StepWCERP('OXBAK-A');

  if PressCycleMoreThan1 = true then
    StepParamERP('Bake Reason', 'HDI : After 1 Press');

  if  ((MatCyanateEster) or (MatPhenolCure = true)) then
    StepParamERP('Bake Reason', 'SP Material');

  if ((BaseCuTopUM >= 70) or (BaseCuBotUM >= 70)) then
    StepParamERP('Bake Reason', 'Base Cu >= 2oz');
end;

procedure Pre_Book_SD;
var
  Material : TStringlist;
  Prod_Res : string;
  PBookLine: string;
  AltLine: string;
begin
  Prod_Res := '';
  PBookLine:= '';
  AltLine:= '';

  StepDeptERP('PBOOK-A');
  StepWCERP('PBOOK-C0');               

  Material := TStringList.Create;
  Material.add('Prepreg');
  Material.add('PP/Filler');
  Material.add('Core');

  StepMaterialsERP(Material, 1);
  
  // 2367 Additional Engenix Attribute
  StepParamERP('PCB Orientation', MfgAttrTL('PCBOrientation'));
end;

procedure Riveting_Common; // 2472
begin

  StepDeptERP('PBOOK-B0');
  StepWCERP('PBOOK-B0');

  if Fnc.SysGetAttrValue('Rivet_Thk') <> '' then
    StepParamERP('Rivet Thickness', Fnc.SysGetAttrValue('Rivet_Thk'));

end;

{procedure Riveting_SD; // No Longer used after 2472 - X-OUt Step so cannot be selected.
begin
  StepDeptERP('PBOOK-B0');
  StepWCERP('PBOOK-B0');

  if Fnc.SysGetAttrValue('Rivet_Thk') <> '' then
    StepParamERP('Rivet Thickness', Fnc.SysGetAttrValue('Rivet_Thk'));

  if NumOfCores > 8 then           
    StepInstructionERP('PBOOK013'); // 4 Rivet
  else
    StepInstructionERP('PBOOK012'); // 2 Rivet 
  
end;}

procedure RivetingX4_SD; // 2472
begin

  Riveting_Common;         
  StepInstructionERP('PBOOK013'); // 4 Rivet

end;

procedure RivetingX2_SD;  // 2472
begin

  Riveting_Common;         
  StepInstructionERP('PBOOK012'); // 2 Rivet 

end; 

procedure PlasticEye_Riveting_SD
begin
  StepDeptERP('PBOOK-B0');
  StepWCERP('PBOOK-B0');
  StepInstructionERP('PBOOK009'); // Remark: Plastic Eyelet Riveting.
end;

procedure Pin_Lam_SD;
begin
  StepDeptERP('PBOOK-A');
  StepWCERP('PBOOK-G0');

  //If Pin-Lam Used, Copper Foil Should be in Sheet Format. Set Attr for BOM Conversion
  Fnc.SysSetAttrValue('Pin_Lam', true);
end;

procedure Pin_Bond_SD;
var
  Work_Center : string;
begin
  Work_Center := 'None';
  StepDeptERP('PBOOK-A');

  if (( NumOfCores ) + ( NumOfSubs )) = 2 then
  begin
    if (( SuborILThk_GreaterThan(0.25) ) and ( SuborILPnlLen_GreaterThan(609) )) then
      Work_Center := 'PBOOK-D0'; // 6 Head
  end;

  if (( NumOfCores ) + ( NumOfSubs )) >= 2 then
  begin
    if ( (SuborILThk_GreaterThan(0.024) ) and ( SuborILPnlLen_GreaterThan(509) )) then
      Work_Center := 'PBOOK-A0';  // 3 Head

    if (( NumOfCores ) + ( NumOfSubs )) = 2 then
    begin
      if (( SuborILThk_GreaterThan(0.25) ) and ( SuborILPnlLen_GreaterThan(609) )) then
        Work_Center := 'PBOOK-D0'; // 6 Head
    end;
  end;

  if Work_Center <> 'None' then
    StepWCERP(Work_Center);   
  else
    ShowMessage('Error!!! : No Resource Selected for Pin Bond. Check Panel Length & Thickness for each Inner/Sub');

  Fnc.SysSetAttrValue('Pin_Lam', false);
end;

procedure Hot_Press_SD;  
var
  Material : TStringList;
  FoilWtinKG : float;
  BaseCopper : string;
  FirstPlating : string;
  SecondPlating : string;

begin
  StepDeptERP('PRESS-A');

  if PinLamination then    // 2472
    StepWCERP('PRESS-C1');
  else
    StepWCERP('PRESS-C0');

  StepParamERP('Press Thickness', FormatFloat('0.000', PressThickness));

  if Fnc.SysGetAttrValue('NCRunX2') = true then
    StepInstructionERP('2NC_KRAFT'); // REMARK: PUT KRAFT PAPER IN BETWEEN PANEL

  // 1246 Remove PBOOK008 Instruction
  {if (
      (BaseCuTopUM = 12) and
      (
       (CustCodeFirstChar = 'W') or      // Use of this needs to be confirmed
       (CustCodeFirstChar = 'S')
      )
     )
  then
    StepInstructionERP('PBOOK008'); // =- USE COPPER FOIL - MWG FOIL }

  Material := TStringList.Create;
  Material.add('Foil');

  FoilWtinKG := 0.0;

  Fnc.SysGetCopperValues(True, false, BaseCopper, FirstPlating, SecondPlating);
  Case BaseCopper of
      '1/3oz' : FoilWtinKG := 0.0416 ;
      '1/2oz' : FoilWtinKG := 0.0588 ;
      '1oz'   : FoilWtinKG := 0.1088 ;
      '2oz'   : FoilWtinKG := 0.2215 ;
    end;

  if ( BaseCopper = '5um' ) or ( Fnc.SysGetAttrValue('Pin_Lam') ) then   // 1200 5um Cu Foil   // 1247 BOM Cu Foil Unit
    StepMaterialsERP(Material, 1);
  else
    StepMaterialsERP(Material, FoilWtinKG);
end;

function IsLaserDrilled: boolean;
begin
  result := false;

  if (LaserBTopHits > 0 ) or
     (LaserABotHits > 0 ) or
     (UVLaserB_Top > 0 ) or
     (UVLaserB_Top > 0 )
  then
    result := true;
end;

procedure ManualKKDistanceWarning;
begin

end

procedure KKXDYDDistance; // 2200 IL Shearing / Routing Info
var
  X_CMK_SF,
  Y_CMK_SF: float
begin
  X_CMK_SF := 0;
  Y_CMK_SF := 0;

  if (Fnc.SysGetAttrValue('MfgPartType') = 'Top') and
     (PressCycleMoreThan1 = false) and
     (FoilBuild = true)
  then
  begin
    if (ProdCodeLBlb = true) or (CustCode_Rule('Customer') = 'FA') then
    begin
      if Eng_JobType = 'Sample' then
         MessageDlg('For LB / Fanuc model, the manually entered value of ' +
                     IntToStr(Fnc.SysGetAttrValue('KK_Distance')) +
                    ' will be used as the KK distance. Please check and confirm', mtWarning, SetOf([mbOK]), 0);
    end
    else
    begin

      if Fnc.SysGetAttrValue('KK_Distance') = 0 then // 2550
        Fnc.SysSetAttrValue('KK_Distance', Fnc.SysGetAttrValue('Panel_Length') - 8)
      else
        MessageDlg('The manually entered value of ' +
                    IntToStr(Fnc.SysGetAttrValue('KK_Distance')) +
                    ' will be used as the KK distance. Please check and confirm', mtWarning, SetOf([mbOK]), 0);
    end;
  end
  else
  begin
    if (( Eng_JobType = 'Sample' ) and ( PressCycleMoreThan1 = true )) then
      //ShowMessage('ERROR!!! : MORE THAN ONE TIME PRESS, THE KEY IN VALUE: ' + IntToStr(Fnc.SysGetAttrValue('KK_Distance')) + ' WILL BE USED AS KK DISTANCE, PLEASE CHECK AND CONFIRM');
      MessageDlg('More than one time press, the manually entered value of ' +
                  IntToStr(Fnc.SysGetAttrValue('KK_Distance')) +
                  ' will be used as the KK distance. Please check and confirm', mtWarning, SetOf([mbOK]), 0);
  end;

  if ((Fnc.SysGetAttrValue('KK_Distance') < 100) or (Fnc.SysGetAttrValue('KK_Distance') > 700)) then
    MessageDlg('Wrong KK Distance, please feedback to Engineering!', mtError, SetOf([mbOK]), 0);

  StepParamERP('KK Distance', Fnc.SysGetAttrValue('KK_Distance'));

  if IsLaserDrilled then
  begin
    if Fnc.SysGetAttrValue('Panel_Length_XD') = 0 then
    begin // 1465
      if Fnc.SysGetAttrValue('Panel_Length') > 510 then
        Fnc.SysSetAttrValue('Panel_Length_XD', 460)
      else
        Fnc.SysSetAttrValue('Panel_Length_XD', 350)
    end;

    if Fnc.SysGetAttrValue('Panel_Width_XD') = 0 then
    begin
      if Fnc.SysGetAttrValue('MfgPartType') = 'Top' then  // 1465
        Fnc.SysSetAttrValue('Panel_Width_XD', Fnc.SysGetAttrValue('Panel_Width') - 10)
      else if Fnc.SysGetAttrValue('MfgPartType') = 'Sub' then
      begin
         if IsFirstSub(Fnc.SysGetAttrValue('ItemMatrlDesc')) then
           Fnc.SysSetAttrValue('Panel_Width_XD', Fnc.SysGetAttrValue('Panel_Width') - 10)
         else
           Fnc.SysSetAttrValue('Panel_Width_XD', Fnc.SysGetAttrValue('Panel_Width') - 14)
      end;
    end;

    StepParamERP('X Distance Length', Fnc.SysGetAttrValue('Panel_Length_XD'));
    StepParamERP('Y Distance Width', Fnc.SysGetAttrValue('Panel_Width_XD'));

    if ((Fnc.SysGetAttrValueTopLevel('QPCB_Length') > 0 ) and (Fnc.SysGetAttrValue('MfgPartType') = 'Top')) then
    begin
      X_CMK_SF := (0.076 * Fnc.SysGetAttrValueTopLevel('QPCB_Length') * 100 ) / Fnc.SysGetAttrValue('Panel_Length');
      Y_CMK_SF := (0.076 * Fnc.SysGetAttrValueTopLevel('Panel_Cavity') / Fnc.SysGetAttrValueTopLevel('QPCB_Length') * 100 ) / Fnc.SysGetAttrValue('Panel_Width');

      X_CMK_SF := Round1000(X_CMK_SF);
      Y_CMK_SF := Round1000(Y_CMK_SF);

      StepParamERP('X CMK SF', X_CMK_SF);
      StepParamERP('Y CMK SF', Y_CMK_SF);
    end;
  end;
end;

procedure Scope_Drilling_SD;
var
  fixedDim: string;
  controlRange: string;
begin
  fixedDim := '';
  controlRange := '';

  StepDeptERP('SCPDR-A');

  {if (
      (
       (Fnc.SysGetAttrValue('ProdCode') = '04LS') or
       (Fnc.SysGetAttrValue('ProdCode') = 'P04ls') or
       (Fnc.SysGetAttrValue('ProdCode') = '06LS') or
       (Fnc.SysGetAttrValue('ProdCode') = 'P06ls')
      )
      and
       (PressThickness > 1.4)
      and
      (Fnc.SysGetAttrValue('KK_Distance') < 598)
     )
  then
    StepWCERP('SCPDR-A')
  else
    StepWCERP('SCPDR-B0');}

  StepWCERP('SCPDR-A'); // 2471

  if (
      ((LaserBTopHits > 0) or (LaserABotHits > 0))
      // 784 - Scope Drill remarks for HDI jobs (multiple press or jobs with laser via)
      //or
      //(HasMultipleSubAssemblies = true)
     )                                                   
  then
    if UsesDefaultXYPanelDistance then               // 1465
      StepInstructionERP('SCPDR054');
    else
      StepInstructionERP('SCPDR001'); // REMARK:SCOPE DRILL FOR 4 MURAKI HOLES.

  if Fnc.SysGetAttrValue('NCRunX2') = true then //GLB_NC_RUN = 0 is not required
    StepInstructionERP('2NC_KRAFT'); //REMARK: PUT KRAFT PAPER IN BETWEEN PANEL

  // 1114 Fixed Scale Factor Info
  if Fnc.SysGetAttrValue('Scope_Drill_Fixed_X') > 0 then
  begin
    fixedDim := 'X = ' + FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Scope_Drill_Fixed_X'))) + 'mm; ' +
                'Y = ' + FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Scope_Drill_Fixed_Y'))) + 'mm';

    controlRange := 'X = ' + FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Scope_Drill_Fixed_X') - 0.05)) + '~' +
                             FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Scope_Drill_Fixed_X') + 0.05)) + 'mm; ' +
                    'Y = ' + FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Scope_Drill_Fixed_Y') - 0.05)) + '~' +
                             FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Scope_Drill_Fixed_Y') + 0.05)) + 'mm';

    StepParamERP('Fixed Dimension', fixedDim);
    StepParamERP('Control Range', controlRange);
  end;

  KKXDYDDistance; // 2200 IL Shearing / Routing Info
end;

procedure Scope_Drilling_EP_SD;
begin
  StepDeptERP('SCPDR-A');
  StepWCERP('SCPDR-A');

  StepParamERP('KK Distance', Fnc.SysGetAttrValue('KK_Distance'));
end;

procedure IL_RoutShear_Common;
var
  //Calc_KK : integer;
  ShearPnlPress : boolean;
  ShearSize : string;
  //X_CMK_SF : float;
  //Y_CMK_SF : float;
  Press_Thk_Nom : string;
  Press_Thk_Max : string;
  Press_Thk_Min : string;

begin
  //Calc_KK := 0;
  ShearPnlPress := false;
  ShearSize := '';
  //X_CMK_SF := 0.0;
  //Y_CMK_SF := 0.0;

  Press_Thk_Nom := '';
  Press_Thk_Max := '';
  Press_Thk_Min := '';

  // 2200 IL Shearing / Routing Info
  {if (
      (Fnc.SysGetAttrValue('MfgPartType') = 'Top') and
      (PressCycleMoreThan1 = false) and
      (FoilBuild = true)
     )
  then
  begin
    if (
        (ProdCodeLBlb = true) or
        (CustCode_Rule('Customer') = 'FA')
       )
    then
    begin
      if Eng_JobType = 'Sample' then
        MessageDlg('For LB / Fanuc model, the manually entered value of ' +
                  IntToStr(Fnc.SysGetAttrValue('KK_Distance')) +
                  ' will be used as the KK distance. Please check and confirm', mtWarning, SetOf([mbOK]), 0);
    end
    else
    begin
      Calc_KK := Fnc.SysGetAttrValue('Panel_Length') - 8;
      Fnc.SysSetAttrValue('KK_Distance', Calc_KK);
   end;
  end
  else
  begin
    if (( Eng_JobType = 'Sample' ) and ( PressCycleMoreThan1 = true )) then
      MessageDlg('More than one time press, the manually entered value of ' +
                  IntToStr(Fnc.SysGetAttrValue('KK_Distance')) +
                  ' will be used as the KK distance. Please check and confirm', mtWarning, SetOf([mbOK]), 0);
  end;

  if ((Fnc.SysGetAttrValue('KK_Distance') < 100) or (Fnc.SysGetAttrValue('KK_Distance') > 700)) then
    ShowMessage('ERROR!!! : Wrong KK Distance, please feedback to Engineering!');
  }
   //No need to calculate the Pressed Thickness, this will come from the stack-up

  //No need for special Pressed Min Thickness for "GM04", should be applied at the stack-up requirements

  //No need to calculate Press Thickness for Sub-Assemblies ("IC")

  Press_Thk_Nom := FloatToStr(Round1000(PressThickness));
  Press_Thk_Max := FloatToStr(Round1000(PressThickness * 1.08));
  Press_Thk_Min := FloatToStr(Round1000(PressThickness * 0.92));

  StepParamERP('Press Thickness', Press_Thk_Min + '~' + Press_Thk_Nom + '~' + Press_Thk_Max);
  //SysRouteInsInstruction('', 'See Stack-up diagram');     Removed per email from Alison 10/29

  if ((PPGTypesForILFinish = true) and (Fnc.SysGetAttrValue('BlindVias') = true)) then
    ShearPnlPress := true;

  // No need to check for RCC material, not used

  if Fnc.SysGetAttrValue('MfgPartType') = 'Top' then
  begin
    if ((Fnc.SysGetAttrValue('BlindVias') = true) and (Fnc.SysGetAttrValue('CappedVia') = true)) then
      ShearPnlPress := true;
  end
  else  // Can only be a sub getting pressed
  begin
    if (
        (Fnc.SysGetAttrValue('BlindVias') = true) and
        (PressThickness >= 0.6) and
        (Fnc.SysGetAttrValue('Min_Drill_Size') < 2.0)
       )
    then
      ShearPnlPress := true;
  end;

  if (( Fnc.SysGetAttrValue('Shear_Length') <> 0 ) and ( Fnc.SysGetAttrValue('Shear_Width') <> 0 )) then // Request from Herole 9/8 OneDesk
    ShearPnlPress := true;

  if ShearPnlPress then
    ShearSize := IntToStr(Fnc.SysGetAttrValue('Shear_Length')) + ' X ' + IntToStr(Fnc.SysGetAttrValue('Shear_Width'))
  else
    ShearSize := IntToStr(Fnc.SysGetAttrValue('Panel_Length')) + ' X ' + IntToStr(Fnc.SysGetAttrValue('Panel_Width'));

  if ShearSize = '0 X 0' then
    ShowMessage('ERROR!!! : Shear Size cannot be 0 X 0');

  //StepParamERP('KK Distance', Fnc.SysGetAttrValue('KK_Distance'));
  StepParamERP('Shear Size', ShearSize);

  if IsLaserDrilled then
  begin
    // 2200 IL Shearing / Routing Info
    {if Fnc.SysGetAttrValue('Panel_Length_XD') = 0 then
    begin // 1465
      if Fnc.SysGetAttrValue('Panel_Length') > 510 then
        Fnc.SysSetAttrValue('Panel_Length_XD', 460)
      else
        Fnc.SysSetAttrValue('Panel_Length_XD', 350)
    end;

    if Fnc.SysGetAttrValue('Panel_Width_XD') = 0 then
    begin
      if Fnc.SysGetAttrValue('MfgPartType') = 'Top' then  // 1465
        Fnc.SysSetAttrValue('Panel_Width_XD', Fnc.SysGetAttrValue('Panel_Width') - 10)
      else if Fnc.SysGetAttrValue('MfgPartType') = 'Sub' then
      begin
         if IsFirstSub(Fnc.SysGetAttrValue('ItemMatrlDesc')) then
           Fnc.SysSetAttrValue('Panel_Width_XD', Fnc.SysGetAttrValue('Panel_Width') - 10)
         else
           Fnc.SysSetAttrValue('Panel_Width_XD', Fnc.SysGetAttrValue('Panel_Width') - 14)
      end;
    end;

    StepParamERP('X Distance Length', Fnc.SysGetAttrValue('Panel_Length_XD'));
    StepParamERP('Y Distance Width', Fnc.SysGetAttrValue('Panel_Width_XD'));

    if ((Fnc.SysGetAttrValueTopLevel('QPCB_Length') > 0 ) and (Fnc.SysGetAttrValue('MfgPartType') = 'Top')) then
    begin
      X_CMK_SF := (0.076 * Fnc.SysGetAttrValueTopLevel('QPCB_Length') * 100 ) / Fnc.SysGetAttrValue('Panel_Length');
      Y_CMK_SF := (0.076 * Fnc.SysGetAttrValueTopLevel('Panel_Cavity') / Fnc.SysGetAttrValueTopLevel('QPCB_Length') * 100 ) / Fnc.SysGetAttrValue('Panel_Width');

      X_CMK_SF := Round1000(X_CMK_SF);
      Y_CMK_SF := Round1000(Y_CMK_SF);

      StepParamERP('X CMK SF', X_CMK_SF);
      StepParamERP('Y CMK SF', Y_CMK_SF);
    end;
    }
    StepInstructionERP('FINIL001'); // REMARKS:4- HOLE MARK CENTER DRILL.

  end;

  if ((CustCode_Rule('Customer') = 'FA') and (Fnc.SysGetAttrValue('KK_Distance') = 502)) then
  begin
    StepInstructionERP('FINIL022'); //“ – MEASURE 7 HOLES”
    StepInstructionERP('FINIL036'); //“REMARK : Check for KK off-set.”
    StepInstructionERP('FINIL026'); // REMARK : K-K offset from panel center : 49.24mm
    StepInstructionERP('FINIL025'); // REMARK : Orientation hole from K point. X : 2.08 Y : 57.15
  end;

  if Fnc.SysGetAttrValue('NCRunX2') = true then
    StepInstructionERP('2NC_KRAFT'); // REMARK: PUT KRAFT PAPER IN BETWEEN PANEL

end;

procedure IL_Route_SD;
var
  CalcStackHt : integer;
begin
  CalcStackHt := 0.0;

  StepDeptERP('FINIL-B');
  StepWCERP('FINIL-B');

  IL_Rout_StackHeight;  // 2289

  if Fnc.SysGetAttrValue('NCRunX2') = true then
    StepInstructionERP('2NC_KRAFT'); // REMARK: PUT KRAFT PAPER INBETWEEN PANEL

  if Fnc.SysGetAttrValue('IL_Finish_Rout') = true then
    StepInstructionERP('FINIL010'); //  PLS USE SPECIFIC ROUTING TAPE (PROGRAME) FOR THIS MODEL ONLY.
    
end;                  

procedure IL_Bevel_SD;               
begin
  StepDeptERP('FINBE-A');

  if PressThickness > 3.5 then
    StepWCERP('FINBE-B0');
  else
    StepWCERP('FINBE-A0');

  IL_RoutShear_Common;
end;

procedure IL_Shearing_SD;
begin
  StepDeptERP('FINIL-A');
  StepWCERP('FINIL-A');

  IL_RoutShear_Common;

end;

procedure Outgoing_SD;
begin
  StepDeptERP('FINGO-A');

  if PressThickness > 2.0 then
    StepWCERP('FINGO-A0');
  else
  begin
    if PressThickness > 0.6 then
      StepWCERP('FINGO-A0');
    else
      StepWCERP('FINGO-B0');
  end;
end;

procedure MicroEtchCommon;
var

  sUEtch : string;
  cuAfterMEtch : integer;

begin

  sUEtch := '';

  if ((UVLaserB_Top > 0) or (UVLaserA_Bot > 0)) then
  begin

    if BaseCuTopUM = 18 then
    begin

      Fnc.SysSetAttrValue('UEtch_Spec', '18 TO 9.5~12');
      Fnc.SysSetAttrValue('UEtch_Cu', 9.5);
      MicroEtchDone := true;

    end;

    if BaseCuTopUM = 12 then
    begin

      Fnc.SysSetAttrValue('UEtch_Spec', '12 TO 7~9.5');
      Fnc.SysSetAttrValue('UEtch_Cu', 7.0);
      MicroEtchDone := true;

    end;
    // DONE AS PER IES. Note that the logic does not handle anything other than 12 or 18 um base copper.
  end
  else
  begin

    if BaseCuTopUM = 18 then
    begin

      if Fnc.SysGetAttrValue('UEtch_Value') <> '' then
      begin

        sUEtch := copy(Fnc.SysGetAttrValue('UEtch_Value'), 1, 8);
        Fnc.SysSetAttrValue('UEtch_Spec', '18 to ' + sUEtch);

        sUEtch := copy(sUEtch, 1, 1);
        try
          Fnc.SysSetAttrValue('UEtch_Cu', StrToFloat(sUEtch));
        except
          ShowMessage('Error converting User Entered UEtch Spec to a number');
        end;

      end
      else
      begin

        Fnc.SysSetAttrValue('UEtch_Spec', '18 TO 9~12');
        Fnc.SysSetAttrValue('UEtch_Cu', 9.0);

      end;

      MicroEtchDone := true;

    end;

    if BaseCuTopUM = 12 then
    begin

      Fnc.SysSetAttrValue('UEtch_Spec', '12 TO 7~9.5');
      Fnc.SysSetAttrValue('UEtch_Cu', 7.0);

    end;

    MicroEtchDone := true;

  end;

  //New calculation of Micro-etch values per Herole, 364 Surface Cu Calculation, message 3/10/17
  if (( CoreBuild or SubAssemblyCoreBuild ) and ( Fnc.SysGetAttrValue('LayerCount') > 2 )) then
  begin

    Fnc.SysSetAttrValue('UEtch_Spec', IntToStr( InProcessCuThk ) + ' TO ' + IntToStr( InProcessCuThk - 4 ));
    Fnc.SysSetAttrValue('UEtch_Cu', InProcessCuThk - 4);

  end
  else
  begin

    case BaseCuTopUM of

      35 : cuAfterMEtch := 29;
      18 : cuAfterMetch := 12;
      12 : cuAfterMetch := 8;

    else
      cuAfterMEtch := BaseCuTopUM;

    end;

    Fnc.SysSetAttrValue('UEtch_Spec', IntToStr( BaseCuTopUM ) + ' TO ' + IntToStr( cuAfterMEtch ));
    Fnc.SysSetAttrValue('UEtch_Cu', cuAfterMetch);

  end;

  //InProcessCuThk := Fnc.SysGetAttrValue('UEtch_Cu'); //364 Surface Cu Calculation
  UpdateInProcessCuThk(Fnc.SysGetAttrValue('UEtch_Cu'));
  //ShowMessage( 'Cu Thk After Micro-Etch ' + IntToStr(InProcessCuThk) + 'um'  );

  //StepParamERP('Micro-Etch Spec', Fnc.SysGetAttrValue('UEtch_Spec'));
  // 1138 Micro Etch for Laser Via
  StepParamERP('Micro-Etch Spec', Fnc.SysGetAttrValue('UEtch_Cu'));

  if ((Fnc.SysGetAttrValue('NCRunX2') = true) and (NCRun = 0)) then
    StepInstructionERP('2NC_PESHET'); // REMARK: PUT PE SHEET IN BETWEEN PANEL
    
end;

procedure MicroEtch_SD;
begin

  StepDeptERP('METCH-A');
  StepWCERP('METCH-A');

  MicroEtchCommon;

end;

procedure MicroEtchHAL_SD;
begin

  StepDeptERP('HALPT-A0');
  StepWCERP('HALPT-A0');

  MicroEtchCommon;

end;

{procedure MicroEtchCuThin_SD;  Not in use.
begin
  StepDeptERP('METCH-A');
  StepWCERP('METCH-A');
  StepParamERP('Note', 'Micro-Etch for Cu Thin');
end;}

procedure MicroEtch_DirLaser_Common; // 2615
begin

  UpdateInProcessCuThk(InProcessCuThk - 3 ); // 1568 Micro-Etch after Direct Laser
  
  Fnc.SysSetAttrValue('UEtch_Cu', InProcessCuThk);

  if InProcessCuThk <= 5 then StepInstructionERP('METCH012');
  else if InProcessCuThk <= 12 then StepInstructionERP('METCH014');
  else
  begin

    StepParamERP('Remark', '2um reduction (bare Cu coupon/Dummy)' );
    StepParamERP('Micro-Etch Spec', IntToStr(InProcessCuThk) + ' ± 0.5µm');

  end;

end;

procedure MicroEtch_DirLaser_SD; // 1307
begin

  StepDeptERP('METCH-A');
  StepWCERP('METCH-A');

  MicroEtch_DirLaser_Common;  // 2615

end;

procedure MicroEtch_DirLaserHAL_SD;   // 2615
begin

  StepDeptERP('HALPT-A0');
  StepWCERP('HALPT-A0');

  MicroEtch_DirLaser_Common;

end;

procedure UV_LaserCommon_SD(LaserSide : string);
begin
  StepDeptERP('LASUV-A');
  StepWCERP('LASUV-A');

  StepParamERP('Stack Height', Fnc.SysGetAttrValue('Laser_StkHt'));

  if Fnc.SysGetAttrValue('UEtch_Cu') = 0.0 then
    StepParamERP('Base Cu', IntToStr(BaseCuTopUM));
  else
    //StepParamERP('Micro-Etch Spec', Fnc.SysGetAttrValue('UEtch_Spec'));
    // 1138 Micro Etch for Laser Via
    StepParamERP('Micro-Etch Spec', Fnc.SysGetAttrValue('UEtch_Cu'));

end;

procedure UV_LaserA_SD;
begin
  UV_LaserCommon_SD('LaserA');

  StepParamERP('Bottom Layer', Fnc.SysGetAttrValue('BotLayer'));
  StepParamERP('Laser Material', GetLaserMaterial('LaserSideA'));
  StepParamERP('Laser Hits', UVLaserA_Bot);

end;

procedure UV_LaserB_SD;
begin
  UV_LaserCommon_SD('LaserB');

  StepParamERP('Top Layer', Fnc.SysGetAttrValue('TopLayer'));
  StepParamERP('Laser Material', GetLaserMaterial('LaserSideB'));
  StepParamERP('Laser Hits', UVLaserB_Top);

end;

procedure Conf_Mask_SD;
var
  fixedDim: string;
  controlRange: string;
begin
  fixedDim := '';
  controlRange := '';
  //O_PHO_CONF$ = 'Conformal Mask'
  // CONFORMAL_ =  Conformal Mask Size
  // DRY FILM = Conformal Mask Dry Film Thickness
  // MASK_SIZE = ENTER AFTER ETCHING CONFORMAL MASK SIZE

  StepDeptERP('EXPOL-A');

  OL_Photo_Common_SD('ConformalMask');

  //Search_Table_PhotoLine('ConformalMask', PhotoLine, AltLine, ProdResource, DesLine);
  //StepWCERP(ProdResource);

  StepParamERP('Conf. Mask Size', Fnc.SysGetAttrValue('ConfMask_Size'));

  if Fnc.SysGetAttrValue('ConfMask_Size_Skip') > 0 then
    StepParamERP('Conf. Mask Size - Skip', Fnc.SysGetAttrValue('ConfMask_Size_Skip'));

  StepParamERP('Conf. Mask Thickness', Fnc.SysGetAttrValue('ConfMask_Thk'));

  //StepParamERP('Shear Size', IntToStr(Fnc.SysGetAttrValue('Panel_Length_Press')) + ' X ' + IntToStr(Fnc.SysGetAttrValue('Panel_Width_Press')));

  if ((Fnc.SysGetAttrValue('ConfMask_Thk') = 38) and (Fnc.SysGetAttrValue('ConfMask_Size_AE') < 115.0)) then
    ShowMessage('If Conf Mask Dry Film Thickness = 38 then After Etching Mask Size must be > 115');

  StepParamERP('Times Pressed', IntToStr(NumTimesPress));

  // 1114 Fixed Scale Factor Info
  if Fnc.SysGetAttrValue('ConfMask_FSF_X') > 0 then
  begin
    fixedDim := 'X = ' + FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('ConfMask_FSF_X'))) + '%; ' +
                'Y = ' + FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('ConfMask_FSF_Y'))) + '%';

    controlRange := 'X = ' + FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('ConfMask_FSF_X') - Fnc.SysGetAttrValue('ConfMask_FSF_X_Tol'))) + '~' +
                             FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('ConfMask_FSF_X') + Fnc.SysGetAttrValue('ConfMask_FSF_X_Tol'))) + '%; ' +
                    'Y = ' + FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('ConfMask_FSF_Y') - Fnc.SysGetAttrValue('ConfMask_FSF_Y_Tol'))) + '~' +
                             FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('ConfMask_FSF_Y') + Fnc.SysGetAttrValue('ConfMask_FSF_Y_Tol'))) + '%';

    StepParamERP('Fixed Scale Factor', fixedDim);
    StepParamERP('Control Range', controlRange);
  end;

end;

procedure OL_AOI_Common_SD(AOIforCMK : boolean);
begin
  StepDeptERP('INSOL-A');
  StepWCERP('INSOL-A');

  if ((Fnc.SysGetAttrValue('BlindVias') = true) or (CheckBuriedDrill(1) = true)) then
  begin
    if NOT ((Fnc.SysGetAttrValue('BlindVias') = true) and (CheckBuriedDrill(1) = true)) then
    begin
      if Fnc.SysGetAttrValue('BlindVias') = true then
        StepParamERP('Via Type', 'Blind');

      if CheckBuriedDrill(1) = true then
        StepParamERP('Via Type', 'Buried');
    end
    else
    begin
      StepParamERP('Via Type', 'Blind & Buried');
    end;
  end;

  if ((AOIforCMK = true) and (CustCode_Rule('Customer') = 'FA')) then
    StepInstructionERP('INSOL010'); // - 100% AOI

  StepParamERP('Thickness', FormatFloat('0.000', LayupThickness));
  StepParamERP('Annular', Fnc.SysGetAttrValue('Annular'));
  StepParamERP('X Out', Fnc.SysGetAttrValue('X_Out'));

end;

procedure OL_AOI_CM_SD;
begin

  OL_AOI_Common_SD(true);

  if Fnc.SysGetAttrValue('Application') = 'AUTOMOTIVE' then
    StepInstructionERP('INSOL008'); //TRACKPAD :100% AOI.
end;

procedure OL_AOI_SD;
begin
  OL_AOI_Common_SD(false);

  case Fnc.SysGetAttrValueTopLevel('Circ_Repair') of
    'INSOL001' : StepInstructionERP('INSOL001'); // CIRCUIT REPAIR :REPAIR PER TRACE NOT EXCEEDING 2,BREAKS NOT EXCEEDING 3mm
    'INSOL002' : StepInstructionERP('INSOL002'); // CIRCUIT REPAIR :NOT ALLOWED
    'INSOL003' : StepInstructionERP('INSOL003'); // CIRCUIT REPAIR :A=3,B=3,SZ=3
    'INSOL004' : StepInstructionERP('INSOL004'); // CIRCUIT REPAIR :TRACE WELD MAX 2 PER PCB ADHESIVE TESTCIPC-7M-650 METHOD 2-4.28.1
    'INSOL005' : StepInstructionERP('INSOL005'); // CIRCUIT REPAIR :REPAIR TRACE NOT EXCEEDING 3MM,LENGTH NOT EXCEEDING 3MM
    else         ShowMessage('Error!!! : Circuit Repair Value Out of Range');
  end;

  StepParamERP('Land Area', Fnc.SysGetAttrValue('Land_Area'));
  StepParamERP('Line Width', Fnc.SysGetAttrValue('Line_Width'));
  StepParamERP('Min Gap', Fnc.SysGetAttrValue('Min_Gap'));

  if CustCode_Rule('Customer') = 'FA' then
    StepInstructionERP('INSOL030'); //REMARK : Sampling cu pad scale measurement smart scope”

  if (
      ((BoardFinish = 'Immersion Tin') or (ProdCodeLX)) and
      (LayupThickness <= 3.0)
     )
  then
    StepInstructionERP('IMTIN002'); // REMARK: Manual masking of resist alignment pads.”

end;

procedure IL_AOI_OL_ThinPanel_SD;
begin
  OL_AOI_SD;
  StepDeptERP('INSIL-A');
  StepWCERP('INSIL-A');
end

procedure CO2_LaserCommon_SD(LaserSide : string);
var
  CurrentCuThk : float;
begin
  StepDeptERP('LASDR-A');

  if Fnc.SysGetAttrValue('UEtch_Cu') = 0.0 then
    CurrentCuThk := BaseCuBotUM
  else
    CurrentCuThk := Fnc.SysGetAttrValue('UEtch_Cu');

  if Fnc.SysGetAttrValue('ConfMask_Size') > 150 then
    StepWCERP('LASDR-A');  // 959 Laser MAchine Resource Code
  else
  begin
    if CurrentCuThk > 18 then
      StepWCERP('LASDR-A');
    else
      StepWCERP('LASDR-A');// 959 Laser MAchine Resource Code
  end;

  //StepParamERP('Stk Height', Fnc.SysGetAttrValue('Laser_StkHt'));

  if Fnc.SysGetAttrValue('UEtch_Cu') = 0.0 then
    StepParamERP('Cu Thickness', IntToStr(CurrentCuThk));
  else
    //StepParamERP('Micro-Etch Spec', Fnc.SysGetAttrValue('UEtch_Spec'));
    // 1138 Micro Etch for Laser Via
    StepParamERP('Micro-Etch Spec', Fnc.SysGetAttrValue('UEtch_Cu'));

  StepInstructionERP('LASDR017'); // 836 - Instruction Code Update

end;

procedure CO2_LaserA_SD;
begin
  CO2_LaserCommon_SD('LaserA');

  StepParamERP('Bottom Layer', Fnc.SysGetAttrValue('BotLayer'));
  //StepParamERP('Laser Mat', GetLaseredMaterials(Fnc.SysGetAttrValue('BotLayer')));
  StepParamERP('Laser Hits', LaserABotHits);

  //SysRouteInsInstruction('', InsertBlindViaDrillDepth('A'));
  InsertBlindViaInfo('A');              
  //SysRouteInsInstruction('', GetLaseredMaterials(Fnc.SysGetAttrValue('BotLayer')));

  //if Fnc.SysGetAttrValue('SViaStp_PadCuThk_A') <> '' then
  //  StepParamERP('SKIPSTP_TA', Fnc.SysGetAttrValue('SViaStp_PadCuThk_A'));
                                                                                                                          
end;

procedure CO2_LaserB_SD;
begin
  CO2_LaserCommon_SD('LaserB');

  StepParamERP('Top Layer', Fnc.SysGetAttrValue('TopLayer'));
  //StepParamERP('Laser Mat', GetLaseredMaterials(Fnc.SysGetAttrValue('TopLayer')));
  StepParamERP('Laser Hits', LaserBTopHits);

  //SysRouteInsInstruction('', InsertBlindViaDrillDepth('B'));
  InsertBlindViaInfo('B');

  //SysRouteInsInstruction('', GetLaseredMaterials(Fnc.SysGetAttrValue('TopLayer')));

  //if Fnc.SysGetAttrValue('SViaStp_PadCuThk_B') <> '' then
  //  StepParamERP('SKIPSTP_TB', Fnc.SysGetAttrValue('SViaStp_PadCuThk_B'));

end;

procedure Hist_Line_SD;
begin
  StepDeptERP('HISTL-A');
  StepWCERP('HISTL-A');
end;

procedure Dir_LaserCommon;
begin
  StepDeptERP('LASDR-A');
  StepWCERP('LASDR-A');
  StepInstructionERP('LASDR017');
end;

procedure Dir_LaserA_SD;   // 1307 Direct Laser
begin
  Dir_LaserCommon;
  StepParamERP('Bottom Layer', Fnc.SysGetAttrValue('BotLayer'));
  StepParamERP('Laser Hits', LaserABotHits);
  InsertBlindViaInfo('A');
  //StepParamERP('Laser Size', Fnc.SysGetAttrValue('Direct_Laser_Size'));
end;

procedure Dir_LaserB_SD;
begin
  Dir_LaserCommon;
  StepParamERP('Top Layer', Fnc.SysGetAttrValue('TopLayer'));
  StepParamERP('Laser Hits', LaserBTopHits);
  InsertBlindViaInfo('B');
  //StepParamERP('Laser Size', Fnc.SysGetAttrValue('Direct_Laser_Size'));
end;

procedure Laser_Insp_SD
begin
  StepDeptERP('FINAL-A');
  StepWCERP('FINAL-A');
end;

procedure Desmear_Std_Attr;
begin
  StepParamERP('Pre-preg Material', Fnc.SysGetAttrValue('PPGMat'));
  StepParamERP('Core Material', Fnc.SysGetAttrValue('CoreMat'));

  if Fnc.SysGetAttrValue('LayerCount') > 2 then // 2 Layer Fixes
    StepParamERP('Thickness', FormatFloat('0.000', PressThickness));
  else
    StepParamERP('Thickness', FormatFloat('0.000', DSThicknessB4Plating));
end;

procedure Desmear_SD;
var
  Instruction : string;
begin
  StepDeptERP('DMEAR-A');
  StepWCERP('DMEAR-A');

  {Instruction := 'NOTE : MULTIPLE PROCESS STEPS REQUIRED' + #13 +
                  'REFER TO SHOP FLOOR INSTRUCTIONS' + #13 +
                  'FOR ACTUAL DEMSEAR/BAKE/PLASMA STEPS';}

  StepInstructionERP('DMEAR060');  // 836 Instruction Code Update
  Desmear_Std_Attr;
end;

procedure DeSmear_Params(Rte_Step : string);
var
  j: integer;
  Material: string;
  Thickness: double;
  ParamList: TStringList;
  ParamName: string;
  ParamValue: string;
begin

  if Fnc.SysGetAttrValue('LayerCount') > 2 then // 2 Layer Fixes
    Thickness := PressThickness //LayupThickness;   987 Wrong Desmear Flow
  else
    Thickness := DSThicknessB4Plating;

  Material := GetDesmearSearchMaterial;
  ParamList := GetDesmearStepParameters(Material, Thickness, Rte_Step);

  if ParamList.Count > 0 then
  begin
    //showmessage(ParamList.Strings[j] + #13#13 + ParamList.Text);
    for j := 0 to ParamList.Count - 1 do
    begin
      ParamName := ParamList.Names[j];
      ParamValue := ParamList.Values[ParamName];

      StepParamERP(ParamName, ParamValue);

      //showmessage('Name: ' + QuotedStr(ParamName) + ', Value: ' + QuotedStr(ParamValue));
    end;
    ParamList.Free;
  end;
end;

procedure Deburr_SD;  // 2466
begin

  StepDeptERP('DBURR-A');
  StepWCERP('DBURR-B0');
  StepParamERP('Remarks', 'Buffing Only');
  DeSmear_Params('Deburr');

end;

procedure Desmear_Common(Line : string);
begin
  StepDeptERP('DMEAR-A');

  case Line of
    'DM' : begin StepWCERP('DMEAR-C0'); StepInstructionERP('METAL004'); end;
    'HM' : begin StepWCERP('DMEAR-A0'); end;
  end;

  Desmear_Std_Attr;
end;

// Steps are no linger used
{procedure Desmear_DM2_SD;
begin
  Desmear_Common('DM');
  DeSmear_Params('DM2');
end;

procedure Desmear_DM2_1_SD;
begin
  Desmear_Common('DM');
  DeSmear_Params('DM2-1');
end;

procedure Desmear_DM2_2_SD;
begin
  Desmear_Common('DM');
  DeSmear_Params('DM2-2');
end;}

procedure Desmear_Holl_SD;
begin
  if MechBlindViaSide <> 'None' then    // MEch Blind Vias
    StepParamERP('Remark', 'With Mech Blind Vias');

  Desmear_Common('HM');
  DeSmear_Params('Hollmuller Desmear');
end;

procedure Desmear_Holl2_1_SD;
begin
  Desmear_Common('HM');
  DeSmear_Params('Hollmuller Desmear2-1');
end;

procedure Desmear_Holl2_2_SD;
begin
  Desmear_Common('HM');
  DeSmear_Params('Hollmuller Desmear2-2');
end;

procedure Desmear_Baking_SD;
begin
  StepDeptERP('DMBAK-A');
  StepWCERP('DMBAK-A');

  DeSmear_Params('Oven Baking');
end;

procedure Desmear_Baking_2_SD;
begin
  StepDeptERP('DMBAK-A');
  StepWCERP('DMBAK-A');

  DeSmear_Params('Oven Baking2');
end;

procedure Desmear_AlkRinse_SD;
begin
  StepDeptERP('ARINS-A');  // 836 - Instruction Code Update
  StepWCERP('ARINS-A');

  StepInstructionERP('ARINS003'); // 836 - Instruction Code Update

  //DeSmear_Params('Alkaline Rinse');
end;

procedure Plasma_SD;
begin
  StepDeptERP('PLASM-A');
  StepWCERP('PLASM-A0');
  DeSmear_Params('Plasma');
end;

procedure Plasma_2_SD;
begin
  StepDeptERP('PLASM-A');
  StepWCERP('PLASM-A0');
  DeSmear_Params('Plasma2');
end;

procedure Plasma_3_SD;
begin
  StepDeptERP('PLASM-A');
  StepWCERP('PLASM-A0');

  StepParamERP('Remark', 'Program 8');

end;

// 978
procedure Vertical_Desmear_SD;
begin
 // StepDeptERP('DMEAR-B0');
//  StepWCERP('DMEAR-B0');
  StepDeptERP('DMEAR-V01');
  StepWCERP('DMEAR-V01');
  //DeSmear_Params('Vertical Desmear');
end;

procedure Vertical_Desmear_2_SD;
begin
//  StepDeptERP('DMEAR-B0');
//  StepWCERP('DMEAR-B0');
  StepDeptERP('DMEAR-V01');
  StepWCERP('DMEAR-V01');
  DeSmear_Params('Vertical Desmear2');
end;

procedure Desmear_CappedVia_SD;
begin
  //Desmear_Common('HM');
  StepDeptERP('DMEAR-A');
  StepWCERP('DMEAR-A0'); 
                                                                 

  StepParamERP('Pre-preg Material', Fnc.SysGetAttrValue('PPGMat'));
  StepParamERP('Core Material', Fnc.SysGetAttrValue('CoreMat'));

  if Fnc.SysGetAttrValue('LayerCount') > 2 then // 2 Layer Fixes
    StepParamERP('Thickness', FormatFloat('0.000', LayupThickness));
  else
    StepParamERP('Thickness', FormatFloat('0.000', DSThicknessB4Plating));

  // Updated per request from Jenny 09/16/15
  StepParamERP('Buffing', 'OFF');
  StepParamERP('HP Rinse', 'OFF');
  StepParamERP('Sweller', 'OFF');
  StepParamERP('Promoter / Neutralizer', '3.5m/min');

end;

procedure Hole_Cleaning_SD;
begin
  StepDeptERP('CURIN-U');
  StepWCERP('CURIN-U');
  
  DeSmear_Params('Hole Cleaning');
end;

procedure CuThinning_SD;
begin                 
  StepDeptERP('EPBUF-A');
  StepWCERP('EPBUF-A');
  StepParamERP('Buffing Type', Fnc.SysGetAttrValue('CoreBuildCuThin'));
  StepInstructionERP('ROUTE003'); //REMARKS : CLEAR BUFFING.  (From OL Main Flow)
end;

function GetDrillEntrySheet : string;  // 912 Mech Blind Via Entry MAterial
var              
  Entry_Sheet_Mode : string;
begin
  result := '';
  Entry_Sheet_Mode := '';

  if (
      ((NCRun <= 1) and (Fnc.SysGetAttrValue('Drill_Entry_Sht') = 'Auto')) or
      ((NCRun = 2) and (Fnc.SysGetAttrValue('Drill_Entry_Sht_2') = 'Auto'))
     )
  then
  begin
    if Fnc.SysGetAttrValueTopLevel('Wicking_Max') <> 'None' then
      Entry_Sheet_Mode := 's';
    else if Fnc.SysGetAttrValueTopLevel('Cust_Spec') = '192192' then
      Entry_Sheet_Mode := 'n';
    else
      Entry_Sheet_Mode := 'm';

    if PressThickness > 3.6 then
      Entry_Sheet_Mode := Entry_Sheet_Mode + ';a'
    else
      Entry_Sheet_Mode := Entry_Sheet_Mode + ';l';

    if (( Entry_Sheet_Mode = 'm;l' ) and ( Fnc.SysGetAttrValue('TG_Class') = 'Hybrid' )) then  // CNC Entry Sheet updated Rule (613)
      result := 'LAE1007'
    else
      result := GetCNCEntrySheet(Entry_Sheet_Mode);

    if result = '' then
      ShowMessage('No Entry Sheet Material Found. Check inputs and run again. If inputs are OK, contact Process Engineer for Entry Sheet material and set manually & re-run the rules.');

    // NOTE. Entry Sheet for 2X NC Drill is handled in the table lookup variable. Different factor is the min drill size. 2X NC Drill uses Min_Drill_2
  end
  else  // Use set the Entry Sheet Manually
  begin
    if NCRun <= 1 then
      result := Fnc.SysGetAttrValue('Drill_Entry_Sht')
    else
      result := Fnc.SysGetAttrValue('Drill_Entry_Sht_2')
  end;
end;

function CNC_ManualOverride: boolean;
begin
  result := false;
  if NCRun = 1 then
  begin
    if Fnc.SysGetAttrValue('Stack_Hgt_Ovr') = true then
    begin
      Fnc.SysSetAttrValue('Stack_Hgt', Fnc.SysGetAttrValue('Stack_Hgt_User'));
      result := true;
    end;

    if Fnc.SysGetAttrValue('Flute_Len_Ovr') = true  then   // 843 Process Override Rule
      Fnc.SysSetAttrValue('Flute_Len', Fnc.SysGetAttrValue('Flute_Len_User'));
  end
  else if NCRun = 2 then
  begin
    if Fnc.SysGetAttrValue('Stack_Hgt_2_Ovr') = true then
    begin
      Fnc.SysSetAttrValue('Stack_Hgt_2', Fnc.SysGetAttrValue('Stack_Hgt_2_User'));
      result := true;
    end;

    if Fnc.SysGetAttrValue('Flute_Len_Ovr_2') = true then  // 843 Process Override Rule
      Fnc.SysSetAttrValue('Flute_Len_2', Fnc.SysGetAttrValue('Flute_Len_2_User'));
  end;
end;

procedure CNC_Drl_StkHght_Flt_Len;
var
  TableName : string;

  PanelThickness :  float;
  PanelNumLayers : integer;

  StackHeight : integer;
  Slot_StackHeight : integer;
  Flute : string;
  Slot_Flute : string;

begin
  //
  StackHeight := 0;
  Slot_StackHeight := 0;
  Flute := '';
  Slot_Flute := '';

  if Fnc.SysGetAttrValue('Land_Area') <= 0.10 then
  begin
    TableName := 'CNC_Drilling_New_C';
    //Stack Height is set to 1 in table search code
  end
  else
    //TableName := 'CNC_Drilling_New_B';  // Table 'A' is now Table 'B' in new flowchart - will look at renamimg these later
    TableName := 'CNC_Drilling_B_1321';  // 1321

  PanelThickness := Get_Panel_Thickness;
  PanelNumLayers := Fnc.SysGetAttrValue('LayerCount');

  if not GetCNCDrilling_StackHeight(TableName, Min_Drill, PanelThickness, PanelNumLayers, StackHeight, Flute) then
  begin
    //showmessage('CNC Stack Height ' + TableName + ': search failed');

    if not CNC_ManualOverride then
    begin
      if NCRun = 1 then
      begin
        Fnc.SysSetAttrValue('Stack_Hgt', 0);
        Fnc.SysSetAttrValue('Flute_Len', '0.0');
        Fnc.UserRouteGenAbort := true;
      end
      else if NCRun = 2 then
      begin
        Fnc.SysSetAttrValue('Stack_Hgt_2', 0);
        Fnc.SysSetAttrValue('Flute_Len_2', '0.0');
        Fnc.UserRouteGenAbort := true;
      end
    end
    else
      MessageDlg('Manual override values used for Stack Height / Flute Length', mtInformation, SetOf([mbOK]), 0);

  end
  else
  begin
    //showmessage(TableName + ', StackHeight: ' + IntToStr(StackHeight) + ', Flute: ' + Flute);
    if Min_Slot > 0.0 then
    begin
      TableName := 'CNC_Drilling_D';

      if not GetCNCDrilling_StackHeight(TableName, Min_Slot, PanelThickness, PanelNumLayers, Slot_StackHeight, Slot_Flute) then
      begin
        showmessage('CNC Slot Stack Height ' + TableName + ': search failed');
        Fnc.SysSetAttrValue('Stack_Hgt', 0);
        Fnc.SysSetAttrValue('Flute_Len', '0.0');
      end
      else
      begin
        if Slot_StackHeight < StackHeight then
          StackHeight := Slot_StackHeight;
      end;
    end;

    //Flute_Len := StrToFloat(Copy(Flute, 1, 3));

    // 1484 NC Stack height special rule update
    // If Board Thickness is >1.5mm, =/<3.6mm  AND min drill =/<0.25mm AND have BACKDRILL, NC Stack height must be 1
    // Min_Drill, PanelThickness
    if ( PanelThickness > 1.50 ) and
       ( PanelThickness <= 3.60 ) and
       ( Min_Drill <= 0.25 ) and
       ( (Fnc.SysGetAttrValue('BackDrill') ) or (Fnc.SysGetAttrValue('BackDrill_Epoxy')) )
    then
      StackHeight := 1;

    if Fnc.SysGetAttrValue('NCRunX2') = true then
    begin
      if NCRun = 1 then
      begin
        Fnc.SysSetAttrValue('Stack_Hgt', StackHeight);
        Fnc.SysSetAttrValue('Flute_Len', Flute);
      end;
      else
      begin
        Fnc.SysSetAttrValue('Stack_Hgt_2', StackHeight);
        Fnc.SysSetAttrValue('Flute_Len_2', Flute);
      end;
    end
    else
    begin
      Fnc.SysSetAttrValue('Stack_Hgt', StackHeight);
      Fnc.SysSetAttrValue('Flute_Len', Flute);
    end;

    // Manual Override
    CNC_ManualOverride;
  end;
end;

procedure NC_Drill_SD;
var
  Entry_Sheet_Mat : string;
  fixedDim: string;
  controlRange: string;
  fixedDim2: string;
  controlRange2: string;
begin

  NCRun := NCRun + 1;

  if Fnc.SysGetAttrValue('NCRunX2') = true then
  begin
    if NCRun = 1 then
    begin
      Min_Drill := Fnc.SysGetAttrValue('Min_Drill_Size');
      Min_Slot :=  Fnc.SysGetAttrValue('Min_Slot_Size');
    end
    else
    begin                                            
      Min_Drill := Fnc.SysGetAttrValue('Min_Drill_Size_2');
      Min_Slot :=  Fnc.SysGetAttrValue('Min_Slot_Size_2');
    end;
  end
  else
  begin
    Min_Drill := Fnc.SysGetAttrValue('Min_Drill_Size');
    Min_Slot :=  Fnc.SysGetAttrValue('Min_Slot_Size');
  end;

  if  (Fnc.SysGetAttrValue('Panel_Width') >= 455) or
      (Fnc.SysGetAttrValue('LayerCount') > 10) or
      (Fnc.SysGetAttrValue('Land_Area') < 0.15) or
      (Fnc.SysGetAttrValue('BlindVias') = true) or
      (Fnc.SysGetAttrValue('BuriedVias') = true)
  then
  begin
    StepDeptERP('DRILL-E');
    StepWCERP('DRILL-E');
  end
  else
  // IES has rule for Drill Hits > 9000 but both conditions go to the same
  begin
    StepDeptERP('DRILL-A');
    StepWCERP('DRILL-A');
  end;

  //Stack Height Lookup
  CNC_Drl_StkHght_Flt_Len;

  // 912 Mech Blind Via Entry Material
  Entry_Sheet_Mat := GetDrillEntrySheet;

  // 1114 Fixed Scale Factor Info
  fixedDim := 'X = ' + FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Drill_FSF_X'))) + '%; ' +
              'Y = ' + FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Drill_FSF_Y'))) + '%';

  controlRange := 'X = ' + FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Drill_FSF_X') - Fnc.SysGetAttrValue('Drill_FSF_X_Tol'))) + '~' +
                           FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Drill_FSF_X') + Fnc.SysGetAttrValue('Drill_FSF_X_Tol'))) + '%; ' +
                  'Y = ' + FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Drill_FSF_Y') - Fnc.SysGetAttrValue('Drill_FSF_Y_Tol'))) + '~' +
                           FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Drill_FSF_Y') + Fnc.SysGetAttrValue('Drill_FSF_Y_Tol'))) + '%';


  if NCRun = 1 then
  begin

    StepParamERP('Stack Height', Fnc.SysGetAttrValue('Stack_Hgt'));
    StepParamERP('Flute Length', Fnc.SysGetAttrValue('Flute_Len'));
    StepParamERP('Min Drill Size', Fnc.SysGetAttrValue('Min_Drill_Size'));
    StepParamERP('Min Slot Size', Fnc.SysGetAttrValue('Min_Slot_Size'));
    StepParamERP('Entry Sheet Material', Entry_Sheet_Mat);

    StepParamERP('NC Stage', 'First NC'); // 2466
    
    if Fnc.SysGetAttrValue('NCRunX2') then
    begin
      StepInstructionERP('DRILL010');  // REMARK : 1st Drilling
      StepInstructionERP('2NC_PESHET'); // REMARK: Put PE Sheet In Between Panel 
    end;
    
    // 1114 Fixed Scale Factor Info
    if Fnc.SysGetAttrValue('Drill_FSF_X') > 0 then
    begin
      StepParamERP('Fixed Scale Factor', fixedDim);
      StepParamERP('Control Range', controlRange);
    end;

    // 1259 Addition Attributes for NC
    //if (Fnc.SysGetAttrValue('Drill_Offset_X') <> 0 ) or (Fnc.SysGetAttrValue('Drill_Offset_Y') <> 0 ) then
    //begin
      if Fnc.SysGetAttrValue('Drill_Offset_X') <> 0 then
        StepParamERP('Offset X', FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Drill_Offset_X'))));
      if Fnc.SysGetAttrValue('Drill_Offset_Y') <> 0 then
      StepParamERP('Offset Y', FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Drill_Offset_Y'))));
    //end;

    // 1134 Additional Information
    Fnc.SysSetAttrValue('NC_Drill_1_EntryMat', Entry_Sheet_Mat);

    // 2384 KK Drill Info all Drill Processes
    StepParamERP('KK Distance', Fnc.SysGetAttrValue('KK_Distance_NC1'));

  end
  else if NCRun = 2 then
  begin

    StepParamERP('2nd Stack Height', Fnc.SysGetAttrValue('Stack_Hgt_2'));
    StepParamERP('2nd Flute Length', Fnc.SysGetAttrValue('Flute_Len_2'));
    StepParamERP('2nd Min Drill Size', Fnc.SysGetAttrValue('Min_Drill_Size_2'));
    StepParamERP('2nd Min Slot Size', Fnc.SysGetAttrValue('Min_Slot_Size_2'));
    StepParamERP('2nd Entry Sheet Mat', Entry_Sheet_Mat);

    StepParamERP('NC Stage', 'Second NC'); // 2466

    StepInstructionERP('DRILL009');  // REMARK : 2nd Drilling
    // 1114 Fixed Scale Factor Info
    if Fnc.SysGetAttrValue('Drill_FSF_X_2') > 0 then
    begin
      fixedDim2 := 'X = ' + FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Drill_FSF_X_2'))) + '%; ' +
                   'Y = ' + FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Drill_FSF_Y_2'))) + '%';

      controlRange2 := 'X = ' + FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Drill_FSF_X_2') - Fnc.SysGetAttrValue('Drill_FSF_X_Tol_2'))) + '~' +
                                FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Drill_FSF_X_2') + Fnc.SysGetAttrValue('Drill_FSF_X_Tol_2'))) + '%; ' +
                       'Y = ' + FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Drill_FSF_Y_2') - Fnc.SysGetAttrValue('Drill_FSF_Y_Tol_2'))) + '~' +
                                FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Drill_FSF_Y_2') + Fnc.SysGetAttrValue('Drill_FSF_Y_Tol_2'))) + '%';

      StepParamERP('Fixed Scale Factor', fixedDim2);
      StepParamERP('Control Range', controlRange2);
    end;

    // 1259 Addition Attributes for NC
    //if (Fnc.SysGetAttrValue('Drill_Offset_X_2') <> 0 ) or (Fnc.SysGetAttrValue('Drill_Offset_Y_2') <> 0 ) then
    //begin
      if Fnc.SysGetAttrValue('Drill_Offset_X_2') <> 0 then
        StepParamERP('Offset X', FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Drill_Offset_X_2'))));
      if Fnc.SysGetAttrValue('Drill_Offset_Y_2') <> 0 then
        StepParamERP('Offset Y', FormatFloat('0.000', FloatToStr(Fnc.SysGetAttrValue('Drill_Offset_Y_2'))));
    //end;

    // 1134 Additional Information
    Fnc.SysSetAttrValue('NC_Drill_1_EntryMat', Fnc.SysGetAttrValue('NC_Drill_1_EntryMat') + '/' + Entry_Sheet_Mat);

    // 2384 KK Drill Info all Drill Processes
    StepParamERP('KK Distance', Fnc.SysGetAttrValue('KK_Distance_NC2'));

  end;

  StepParamERP('Material Tg', GetMatTgValue);
  StepParamERP('Thickness', FormatFloat('0.000', Get_Panel_Thickness));

  if CustCode_Rule('Customer') = 'GM' then
    StepInstructionERP('DRILL002'); //REMARK : 100% Hole Check

  if Fnc.SysGetAttrValue('No_Scale_Adj') then
    StepInstructionERP('DRILL016'); // No NC Scaling allowed for X/Y

  if (
      ((pos('N4000-13', Fnc.SysGetAttrValue('PPGMat')) > 0) or (pos('N4000-13', Fnc.SysGetAttrValue('CoreMat')) > 0))
      and
      (Eng_JobType = 'Sample')//BOM CODE W or S = Sample
     )
  then
    StepInstructionERP('DRILL012'); // New N-13 Drilling Condition

  if ((CustCode_Rule('Customer') = 'FA') and (Fnc.SysGetAttrValue('KK_Distance') = 502)) then
  begin
    StepInstructionERP('DRILL046'); // REMARK : Check for KK offset
    StepInstructionERP('FINIL028'); // REMARK : Distance from panel edge to K point : 127.26mm
  end;

  if NCRun = 1 then
    StepParamERP('Drill Side', DrillSide(Fnc.SysGetAttrValue('Drill_Side')));
  else if NCRun = 2 then
    StepParamERP('Drill Side', DrillSide(Fnc.SysGetAttrValue('Drill_Side_2')));

  if HasFaradflexMat then                                    // Faradflex drill instruction
    StepInstructionERP('DRILL076'); // 836 Instruction Code Update
                                                             
  if SubGetsNewPEP then StepInstructionERP('DRILL167'); //With Sub-Lam PEP Slot Drillin

end;

procedure NC_Drill_First;  // 2466
begin

  NC_Drill_SD;

end;

procedure NC_Drill_Second;
begin

  NC_Drill_SD;

end;

procedure InsertPressFitRemarks;
var
  pressFitSpec1 : string;
  pressFitSpec2 : string;
  pressFitSpec3 : string;
begin
  StepParamERP('Remark', 'With Tight Press Fit Tolerance');

  pressFitSpec1 := Fnc.SysGetAttrValue('Tight_PressFit_Spec');
  pressFitSpec2 := Fnc.SysGetAttrValue('Tight_PressFit_Spec_2');
  pressFitSpec3 := Fnc.SysGetAttrValue('Tight_PressFit_Spec_3');

  if pressFitSpec1 <> '' then
    StepParamERP('Press Fit Spec 1', pressFitSpec1);

  if pressFitSpec2 <> '' then
    StepParamERP('Press Fit Spec 2', pressFitSpec2);

  if pressFitSpec3 <> '' then
    StepParamERP('Press Fit Spec 3', pressFitSpec3);


end;

procedure CuHoleCheck_SD;
begin
  StepDeptERP('HOLCP-A');
  StepWCERP('HOLCP-A');

  if Fnc.SysGetAttrValue('Tight_PressFit_Tol') = true then  // 795 Tight Press Fit Tolerance rule
    begin
      if Fnc.SysGetAttrValue('NCRunX2') = true then
      begin
        if NCRun = 2 then
          InsertPressFitRemarks;
      end
      else
        InsertPressFitRemarks;
    end;
end;

procedure PLCountersink_SD;
begin
  StepDeptERP('ROUTE-D0');
  StepWCERP('ROUTE-D0');

  StepParamERP('Press Thickness', FormatFloat('0.000', PressThickness));
  StepParamERP('Angle', Fnc.SysGetAttrValue('CSAnglePL'));

  // 1191 Drill Side for Countersink/bore & milling
  StepParamERP('Drill Side', DrillSide(Fnc.SysGetAttrValue('PLCountersink_Side')));
end;

procedure NPCountersink_SD;
begin
  StepDeptERP('ROUTE-D0');
  StepWCERP('ROUTE-D0');

  // 1113 Thickness is incorrect
  StepParamERP('Thickness', FormatFloat('0.000', ThicknessOverMask));
  StepParamERP('Angle', Fnc.SysGetAttrValue('CSAngleNP'));

  // 1191 Drill Side for Countersink/bore & milling
  StepParamERP('Drill Side', DrillSide(Fnc.SysGetAttrValue('NPCountersink_Side')));
end;

procedure EdgePlateRoute_SD;
begin
  StepDeptERP('ROUTE-A');
  StepWCERP('ROUTE-A');

  // 793 Update Photo process
  //StepInstructionERP('ROUTE003'); // REMARKS : PANEL STACK HEIGHT REFER TO PE

  // SUNK TYPE Route Step Parameter omitted - Step Name will tell operators what the process is.
end;

procedure WashingStd_SD;
begin
  StepDeptERP('WASHS-A');
  StepWCERP('WASHS-A');
end;

procedure PostNCBaking_SD;
begin
  StepDeptERP('DMBAK-A');
  StepWCERP('DMBAK-A');

  if Baking_Mtl = 'FR408HR' then
    StepInstructionERP('BAKE_002'); // REMARK: 180 Degree C, 2 hours

  StepParamERP('Bake Reason', Baking_Mtl);
end;

procedure Electroless_SD;
var
  Min_Drill,
  AspectRatio: float;

begin

  StepDeptERP('METAL-C');

  Min_Drill := 0.0;

  if NCRun = 1 then
  begin

    Min_Drill := Fnc.SysGetAttrValue('Min_Drill_Size');
    AspectRatio := Fnc.SysGetAttrValue('Aspect_Ratio_Val');  // 1569  Correction of V1/V2 rule for Job with 2x NC

  end
  else
  begin

    Min_Drill := Fnc.SysGetAttrValue('Min_Drill_Size_2');
    AspectRatio := Fnc.SysGetAttrValue('Aspect_Ratio_Val_2'); // 1569  Correction of V1/V2 rule for Job with 2x NC

  end;

  if ( MechBlindViaSide <> 'None' ) and ( NCRun = 1 ) then //2295
  begin

    StepWCERP('METAL-D0');  // 2616 VELCP Updated Flow
    StepParamERP('VELCP Line', 'V2 Only');
    StepInstructionERP('METAL041');
    StepParamERP('Remark', 'With Mech Blind Vias');

  end
  else
  begin

    StepWCERP('METAL-C');  // 2616 VELCP Updated Flow  // Mod rquest Herole 240409
    StepParamERP('VELCP Line', 'V1 or V2');

  end;

  if Fnc.SysGetAttrValue('CuFilledVias') then StepInstructionERP('METAL016');

  StepParamERP('Pre-preg Material', Fnc.SysGetAttrValue('PPGMat'));
  StepParamERP('Core Material', Fnc.SysGetAttrValue('CoreMat'));

  if Fnc.SysGetAttrValue('LayerCount') > 2 then // 2 Layer Fixes
    StepParamERP('Thickness', FormatFloat('0.000', PressThickness));
  else
    StepParamERP('Thickness', FormatFloat('0.000', DSThicknessB4Plating));

  StepParamERP('Min Drill Size', Min_Drill);

  // 1107 Additional Run Card info - Note sequential build
  if Fnc.SysGetAttrValue('Seq_Build') or SubParentIsSequential then StepParamERP('Remark', 'Sequential Build');

end;

procedure Electroless_CappedVia_SD;
var                  
  epoxyThinningG7 : boolean;
begin
  SysRouteInsDepartment('Erp', 'METAL-C', '');
  SysRouteInsWorkCenter('Erp', 'METAL-C', '');
  
  epoxyThinningG7 := false;                            
  
  if ( Fnc.SysGetAttrValue('EpoxyPlug_CuThin_Process') <> 'None' ) and ( Fnc.SysGetAttrValue('EpoxyPlug_CuThin_Process') <> 'Buffing' ) then
    epoxyThinningG7 := true; 
  
  if (( Get_Panel_Thickness >= 3.2 ) and ( Min_Drill <= 0.25 )) or (Fnc.SysGetAttrValue('Aspect_Ratio_Val') > 12.8)  // 1462
    {(  // 978 Updated Cu Rule - Metalization
      (( Get_Panel_Thickness >= 3.2 ) and ( Min_Drill <= 0.25 )) or
      //( Fnc.SysGetAttrValue('Seq_Build') = true ) or 1306 Updated Electroless Plating Rule  
      //( SubParentIsSequential ) or
      (( Fnc.SysGetAttrValue('EpoxySide') <> 'None') and ( epoxyThinningG7 ))
     )}
  then
  begin             
                                                      
   // if LaserG30KMechOrSkipBVH then
   //   SysRouteInsAddlParameter('Erp', 'Remark', 'On-Line Vacuum', '', '', false, '', '', ''); 
                              
    SysRouteInsWorkCenter('Erp', 'METAL-D0', '');            
    //SysRouteInsAddlParameter('Erp', 'VELCP Line', 'V2 Only', '', '', false, '', '', '');
    SysRouteInsAddlParameter('Erp', 'VELCP Line', 'V1 or V2', '', '', false, '', '', '');   // 1462
  end            
  else 
  begin
                        
    //if LaserG30KMechOrSkipBVH then  Note required for Capped Via OneDesk 1087
    //  SysRouteInsAddlParameter('Erp', 'Remark', 'Off-Line Vacuum', '', '', false, '', '', ''); 
      
    SysRouteInsWorkCenter('Erp', 'METAL-C0', '');
    SysRouteInsAddlParameter('Erp', 'VELCP Line', 'V1 or V2', '', '', false, '', '', ''); 
  end;
  
  // 1107 Additional Run Card info - Note sequential build
  if Fnc.SysGetAttrValueTopLevel('Seq_Build') = true then
    SysRouteInsAddlParameter('Erp', 'Remark', 'Sequential Build', '', '', false, '', '', ''); 
end;

procedure CappedAndStrikePlatingResource; // 2616 VELCP Update Flow
begin

  if LayupThickness <= 2.00 then
  begin

    StepDeptERP('COPPL-E0'); // 2388
    StepWCERP('COPPL-E0');

  end
  else
  begin

    StepDeptERP('COPPL-C'); // 2388
    StepWCERP('COPPL-C');

  end;

 end;

procedure Strike_Plating_SD; // 978 Updated Cu Rule - Metalization
begin

  CappedAndStrikePlatingResource; // 2616 VELCP Update Flow

  StepInstructionERP('COPPL085'); //REMARK: Strike Plating Program

  StepParamERP('Plating Stage', 'Strike Plating'); // 2466

end;

procedure Strike_Plating_FV_SD;   // 2469
begin

    Strike_Plating_SD;
    //StepParamERP('Remarks', '1.0 asd 58 minutes');  // Removed per Herole 2469 comment

end;

procedure Electroless_SP_SD; // 2616 VELCP Updated Flow
begin

  StepDeptERP('METAL-D0');
  StepWCERP('METAL-D0');

  StepParamERP('VELCP Line:', 'V2 Only');

  StepInstructionERP('METAL042'); //REMARK: Strike Plating Program

  if Fnc.SysGetAttrValue('Seq_Build') or SubParentIsSequential then
    StepParamERP('Remark', 'Sequential Build');

end;

function MCP_CU_THK_Validate_TargetThickness(CuPlating_MCP: TSysTable; aFilter: string): string;
var
  Options: TStringList;
  ValidValues: string;
begin
  Result := '';

  CuPlating_MCP.Filtered := False;
  CuPlating_MCP.Filter := aFilter;
  CuPlating_MCP.Filtered := True;

  if CuPlating_MCP.isEmpty then
  begin
    CuPlating_MCP.Filtered := False;

    Options := TStringList.Create;

    CuPlating_MCP.SortFields := 'ThicknessTargetAve';
    CuPlating_MCP.SortDefault;

    CuPlating_MCP.First;
    while not CuPlating_MCP.Eof do
    begin
      if Options.IndexOf(CuPlating_MCP.FieldByName('ThicknessTargetAve').AsString) < 0 then
        Options.Add(CuPlating_MCP.FieldByName('ThicknessTargetAve').AsString);
      CuPlating_MCP.Next;
    end;

    ValidValues := StringReplace(Options.Text, #13, ' ,', SetOf([rfReplaceAll]));
    ValidValues := StringReplace(ValidValues, #10, '', SetOf([rfReplaceAll]));
    Result := 'Valid values for "ThicknessTargetAve": ' + ValidValues;

    Options.Clear;
    CuPlating_MCP.SortFields := 'ThicknessTargetAbs';
    CuPlating_MCP.SortDefault;

    CuPlating_MCP.First;
    while not CuPlating_MCP.Eof do
    begin
      if Options.IndexOf(CuPlating_MCP.FieldByName('ThicknessTargetAbs').AsString) < 0 then
        Options.Add(CuPlating_MCP.FieldByName('ThicknessTargetAbs').AsString);
      CuPlating_MCP.Next;
    end;

    ValidValues := StringReplace(Options.Text, #13, ' ,', SetOf([rfReplaceAll]));
    ValidValues := StringReplace(ValidValues, #10, '', SetOf([rfReplaceAll]));
    Result := Result + #13 + 'Valid values for "ThicknessTargetAbs": ' + ValidValues;

    Options.Free;

    CuPlating_MCP.SortFields := '';
    CuPlating_MCP.SortDefault;
  end;

  CuPlating_MCP.Filtered := False;
end;

function MCP_CU_THK_Validate_BoardThickness(CuPlating_MCP: TSysTable; Filter1: string; Filter2: string): string;
var
  tMin: double;
  tMax: double;
begin
  Result := '';

  CuPlating_MCP.Filtered := False;
  CuPlating_MCP.Filter := Filter1 + Filter2;
  CuPlating_MCP.Filtered := True;

  if CuPlating_MCP.isEmpty then
  begin
    tMin := 999999;
    tMax := -99999;

    CuPlating_MCP.Filtered := False;
    CuPlating_MCP.Filter := Filter1;
    CuPlating_MCP.Filtered := True;

    CuPlating_MCP.First;
    while not CuPlating_MCP.Eof do
    begin
      if tMin > CuPlating_MCP.FieldByName('ThicknessMin').AsFloat then
        tMin := CuPlating_MCP.FieldByName('ThicknessMin').AsFloat;

      if tMax < CuPlating_MCP.FieldByName('ThicknessMax').AsFloat then
        tMax := CuPlating_MCP.FieldByName('ThicknessMax').AsFloat;

      CuPlating_MCP.Next;
    end;

    Result := 'Board thickness has to be > ' + FloatToStr(tMin) + ' and < ' + FloatToStr(tMax);
  end;

  CuPlating_MCP.Filtered := False;
  CuPlating_MCP.Filter := '';
end;

function MCP_CU_THK: string;
var
  errMsg: string;
  Filter1: string;
  Filter2: string;
  NC_Thickness: string;
  CuPlating_MCP: TSysTable;
begin

  Result := ''
  errMsg := '';

  //CuPlating_MCP := Fnc.CustomTableGet('CuPlating_MCP_P3_FV');  // 1086 Updated Cu Platin Rule
  CuPlating_MCP := Fnc.CustomTableGet('CuPlating_MCP_2464');

  Filter1 := '';
  Filter2 := '';

  GLB_Ave_CuThk := 0.0;
  GLB_TGT_Ave_Hole_CuThk := Round(GLB_TGT_Ave_Hole_CuThk * 2 / 10) * 5;

  if (GLB_TGT_Abs_HOLE_CuThk > 11) and (GLB_TGT_Abs_HOLE_CuThk < 13.5) then
    GLB_TGT_Abs_HOLE_CuThk := 12
  else if (GLB_TGT_Abs_HOLE_CuThk >= 13.5) and (GLB_TGT_Abs_HOLE_CuThk < 16.5) then
    GLB_TGT_Abs_HOLE_CuThk := 15
  else if (GLB_TGT_Abs_HOLE_CuThk >= 16.5) and (GLB_TGT_Abs_HOLE_CuThk < 19) then
    GLB_TGT_Abs_HOLE_CuThk := 18
  else if (GLB_TGT_Abs_HOLE_CuThk >= 19) and (GLB_TGT_Abs_HOLE_CuThk < 22.5) then
    GLB_TGT_Abs_HOLE_CuThk := 20
  else if (GLB_TGT_Abs_HOLE_CuThk >= 22.5) and (GLB_TGT_Abs_HOLE_CuThk < 27.5) then
    GLB_TGT_Abs_HOLE_CuThk := 25;

  if GLB_TGT_Ave_Hole_CuThk > 0 then
  begin
    GLB_TGT_Ave_Hole_CuThk := Trunc(GLB_TGT_Ave_Hole_CuThk);
    Filter1 := Format('([ThicknessTargetAve] = %s)', ([IntToStr(GLB_TGT_Ave_Hole_CuThk)]));
  end
  else
  begin
    GLB_TGT_Abs_Hole_CuThk := Trunc(GLB_TGT_Abs_Hole_CuThk);
    Filter1 := Format('([ThicknessTargetAbs] = %s)', ([IntToStr(GLB_TGT_Abs_Hole_CuThk)]));
  end;

  if Fnc.SysGetAttrValue('LayerCount') > 2 then // 2 Layer Fixes
    NC_Thickness := FloatToStr(PressThickness);
  else
    NC_Thickness := FloatToStr(DSThicknessB4Plating);

  Filter2 := Format(' and ([ThicknessMin] < %s) and (%s <= [ThicknessMax] )', ([NC_Thickness, NC_Thickness]));

  //ShowMEssage(Filter1 + ' | ' + Filter2);

  errMsg := MCP_CU_THK_Validate_TargetThickness(CuPlating_MCP, Filter1);
  if errMsg = '' then
    errMsg := MCP_CU_THK_Validate_BoardThickness(CuPlating_MCP, Filter1, Filter2);

  if errMsg = '' then
  begin
    CuPlating_MCP.Filtered := False;
    CuPlating_MCP.Filter := Filter1 + Filter2;
    CuPlating_MCP.Filtered := True;

    if not CuPlating_MCP.isEmpty then
    begin

      CuPlating_MCP.First;
      //Fnc.OpenDataGrid(CuPlating_MCP);
      if (Fnc.SysGetAttrValue('EpoxySide') <> 'None') and ( Not Fnc.SysGetAttrValue('CappedVia')) then // 2464
        GLB_Ave_CuThk := CuPlating_MCP.FieldByName('ThkPltInkPlugNoCap').AsInteger
      else
        GLB_Ave_CuThk := CuPlating_MCP.FieldByName('ThicknessSurfacePlated').AsInteger;

    end;
  end;

  GLB_Abs_CuThk := GLB_Ave_CuThk;

  // cleanup               
  CuPlating_MCP.Filtered := False;
  CuPlating_MCP.Filter := '';

  CuPlating_MCP.SortFields := '';
  CuPlating_MCP.SortDefault;

  if GLB_Ave_CuThk = 0 then
  begin
    errMsg := 'Failed to set Surface Plating Thickness "GLB_Abs_CuThk" from Table CuPlating_MCP' + #13#13 + errMsg;
    MessageDlg(errMsg, mtWarning, SetOf([mbCancel]), 0);
  end;
end;

procedure GetCuPlat_RPLS;
var
  aFilter: string;
  laser: string;
  CuPlating_RPLS: TSysTable;
  MinDrillSize: float;
begin
  laser := 'No';

  if Fnc.SysGetAttrValue('LayerCount') > 2 then
    GLB_NC_Thickness := PressThickness
  else
    GLB_NC_Thickness := LayupThickness;

  if NCRUN = 1 then
    GLB_Cur_Cu_Ratio := Fnc.SysGetAttrValue('Cu_Ratio')
  else if NCRUN = 2 then
    GLB_Cur_Cu_Ratio := Fnc.SysGetAttrValue('Cu_Ratio_2');

  if NCRUN = 1 then
  begin
    if LaserBTopHits + LaserABotHits +
       UVLaserB_Top + UVLaserA_Bot > 0
    then
      laser := 'Yes';
  end;

  // 1467
  if NCRUN = 1 then
    MinDrillSize := Fnc.SysGetAttrValue('Min_Drill_Size')
  else
    MinDrillSize := Fnc.SysGetAttrValue('Min_Drill_Size_2')

  aFilter := '     ([LaserVia] = ' + QuotedStr(laser) + ')'
           + Format(' and ([CuRatioMin] <= %s)', ([IntToStr(GLB_Cur_Cu_Ratio)]))
           + Format(' and ([CuRatioMax] > %s)', ([IntToStr(Trunc(GLB_Cur_Cu_Ratio))]))
           + Format(' and ([BoardThicknessMin] <= %s)', ([FloatToStr(GLB_NC_Thickness)]))
           + Format(' and ([BoardThicknessMax] > %s)', ([FloatToStr(GLB_NC_Thickness)]));

  //ShowMessage(aFilter);

  //CuPlating_RPLS := Fnc.CustomTableGet('CuPlating_RPLS_1467'); // 1467
  CuPlating_RPLS := Fnc.CustomTableGet('CuPlating_RPLS_2464'); // 2464

  CuPlating_RPLS.Filtered := False;
  CuPlating_RPLS.Filter := aFilter;
  CuPlating_RPLS.Filtered := True;

  //Fnc.OpenDataGrid(CuPlating_RPLS);

  if not CuPlating_RPLS.isEmpty then
  begin

    CuPlating_RPLS.First;

    if (Fnc.SysGetAttrValue('EpoxySide') <> 'None') and ( not Fnc.SysGetAttrValue('CappedVia')) then // 2464
    begin

      if MinDrillSize <= 0.3 then
        GLB_Ave_CuThk := CuPlating_RPLS.FieldByName('ThkPltInkPlugNoCapLTE3').AsFloat
      else
        GLB_Ave_CuThk := CuPlating_RPLS.FieldByName('ThkPltInkPlugNoCapGT3').AsFloat;

    end
    else
    begin

      if MinDrillSize <= 0.3 then
        GLB_Ave_CuThk := CuPlating_RPLS.FieldByName('ThicknessSurfacePlated').AsFloat
      else
        GLB_Ave_CuThk := CuPlating_RPLS.FieldByName('ThicknessSurfacePlated2').AsFloat;

    end;


  end;

  GLB_Abs_CuThk := GLB_Ave_CuThk;
  //ShowMessage(FloatToStr(MinDrillSize) + '|' + FloatToStr(GLB_Ave_CuThk));
  // cleanup
  CuPlating_RPLS.Filtered := False;
  CuPlating_RPLS.Filter := '';

  if GLB_Ave_CuThk = 0 then
  begin
    MessageDlg('Failed to set Surface Plating Thickness "GLB_Ave_CuThk" from Table CuPlating_RPLS' + #13#13 + 'Filter: ' + aFilter, mtWarning, SetOf([mbCancel]), 0);
  end;
end;

procedure InsertViaTypeAttributes;
begin
  if ((Fnc.SysGetAttrValue('BlindVias') = true) and (Fnc.SysGetAttrValue('BuriedVias') = true)) then
    StepParamERP('Via Type', 'Both Vias');
  else if Fnc.SysGetAttrValue('BuriedVias') = false then
    StepParamERP('Via Type', 'Blind Vias');
end;

procedure InsertBlindViaAttributes;
begin
  StepParamERP('Avg Min Blind', Fnc.SysGetAttrValue('Ave_Min_Bl'));
  StepParamERP('Abs Min Blind', Fnc.SysGetAttrValue('Abs_Min_Bl'));

  InserBlindViaDepthAspect;

  StepParamERP('Conf. Mask Size', Fnc.SysGetAttrValue('ConfMask_Size'));

  if Fnc.SysGetAttrValue('ConfMask_Size_Skip') > 0 then
    StepParamERP('Conf. Mask Size - Skip', Fnc.SysGetAttrValue('ConfMask_Size_Skip'));

  StepParamERP('Thickness Before Plate', FormatFloat('0.000', PressThickness));
end;

procedure CalcAndInsert_DECUTHK(UseF_ : boolean; NCRun : integer; process : string);  // (364) Surface Cu thickness calculation correction
var
  TempVar     : float;
  TempVarI    : integer;
  TempVarI_min : integer;
  TempVarI_max : integer;
  vDE_Cu_Thk : string;

  Surface_Add : float;

begin
  TempVar     := 0.0;
  TempVarI    := 0;
  TempVarI_min    := 0;
  TempVarI_max    := 0;
  vDE_Cu_Thk  := '';

  if Fnc.SysGetAttrValue('UEtch_Cu') > 0 then
    Fnc.SysSetAttrValue('Down_Etch_Cu', Fnc.SysGetAttrValue('UEtch_Cu'))
  else
    Fnc.SysSetAttrValue('Down_Etch_Cu', BaseCuTopUM);

  Fnc.SysSetAttrValue('Cal_Abs_Th', GLB_Abs_CuThk + InProcessCuThk);
  Fnc.SysSetAttrValue('Cal_Ave_Th', GLB_Ave_CuThk + InProcessCuThk);

  if UseF_ then
  begin
    if  Fnc.SysGetAttrValue('Cal_Abs_Th') > Fnc.SysGetAttrValue('Cal_Ave_Th') then
    begin
      TempVar := Fnc.SysGetAttrValue('Cal_Abs_Th');

      {if Fnc.SysGetAttrValue('UEtch_Cu') > 0 then
        ShowMessage('DE Cu Thk = ' + 'In Process Cu: ' + IntToStr(InProcessCuThk) + ' + Table Plating: ' + IntToStr(GLB_Abs_CuThk) + ' + 3' + ' = ' + IntToStr(TempVar));
      else
        ShowMessage('DE Cu Thk = ' + 'In Process Cu: ' + IntToStr(InProcessCuThk) + ' + Table Plating: ' + IntToStr(GLB_Abs_CuThk) + ' + 0' + ' = ' + IntToStr(TempVar));}
    end
    else
    begin
      TempVar := Fnc.SysGetAttrValue('Cal_Ave_Th');

      {if Fnc.SysGetAttrValue('UEtch_Cu') > 0 then
        ShowMessage('DE Cu Thk = ' + 'In Process Cu: ' + IntToStr(InProcessCuThk) + ' + Table Plating: ' + IntToStr(GLB_Ave_CuThk) + ' + 3' + ' = ' + IntToStr(TempVar));
      else
        ShowMessage('DE Cu Thk = ' + 'In Process Cu: ' + IntToStr(InProcessCuThk) + ' + Table Plating: ' + IntToStr(GLB_Ave_CuThk) + ' + 0' + ' = ' + IntToStr(TempVar));}
    end;
  end
  else
  begin
    //  Copied from DES Step
    Surface_Add := 0.0;
    if ((Fnc.SysGetAttrValue('NCRunX2') = false) and (Fnc.SysGetAttrValue('CappedVia') = false)) then
    begin
      Fnc.SysSetAttrValue('Min_Surf_Plt', 0.0);
    end
    else
    begin
      if Fnc.SysGetAttrValue('CappedVia') = true then
        Surface_Add := Fnc.SysGetAttrValue('Min_Surf_Plt') + 2;

      if Fnc.SysGetAttrValue('NCRunX2') = true then
      begin
        Fnc.SysSetAttrValue('Min_Surf_Plt', 0.0);

        // Per Herole, this is ignored. Plating thickness should come from the plating table for NC Run * 2 ( GLB_Abs_CuThk ). Done below
        if NCRun = 2 then
        begin
          if Fnc.SysGetAttrValue('Abs_Min_Th_2') > Fnc.SysGetAttrValue('Ave_Min_Th_2') then
            Surface_Add := Fnc.SysGetAttrValue('Abs_Min_Th_2')
          else
            Surface_Add := Fnc.SysGetAttrValue('Ave_Min_Th_2');

          if Surface_Add = 0.0 then
            ShowMessage('Error!!! : 2 X NC Model, Second Plating Cu Thickness Cannot Be Zero');
        end
        else
          Surface_Add := 0.0;
      end;
    end;

    if process <> 'CappedVia'  then
    begin
      {if (( Fnc.SysGetAttrValue('UEtch_Cu') = 0.0 ) or ( NCRun = 2 ))then   // 1201 Remove +3um from Cu thickness
      begin
        Fnc.SysSetAttrValue('Abs_Fin_Th', GLB_Abs_CuThk + InProcessCuThk );
        Fnc.SysSetAttrValue('Ave_Fin_Th', GLB_Ave_CuThk + InProcessCuThk );

        // Debug Message
        TempVar := Fnc.SysGetAttrValue('Abs_Fin_Th')
        //ShowMessage('DE Cu Thk = ' + 'In Process Cu: ' + IntToStr(InProcessCuThk) + ' + Table Plating: ' + IntToStr(GLB_Ave_CuThk) + ' + 0' + ' = ' + IntToStr(TempVar));
      end
      else
      begin
        Fnc.SysSetAttrValue('Abs_Fin_Th', 3 + GLB_Abs_CuThk + InProcessCuThk );
        Fnc.SysSetAttrValue('Ave_Fin_Th', 3 + GLB_Ave_CuThk + InProcessCuThk );

        // Debug Message
        TempVar := Fnc.SysGetAttrValue('Abs_Fin_Th')
        //ShowMessage('DE Cu Thk = ' + 'In Process Cu: ' + IntToStr(InProcessCuThk) + ' + Table Plating: ' + IntToStr(GLB_Ave_CuThk) + ' + 3' + ' = ' + IntToStr(TempVar));
      end  }

      Fnc.SysSetAttrValue('Abs_Fin_Th', GLB_Abs_CuThk + InProcessCuThk );
      Fnc.SysSetAttrValue('Ave_Fin_Th', GLB_Ave_CuThk + InProcessCuThk );
      TempVar := Fnc.SysGetAttrValue('Abs_Fin_Th')
    end
    else  // Capped Via Plating
    begin
      Fnc.SysSetAttrValue('Abs_Fin_Th', InProcessCuThk + Surface_Add);
      Fnc.SysSetAttrValue('Ave_Fin_Th', InProcessCuThk + Surface_Add);

        // Debug Message
      TempVar := Fnc.SysGetAttrValue('Abs_Fin_Th')
        //ShowMessage('Capped DE Cu Thk = ' + 'In Process Cu: ' + IntToStr(InProcessCuThk) + ' + Min  Plating: ' + IntToStr(Surface_Add) + ' + 0' + ' = ' + IntToStr(TempVar));
    end;

    if  Fnc.SysGetAttrValue('Abs_Fin_Th') > Fnc.SysGetAttrValue('Ave_Fin_Th') then
      TempVar := Fnc.SysGetAttrValue('Abs_Fin_Th')
    else
      TempVar := Fnc.SysGetAttrValue('Ave_Fin_Th');
  end;

  TempVarI := Round(TempVar);
  //InProcessCuThk := TempVarI;
  UpdateInProcessCuThk(TempVarI);

  {if process <> 'CappedVia' then  // 839 Electrolytic Cu - Capped Via / 2nd Plating DE Cu Thickness Tolerance
  begin
    TempVarI_min := TempVarI - 7;
    TempVarI_max := TempVarI + 7;
  end
  else
  begin
    TempVarI_min := TempVarI - 3;
    TempVarI_max := TempVarI + 3;
  end;
  }

  TempVarI_min := TempVarI - 7;
  TempVarI_max := TempVarI + 7;

  vDE_Cu_Thk := IntToStr(TempVarI_min) + ' ~ ' + IntToStr(TempVarI) + ' ~ ' + IntToStr(TempVarI_max);

  if NCRun = 1 then
  begin
    if Fnc.SysGetAttrValue('User_DE_Cu_Thk') <> '' then
    begin
      StepParamERP('User DE Cu Thickness', Fnc.SysGetAttrValue('User_DE_Cu_Thk'))
      //InProcessCuThk := Conver_UserDE_Cu(Fnc.SysGetAttrValue('User_DE_Cu_Thk'));
      UpdateInProcessCuThk(Conver_UserDE_Cu(Fnc.SysGetAttrValue('User_DE_Cu_Thk')));
      //ShowMessage('User DE Cu Thickness After Plating: ' + IntToStr(InProcessCuThk));
    end
    else
      StepParamERP('DE Cu Thickness', vDE_Cu_Thk);
  end
  else  // NC RUN must = 2
  begin
    if Fnc.SysGetAttrValue('User_DE_Cu_Thk_2') <> '' then
    begin
      StepParamERP('2nd User DE Cu Thick.', Fnc.SysGetAttrValue('User_DE_Cu_Thk_2'));
      //InProcessCuThk := Conver_UserDE_Cu(Fnc.SysGetAttrValue('User_DE_Cu_Thk_2'));
      UpdateInProcessCuThk(Conver_UserDE_Cu(Fnc.SysGetAttrValue('User_DE_Cu_Thk_2')));
      //ShowMessage('2nd User DE Cu Thickness After Plating: ' + IntToStr(InProcessCuThk));
    end
    else
      StepParamERP('2nd DE Cu Thickness', vDE_Cu_Thk);
  end;

  //ShowMessage( 'After Plating Cu Thk ' + IntToStr(InProcessCuThk) + 'um'  );
End;

procedure Electrolytic_Cu_SD(Extra_Plt_Step : boolean);
Var
  Alt_Line : string;
  Plating_Line_Selected: string;
  Plating_Line_Alternative: string;
  NCX2_OSP : boolean;

begin
  Plating_Line := '';
  Alt_Line := '';
  Plating_Line_Selected := '';
  Plating_Line_Alternative := '';

  StepDeptERP('COPPL-C');                                                

  Set_CU_Ratio(false); // 2400

  if NCRun = 1 then
  begin
    if Fnc.SysGetAttrValue('Electrolytic_Cu_Line') = 'Auto' then  // 843 Process Override Rule
    begin                             
      if (CustCode_Rule('Customer') = 'GM') and (Fnc.SysGetAttrValue('Test_ID') <> 'None') then
      begin
        Plating_Line := GetCuPlat_GM;
        Fnc.SysSetAttrValue('Ave_Min_Th', 0.0);
      end
      else
        Plating_Line := SelectPlatingLine;
    end
    else
     Plating_Line := Fnc.SysGetAttrValue('Electrolytic_Cu_Line');
  end
  else if NCRun = 2 then
  begin
    if Fnc.SysGetAttrValue('Electrolytic_Cu_Line_2') = 'Auto' then  // 843 Process Override Rule
    begin
      if (CustCode_Rule('Customer') = 'GM') and (Fnc.SysGetAttrValue('Test_ID') <> 'None') then
      begin
        Plating_Line := GetCuPlat_GM;
        Fnc.SysSetAttrValue('Ave_Min_Th_2', 0.0);
      end
      else
        Plating_Line := SelectPlatingLine;
    end
    else
     Plating_Line := Fnc.SysGetAttrValue('Electrolytic_Cu_Line_2');
  end;

  Fnc.SysSetAttrValue('CuPlatingLine', Plating_Line);

  // 1134 Additional Information
  if NCRun = 1 then
    Fnc.SysSetAttrValue('Plating_Line', Plating_Line)
  else if NCRun = 2 then
    Fnc.SysSetAttrValue('Plating_Line', Fnc.SysGetAttrValue('Plating_Line') + '/' + Plating_Line);

    if ((Fnc.SysGetAttrValue('BlindVias') = true) and (Fnc.SysGetAttrValue('MfgPartType') <> 'Top'))  then
    begin
      if ((Fnc.SysGetAttrValue('Ave_Min_Bl') > 0.0) or (Fnc.SysGetAttrValue('Abs_Min_Bl') > 0.0)) then
      begin
        GLB_TGT_Abs_HOLE_CuThk := Fnc.SysGetAttrValue('Abs_Min_Bl');
        GLB_TGT_Ave_Hole_CuThk := Fnc.SysGetAttrValue('Ave_Min_Bl');
                                  
        // Per Request from Herole 3/13, blind via plating should be the same as PTH plating
        GLB_TGT_Abs_HOLE_CuThk := Fnc.SysGetAttrValue('Abs_Min_Th');
        GLB_TGT_Ave_Hole_CuThk := Fnc.SysGetAttrValue('Ave_Min_Th');
      end
      else
        ShowMessage('Error: Blind Via but Abs_Min_Bl or Ave_Min_Bl = 0.0');
    end
    else
    begin
      GLB_TGT_Abs_HOLE_CuThk := Fnc.SysGetAttrValue('Abs_Min_Th');
      GLB_TGT_Ave_Hole_CuThk := Fnc.SysGetAttrValue('Ave_Min_Th');
    end;

    if ( Plating_Line = 'MCP' ) or ( Plating_Line = 'PAL3' ) or (Plating_Line = 'FILL_VIA') then
      MCP_CU_THK
    else
      GetCuPlat_RPLS;
  //end;

  if Plating_Line = 'FILL_VIA' then
  begin
    StepDeptERP('COPPL-F');
    StepWCERP('COPPL-F');

    // 976 Filled Via plating line missing info
    StepInstructionERP('COPPL001'); // MEASUREMT CU THK : i) ______ii) ______,
    StepParamERP('Plating Line', Plating_Line);  // Include the Electrolytic Machine Name on the process step.


    if (( Fnc.SysGetAttrValue('BlindVias') = true ) and ( Fnc.SysGetAttrValue('NCRunX2') = true ) and  ( NCRun = 1 )) or
       (( Fnc.SysGetAttrValue('BlindVias') = true ) and ( Fnc.SysGetAttrValue('NCRunX2') = false ))
    then //978
    begin
      InsertViaTypeAttributes;
      InsertBlindViaAttributes;
    end;

    if NCRun = 2 then
    begin
      StepParamERP('2nd Min Drill Size', Fnc.SysGetAttrValue('Min_Drill_Size_2'));

      if ((Fnc.SysGetAttrValue('Ave_Min_Th_2') > 0) or (Fnc.SysGetAttrValue('Abs_Min_Th_2') > 0)) then
      begin
        StepParamERP('2nd Avg Min Thickness', Fnc.SysGetAttrValue('Ave_Min_Th_2'));
        StepParamERP('2nd Abs Min Thickness', Fnc.SysGetAttrValue('Abs_Min_Th_2'));
        StepParamERP('2nd Ave Max Thickness', Fnc.SysGetAttrValue('Ave_Max_Th_2'));
        StepParamERP('2nd Abs Max Thickness', Fnc.SysGetAttrValue('Abs_Max_Th_2'));
      end;

      StepParamERP('2nd PTH Aspect Ratio', Fnc.SysGetAttrValue('Aspect_Ratio_Val_2'));
      StepParamERP('2nd PTH Cu Plate Area', Fnc.SysGetAttrValue('PTH_CuPlt_Area_2'));
      StepParamERP('2nd Cu Ratio', Fnc.SysGetAttrValue('Cu_Ratio_2'));

      //if Fnc.SysGetAttrValue('User_DE_Cu_Thk_2') <> '' then
      //  StepParamERP('2nd User DE Cu Thick.', Fnc.SysGetAttrValue('User_DE_Cu_Thk_2'));
      // 976 Filled Via plating line missing info
      if NCRun = 2 then // not required but copied from other plating line rule - leave for debugging
          CalcAndInsert_DECUTHK(false, 2, '')
        else
          CalcAndInsert_DECUTHK(true, 1, '');
    end
    else
    begin
      StepParamERP('Min Drill Size', Fnc.SysGetAttrValue('Min_Drill_Size'));

      if ((Fnc.SysGetAttrValue('Ave_Min_Th') > 0) or (Fnc.SysGetAttrValue('Abs_Min_Th') > 0)) then
      begin
        StepParamERP('Avg Min Thickness', Fnc.SysGetAttrValue('Ave_Min_Th'));
        StepParamERP('Abs Min Thickness', Fnc.SysGetAttrValue('Abs_Min_Th'));
        StepParamERP('Ave Max Thickness', Fnc.SysGetAttrValue('Ave_Max_Th'));
        StepParamERP('Abs Max Thickness', Fnc.SysGetAttrValue('Abs_Max_Th'));
      end;

      StepParamERP('Aspect Ratio', Fnc.SysGetAttrValue('Aspect_Ratio_Val'));
      StepParamERP('PTH Cu Plate Area', Fnc.SysGetAttrValue('PTH_CuPlt_Area'));
      StepParamERP('Cu Ratio', Fnc.SysGetAttrValue('Cu_Ratio'));

      //if Fnc.SysGetAttrValue('User_DE_Cu_Thk') <> '' then
      //  StepParamERP('User DE Cu Thickness', Fnc.SysGetAttrValue('User_DE_Cu_Thk'));
      // 976 Filled Via plating line missing info
      if ((Fnc.SysGetAttrValue('UEtch_Cu') > 0) or (Fnc.SysGetAttrValue('Min_Surf_Plt') > 0)) then
          CalcAndInsert_DECUTHK(true, 1, '')  // (364) Surface Cu thickness calculation correction
        else
          CalcAndInsert_DECUTHK(false, 1, '');

      StepParamERP('Dimple Spec', Fnc.SysGetAttrValue('Dimple_Spec'));

      if ((Fnc.SysGetAttrValue('Application') = 'AUTOMOTIVE') or (Fnc.SysGetAttrValue('Application') = 'AUTOMOTIVE NO INKJET')) then
      begin
        if Fnc.SysGetAttrValue('ApplicationSP') <> 'NONE' then
          StepParamERP('Specific Application', Fnc.SysGetAttrValue('ApplicationSP'));
      end;

    end;
  end
  else
  begin
    if Plating_Line = 'MCP' then
    begin
      StepDeptERP('COPPL-E');

      if CustCode_Rule('Customer') = 'FA' then
        StepWCERP('COPPL-E01');
      else
        StepWCERP('COPPL-E0');

      if Extra_Plt_Step then
        StepWCERP('COPPL-E0');
    end;

    if Plating_Line = 'PAL3' then
    begin
      StepDeptERP('COPPL-B');
      StepWCERP('COPPL-B');
    end;

    if ( Plating_Line = 'P4' ) or ( Plating_Line = 'PAL4' ) then // 2467 'PAL4'  // 2557
    begin
      StepDeptERP('COPPL-C');
      StepWCERP('COPPL-C1');
    end;

    if ( Plating_Line = 'PAL6' ) or
       ( Plating_Line = 'PAL7' ) or
       ( Plating_Line = 'P6' ) or
       ( Plating_Line = 'P7' ) or
       ( Plating_Line = 'P6 / P7' ) then  // 2467 'PAL6 / PAL7'
    begin
      //StepDeptERP('COPPL-C');
      StepWCERP('COPPL-C2'); // Plating Line PAL5 change to PAL6
    end;

    StepParamERP('Plating Line', Plating_Line);  // Include the Electrolytic Machine Name on the process step.

    if ( MechBlindViaSide <> 'None' ) and ( NCRun = 1 ) then    // MEch Blind Vias 1356
    begin
      StepParamERP('Remark', 'With Mech Blind Vias');
      StepParamERP('Mech Blind Via Depth', FormatFloat('0.000', MechBlindViaMaxDepth));
      StepParamERP('Mech Blind Via Aspect', FormatFloat('0.000',MechBlindViaMaxAspectRatio));
    end;

    if Plating_Line = 'PAL3 + MCP' then
     ShowMessage('ERROR! : NO CU PLATING LINE SELECTED as PAL3 + MCP');

    if Plating_Line = 'NO_PLATING_LINE' then
    begin
      if PressThickness > 3.5 then
      begin
        ShowMessage('ERROR! : Thickness > 3.5mm. NO CU PLATING LINE SELECTED FROM TABLE.' + #13 + 'Resource set to COPPL-C2 Copper Plating 5 Reverse Pulse');
        StepWCERP('COPPL-C2');
      end
      else
        ShowMessage('ERROR! : NO CU PLATING LINE SELECTED OR A NEW CU PLATING LINE CREATED IN TABLE PLEASE CHECK!');
    end;

    if Extra_Plt_Step then
    begin
      StepParamERP('Surface Plating Spec', Fnc.SysGetAttrValue('Surf_Plt_Spec'));
      if ((Fnc.SysGetAttrValue('Aspect_Ratio_Val') > 5.67) or (PressThickness > 1.7)) then
        StepInstructionERP('COPPL002'); // REMARKS:REFER TO PE FOR CONDITION.
    end
    else
    begin // 978
      if (( Fnc.SysGetAttrValue('BlindVias') = true ) and ( Fnc.SysGetAttrValue('NCRunX2') = true ) and  ( NCRun = 1 )) or
         (( Fnc.SysGetAttrValue('BlindVias') = true ) and ( Fnc.SysGetAttrValue('NCRunX2') = false ))
      then
      begin
        if Fnc.SysGetAttrValue('Laser_Check_Hole') = 0.0 then
          ShowMessage('ERROR! : Laser Accuracy Check Hole is ZERO');

        InsertViaTypeAttributes;

        //if CustCode_Rule('Customer') <> 'FA' then  2364 - Remove all FA restrictions for Step Attributes
          InsertBlindViaAttributes;
      end
      else
      begin
        if Fnc.SysGetAttrValue('LayerCount') > 2 then // 2 Layer Fixes
        begin
          if NCRun = 1 then
            StepParamERP('Thickness Before Plate', FormatFloat('0.000', PressThickness));
          else if NCRun > 1 then
            StepParamERP('Thickness Before Plate', FormatFloat('0.000', LayupThickness));
        end
        else
          StepParamERP('Thickness Before Plate', FormatFloat('0.000', DSThicknessB4Plating));
      end;

     // IES LOGIC = Level[VIA_TYPE$]="BLIND AND BURIED" OR LPTH? doens;t seem to make sense LPTH = Drilled = everything that gets plated???

     // Fix for Surface Plating not being set until Capped Via step:
      if ((Fnc.SysGetAttrValue('CappedVia') = true) and (Fnc.SysGetAttrValue('NCRunX2') = false)) then
      begin
        if Fnc.SysGetAttrValue('Min_Surf_Plt') = 0 then
          Fnc.SysSetAttrValue('Min_Surf_Plt', 15.0);
      end;

      if Fnc.SysGetAttrValue('NCRunX2') = false then
      begin
        if ((Fnc.SysGetAttrValue('UEtch_Cu') > 0) or (Fnc.SysGetAttrValue('Min_Surf_Plt') > 0)) then
          CalcAndInsert_DECUTHK(true, 1, '')  // (364) Surface Cu thickness calculation correction
        else
          CalcAndInsert_DECUTHK(false, 1, '');
      end
      else // NC Run X 2
      begin
        if NCRun = 2 then
          CalcAndInsert_DECUTHK(false, 2, '')
        else
          CalcAndInsert_DECUTHK(true, 1, '');
      end;

      if Fnc.SysGetAttrValue('BlindVias') then
      begin
      //if CustCode_Rule('Customer') <> 'FA' then
        //begin
          if NCRun = 2 then
          begin
            StepParamERP('2nd Min Drill Size', Fnc.SysGetAttrValue('Min_Drill_Size_2'));
            StepParamERP('Ave Min PTH', Fnc.SysGetAttrValue('Ave_Min_Th_2'));  // 1513
            StepParamERP('Abs Min PTH', Fnc.SysGetAttrValue('Abs_Min_Th_2'));  // 1513
          end
          else
          begin
            StepParamERP('Min Drill Size', Fnc.SysGetAttrValue('Min_Drill_Size'));
            StepParamERP('Ave Min PTH', Fnc.SysGetAttrValue('Ave_Min_Th')); // 1513
            StepParamERP('Abs Min PTH', Fnc.SysGetAttrValue('Abs_Min_Th')); // 1513
          end

        //end;
      end
      else
      begin
        //if CustCode_Rule('Customer') <> 'FA' then
        //begin
          if NCRun = 2 then
          begin
            StepParamERP('2nd Min Drill Size', Fnc.SysGetAttrValue('Min_Drill_Size_2'));

            if ((Fnc.SysGetAttrValue('Ave_Min_Th_2') > 0 ) or (Fnc.SysGetAttrValue('Abs_Min_Th_2') > 0 )) then
            begin
              StepParamERP('2nd Ave Min PTH', Fnc.SysGetAttrValue('Ave_Min_Th_2'));
              StepParamERP('2nd Abs Min PTH', Fnc.SysGetAttrValue('Abs_Min_Th_2'));
              StepParamERP('2nd Ave Max PTH', Fnc.SysGetAttrValue('Ave_Max_Th_2'));
              StepParamERP('2nd Abs Max PTH', Fnc.SysGetAttrValue('Abs_Max_Th_2'));
            end;
          end
          else
          begin
            StepParamERP('Min Drill Size', Fnc.SysGetAttrValue('Min_Drill_Size'));
            StepParamERP('Ave Min PTH', Fnc.SysGetAttrValue('Ave_Min_Th'));
            StepParamERP('Abs Min PTH', Fnc.SysGetAttrValue('Abs_Min_Th'));

            if Fnc.SysGetAttrValue('Abs_Max_Th') > 0 then
            begin
              StepParamERP('Ave Max PTH', Fnc.SysGetAttrValue('Ave_Max_Th'));
              StepParamERP('Abs Max PTH', Fnc.SysGetAttrValue('Abs_Max_Th'));
            end;
          end;
        //end;
      end;
      //end;

      //if CustCode_Rule('Customer') <> 'FA' then
      //begin
        if Fnc.SysGetAttrValue('Surf_Plt_Spec') > 0 then
          StepParamERP('Surface Plating Spec', Fnc.SysGetAttrValue('Surf_Plt_Spec'));

        if NCRun = 2 then
        begin
          StepParamERP('2nd PTH Aspect Ratio', Fnc.SysGetAttrValue('Aspect_Ratio_Val_2'));
          StepParamERP('2nd PTH Cu Plate Area', Fnc.SysGetAttrValue('PTH_CuPlt_Area_2'));
          StepParamERP('2nd Cu Ratio', Fnc.SysGetAttrValue('Cu_Ratio_2'));
        end
        else
        begin
          StepParamERP('PTH Aspect Ratio', Fnc.SysGetAttrValue('Aspect_Ratio_Val'));
          StepParamERP('PTH Cu Plating Area', Fnc.SysGetAttrValue('PTH_CuPlt_Area'));
          StepParamERP('Cu Ratio', Fnc.SysGetAttrValue('Cu_Ratio'));
        end;
      //end;

      if ((CustCode_Rule('Customer') = 'GM') and (Fnc.SysGetAttrValue('Test_ID') <> 'None')) then
      begin
        StepParamERP('Test ID', Fnc.SysGetAttrValue('Test_ID'));
      end
      else
      begin
        if ((CustCode_Rule('Customer') = 'GM') and (Fnc.SysGetAttrValue('Test_ID') <> 'None')) then
          ShowMessage('ERROR! : Test ID has no Value');
      end;

      //if CustCode_Rule('Customer') <> 'FA' then
      //begin
        if Fnc.SysGetAttrValue('Min_Surf_Cu') > 0 then
          StepParamERP('Min Surface Cu', Fnc.SysGetAttrValue('Min_Surf_Cu'));

        if Fnc.SysGetAttrValue('Max_Surf_Cu') > 0 then
          StepParamERP('Max Surface Cu', Fnc.SysGetAttrValue('Max_Surf_Cu'));

        // StepParamERP('Max Surface Cu', Fnc.SysGetAttrValue('Max_Surf_Cu'));  1514

        StepParamERP('Application', Fnc.SysGetAttrValue('Application'));

        if ((Fnc.SysGetAttrValue('Application') = 'AUTOMOTIVE') or (Fnc.SysGetAttrValue('Application') = 'AUTOMOTIVE NO INKJET')) then
        begin
          if Fnc.SysGetAttrValue('ApplicationSP') <> 'NONE' then
            StepParamERP('Specific Application', Fnc.SysGetAttrValue('ApplicationSP'));
        end;
      //end;

    end; // End of Insert Attributes etc for standard (single step) plating

    StepInstructionERP('COPPL001'); // MEASUREMT CU THK : i) ______ii) ______,

    if CustCode_Rule('Customer') = 'FA' then
      StepInstructionERP('COPPL038'); //  REMARK : Sampling copper thickness measurement

    if Fnc.SysGetAttrValue('NCRunX2') = true then
    begin

      if NCRun = 1 then StepInstructionERP('2NC_CUPLT1'); // REMARK: FIRST CU PLATING.

      if NCRun = 2 then
      begin

        StepInstructionERP('2NC_CUPLT2'); // REMARK: SECOND CU PLATING.

        if ( BoardFinish = 'ENIG' ) or ( ENIGplusOSP ) then // 1256
        begin
          //if ((Fnc.SysGetAttrValue('Cust_Code') = 'WBF') or (Fnc.SysGetAttrValue('Cust_Code') = 'WBC')) then
          if (
              (Eng_JobType = 'Sample') and
              ((CustCode_Rule('Customer') = 'BF') or (CustCode_Rule('Customer') = 'BC'))
             )
          then
            StepInstructionERP('DRILL011'); // REMARK: OSP + 2X DRILLING.

        end;

      end;

    end;

    if Fnc.SysGetAttrValue('Tight_PressFit_Tol') then  // 795 Tight Press Fit Tolerance rule
    begin

      if Fnc.SysGetAttrValue('NCRunX2') then
        if NCRun = 2 then InsertPressFitRemarks;
      else
        InsertPressFitRemarks;

    end;
  end;

  AddBoardFinishAsAttribute; // 1223 Additional Surface Finish info under Electrolytic Cu step

  StepParamERP('Panel Size', Fnc.SysGetAttrValue('Panel_Size'));  // 2201 Electrolytic Cu Info

  // Email from Herole 23/11/08 - Bug Fix 23/11/16, If FILL_VIA line these next 2 lines were missed. Move to end of script
  if NCRun = 1 then StepParamERP('Plating Stage', 'First Plating'); // 2466
  if NCRun = 2 then StepParamERP('Plating Stage', 'Second Plating'); // 2466

End;

Procedure Electrolytic_Cu_1_SD;
begin

  Electrolytic_Cu_SD(false);

end;

Procedure Electrolytic_Cu_2XNC_SD;
begin

  Electrolytic_Cu_SD(false);

end;

Procedure Electrolytic_Cu_2_SD;
begin

  Electrolytic_Cu_SD(true);

end;

Procedure Electrolytic_CappedVia_SD;
begin

  CappedAndStrikePlatingResource; // 2616 VELCP Updated Flow

  if Fnc.SysGetAttrValue('Min_Surf_Plt') = 0 then Fnc.SysSetAttrValue('Min_Surf_Plt', 15.0);

  StepParamERP('Min Surface Plate', Fnc.SysGetAttrValue('Min_Surf_Plt'));

  //StepParamERP('Process', 'Flash Plating');      // 2466 switched this off since it conflicts with the new request below
  StepParamERP('Plating Stage', 'Capped Plating'); // 2466

  CalcAndInsert_DECUTHK(false, 2, 'CappedVia');
  AddBoardFinishAsAttribute; // 1223 Additional Surface Finish info under Electrolytic Cu step

  // 2400
  if Fnc.SysGetAttrValue('Cu_Ratio_Capped') = 0 then Fnc.SysSetAttrValue('Cu_Ratio_Capped', Set_Cu_Ratio(true));

  StepParamERP('Cu Ratio', Fnc.SysGetAttrValue('Cu_Ratio_Capped'));

end;

procedure KK_Drill_SD;
begin

  StepDeptERP('KKDRI-B');
  StepWCERP('KKDRI-B');

  if Fnc.SysGetAttrValue('KK_Distance') = 0 then  // 2550
    Fnc.SysSetAttrValue('KK_Distance', Fnc.SysGetAttrValue('Panel_Length') - 8)
  else
    MessageDlg('The manually entered value of ' +
                 IntToStr(Fnc.SysGetAttrValue('KK_Distance')) +
                ' will be used as the KK distance. Please check and confirm', mtWarning, SetOf([mbOK]), 0);

  StepParamERP('KK Distance', Fnc.SysGetAttrValue('KK_Distance'));

end;

procedure MechBlindVia_Common;
begin

  StepDeptERP('BACKD-A');
  StepWCERP('BACKD-A');
  StepParamERP('Entry Sheet', GetDrillEntrySheet); // 912 Mech Blind Via Entry Material

  // 2384 KK Drill Info all Drill Processes
  StepParamERP('KK Distance', Fnc.SysGetAttrValue('KK_Distance_MBV'));

end;

procedure MechBlindVia1_SD;
begin
  MechBlindVia_Common;

  case MechBlindViaSide of
    'Bot'   : StepParamERP('Side A', Fnc.SysGetAttrValue('BotLayer'));  // 837 Show Same format as Backdrill
    'Top'   : StepParamERP('Side B', Fnc.SysGetAttrValue('TopLayer'));
    'Both'  : StepParamERP('Side A', Fnc.SysGetAttrValue('BotLayer'));
  end;

  case MechBlindViaSide of
    'Bot'   : InsertMechBlindViaInfo('A');
    'Top'   : InsertMechBlindViaInfo('B');
    'Both'  : InsertMechBlindViaInfo('A');
  end;
end;
       
procedure MechBlindVia2_SD;
begin
  MechBlindVia_Common;
  StepParamERP('Side B', Fnc.SysGetAttrValue('TopLayer'));  // 837 Mechanical Drill should show A & B Format same as backdrill
  InsertMechBlindViaInfo('B');
end;

procedure Beveling_SD;
begin
  StepDeptERP('FINBE-A0');
  StepWCERP('FINBE-A0');
end;

procedure ManualBeveling_SD;
begin
  StepDeptERP('FINBE-B0');
  StepWCERP('FINBE-B0');
end;

procedure CoreBuild_CT_Buffing1_SD;   // Core Build Cu Thinning
begin
  StepDeptERP('EPBUF-A');
  StepWCERP('EPBUF-A');
  StepParamERP('1st Buffing Spec', formatCuThinValue('CoreBuild_CuThin_1stBuff','CoreBuild')); // 799 Surface Cu Thickness value format in runcard
  //StepInstructionERP('EPXPL002'); //REMARKS : CLEAR BUFFING.  (From OL Main Flow) Removed Per request from Herole 9/5

  {if CoreBuild then // 838 Core Build Buffing Remarks
    StepInstructionERP('EPXPL014'); //Non-Woven Buffing Only
  else if SubAssemblyCoreBuild then
    StepInstructionERP('EPXPL015'); //Ceramic Buffing }

  if Fnc.SysGetAttrValue('CoreBuild_CuThin_Process') = 'Vertical Buffing' then
    StepInstructionERP('EPBUF028'); // Use Vertical Buffing Machine Only  // 1473
  else if Fnc.SysGetAttrValue('CoreBuild_CuThin_Process') <> 'Micro-Etch + Buffing' then
  begin
    if CoreBuild then // 838 Core Build Buffing Remarks
      StepInstructionERP('EPXPL014'); //Non-Woven Buffing Only
    else if SubAssemblyCoreBuild then
      StepInstructionERP('EPXPL015'); //Ceramic Buffing
  end;
end;

procedure CoreBuild_MicroEtch_SD; // Core Build Cu Thinning
begin
  StepDeptERP('METCH-A');
  StepWCERP('METCH-A');
  StepParamERP('Note', 'Metch for Cu Thin');
  StepParamERP('Micro-Etch Spec', formatCuThinValue('CoreBuild_CuThin_MEtch', 'CoreBuild')); // Buff-Etch-Buff  // 799 Surface Cu Thickness value format in runcard
end;

procedure CoreBuild_CT_Buffing2_SD;  // Core Build Cu Thinning
begin
  StepDeptERP('EPBUF-A');
  StepWCERP('EPBUF-A');
  StepParamERP('2nd Buffing Spec', formatCuThinValue('CoreBuild_CuThin_2ndBuff','CoreBuild')); // 799 Surface Cu Thickness value format in runcard
  //StepInstructionERP('EPXPL002'); //REMARKS : CLEAR BUFFING.  (From OL Main Flow) Removed Per request from Herole 9/5
                                                  
  if CoreBuild then // 838 Core Build Buffing Remarks
    StepInstructionERP('EPXPL014'); //Non-Woven Buffing Only
  else if SubAssemblyCoreBuild then
    StepInstructionERP('EPXPL015'); //Ceramic Buffing
end;

procedure Baking_After_HP_SD;
begin
  StepDeptERP('DMBAK-A');
  StepWCERP('DMBAK-A');
end;

// 910 Addition of Ultrasonic and after VELCP Hole check
procedure UltraSonicStep_SD;
begin
  StepDeptERP('CURIN-U');
  StepWCERP('CURIN-U');
end;

// 910 Addition of Ultrasonic and after VELCP Hole check
procedure Hole_Check_AfterEless_SD;
begin
  StepDeptERP('HOLCP-A');
  StepWCERP('HOLCP-A0');
end;

procedure Pulse_Bond_SD;
begin
  StepDeptERP('PBOOK-A');
  StepWCERP('PBOOK-H0');
  Fnc.SysSetAttrValue('Pin_Lam', false);
end;

procedure HitalexLam_SD;
begin

  StepDeptERP('FILAM-A ');
  StepWCERP('FILAM-A ');

end;
